import os
Language = None
#写入工具类函数
def WriteToolFunctions(f):
    f.write('def IsInt(text):\n')
    f.write('    """'+Language.G_Language[8000]+'"""\n')
    f.write('    if text.isdigit() == True:\n')
    f.write('        return True\n')
    f.write('    return False\n')
    f.write('def IsFloat(text):\n')
    f.write('    """'+Language.G_Language[8001]+'"""\n')
    f.write("    if text.count('.') == 1:\n")
    f.write("        left = text.split('.')[0]\n")
    f.write("        right = text.split('.')[1]\n")
    f.write("        lright = ''\n")
    f.write("        if left.count('-') == 1 and left[0] == '-':\n")
    f.write("            lright = left.split('-')[1]\n")
    f.write("        elif left.count('-') == 0:\n")
    f.write("            lright = left\n")
    f.write("        if right.isdigit() and lright.isdigit():\n")
    f.write("            return True\n")
    f.write('    return False\n')
    f.write('def IsNumeric(text):\n')
    f.write('    """'+Language.G_Language[8002]+'"""\n')
    f.write("    if IsInt(text) == True or IsFloat(text) == True:\n")
    f.write('        return True\n')
    f.write('    return False\n')
    f.write('def CheckSpecialChar(text):\n')
    f.write('    """'+Language.G_Language[8003]+'"""\n')
    f.write('    string = \'~!@#$%^&*()+-*/<>,.[]、‘’\\\'"{}/^\'\n')
    f.write('    for i in string:\n')
    f.write('        if i in text:\n')
    f.write('            return True\n')
    f.write('    return False\n')
    f.write('def IsMobilePhone(text):\n')
    f.write('    """'+Language.G_Language[8004]+'"""\n')
    f.write('    ret = re.match(r"^1[35789]\d{9}$", text)\n')
    f.write('    if ret:\n')
    f.write('        return True\n')
    f.write('    return False\n')
    f.write('def IsEmail(text):\n')
    f.write('    """'+Language.G_Language[8005]+'"""\n')
    f.write("    pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\n")
    f.write("    return re.match(pattern, text) is not None\n")
    f.write('def RandNumber(begin=0,end=100):\n')
    f.write('    """'+Language.G_Language[9000]+'"""\n')
    f.write('    import random\n')
    f.write('    return random.randint(begin,end)\n')
    f.write('def GetCurrTime(splitChar=\':\'):\n')
    f.write('    """'+Language.G_Language[9001]+'"""\n')
    f.write('    import datetime\n')
    f.write('    nowDateTime = datetime.datetime.now()\n')
    f.write('    currTime = str("%d%s%d%s%d"%(nowDateTime.hour,splitChar,nowDateTime.minute,splitChar,nowDateTime.second))\n')
    f.write('    return currTime\n')
    f.write('def GetCurrDate(splitChar=\':\'):\n')
    f.write('    """'+Language.G_Language[9002]+'"""\n')
    f.write('    import datetime\n')
    f.write('    nowDateTime = datetime.datetime.now()\n')
    f.write('    currDate = str("%d%s%d%s%d"%(nowDateTime.year,splitChar,nowDateTime.month,splitChar,nowDateTime.day))\n')
    f.write('    return currDate\n')
    f.write('def Sleep(second=1):\n')
    f.write('    """'+Language.G_Language[9354]+'"""\n')
    f.write('    import time\n')
    f.write('    time.sleep(second)\n')
    f.write('def OutputProcessToText(cmdText,uiName,elementName):\n')
    f.write('    """'+Language.G_Language[9009]+'"""\n')
    f.write('    DelAllLines(uiName,elementName)\n')
    f.write('    try:\n')
    f.write('        import subprocess\n')
    f.write('        process = subprocess.Popen(cmdText,shell=True, bufsize=0, stdout=subprocess.PIPE, stderr=subprocess.STDOUT,stdin=subprocess.PIPE,encoding=\'utf-8\')\n')
    f.write('        outputString = process.stdout.readline()\n')
    f.write('        Result = 0\n')
    f.write('        while outputString:\n')
    f.write('            AddLineText(uiName,elementName,outputString)\n')
    f.write('            outputString = process.stdout.readline()\n')
    f.write('        process.stdout.close()\n')
    f.write('    except Exception as ex:\n')
    f.write('        if uiName and elementName:\n')
    f.write('            AddLineText(uiName,elementName,str(ex))\n')
    f.write('        else:\n')
    f.write('            print(str(ex))\n')

#写入增加控件到字典的函数
def WriteRegisterElementFunction(f):
    f.write('def GetUIName(root,className):\n')
    f.write('    global G_UIRootIDDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    uiName = className\n')
    f.write('    if className in G_UIRootIDDictionary and G_UIRootIDDictionary[className] == root:\n')
    f.write('        return uiName\n')
    f.write('    if G_UIElementDictionary:\n')
    f.write('        classIndex = 0\n')
    f.write('        while uiName in G_UIElementDictionary:\n')
    f.write('            classIndex = classIndex + 1\n')
    f.write('            uiName = className + "_" + str(classIndex)\n')
    f.write('    G_UIRootIDDictionary[className] = root\n')
    f.write('    return uiName\n')

    f.write('def GetUIParams(uiName):\n')
    f.write('    """'+Language.G_Language[1492]+'"""\n')
    f.write('    global G_UIParamsDictionary\n')
    f.write('    if uiName in G_UIParamsDictionary:\n')
    f.write('        return G_UIParamsDictionary[uiName]\n')
    f.write('    else:\n')
    f.write('        G_UIParamsDictionary[uiName] = uiName\n')
    f.write('    return uiName\n')

    f.write('def HScrollBar_Config(event,scrollBar):\n')
    f.write('    parentinfo = event.widget.winfo_parent()\n')
    f.write('    parentWidget = event.widget._nametowidget(parentinfo)\n')
    f.write('    top = parentWidget.winfo_height()-20\n')
    f.write('    width = parentWidget.winfo_width()\n')
    f.write('    if top >= 0 and width >= 0:\n')
    f.write('        scrollBar.place(x = 0,y = top,width = width ,height = 20)\n')
    f.write('def VScrollBar_Config(event,scrollBar):\n')
    f.write('    parentinfo = event.widget.winfo_parent()\n')
    f.write('    parentWidget = event.widget._nametowidget(parentinfo)\n')
    f.write('    left = parentWidget.winfo_width()-20\n')
    f.write('    height = parentWidget.winfo_height()\n')
    f.write('    if left >= 0 and height >= 0:\n')
    f.write('        scrollBar.place(x = left,y = 0,width = 20,height = height)\n')
    f.write('def Register(uiName,elementName,element,alias=None,groupName=None,styleName=None):\n')
    f.write('    """'+Language.G_Language[1201]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementLayerDictionary\n')
    f.write('    global G_UIRootSizeDictionary\n')
    f.write('    global G_UIActiveDictionary\n')
    f.write('    global G_UICommandDictionary\n')
    f.write('    global G_UIElementPlaceDictionary\n')
    f.write('    global G_UIElementRoundRectangleDictionary\n')
    f.write('    global G_UIGroupDictionary\n')
    f.write('    global G_UIStyleDictionary\n')
    f.write('    global G_UIRadioButtonGroupArray\n')
    f.write('    global G_CanvasSizeDictionary\n')
    f.write('    global G_CanvasShapeDictionary\n')
    f.write('    global G_CanvasParamDictionary\n')
    f.write('    global G_CanvasFontDictionary\n')
    f.write('    global G_CanvasImageDictionary\n')
    f.write('    global G_CanvasEventDictionary\n')
    f.write('    global G_CanvasPointDictionary\n')
    f.write('    global G_ListViewTagDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    global G_UIElementIconDictionary\n')
    f.write('    if uiName not in G_UIElementDictionary:\n')
    f.write('        G_UIElementDictionary[uiName]={}\n')
    f.write('        G_UIElementLayerDictionary[uiName]={}\n')
    f.write('        G_UIRootSizeDictionary[uiName]={}\n')
    f.write('        G_UICommandDictionary[uiName]={}\n')
    f.write('        G_UIActiveDictionary[uiName]={}\n')
    f.write('        G_UIElementAliasDictionary[uiName]={}\n')
    f.write('        G_UIElementPlaceDictionary[uiName]={}\n')
    f.write('        G_UIElementRoundRectangleDictionary[uiName]={}\n')
    f.write('        G_UIGroupDictionary[uiName]={}\n')
    f.write('        G_UIStyleDictionary[uiName]={}\n')
    f.write('        G_UIRadioButtonGroupArray[uiName]={}\n')
    f.write('        G_CanvasSizeDictionary[uiName]={}\n')
    f.write('        G_CanvasShapeDictionary[uiName]={}\n')
    f.write('        G_CanvasParamDictionary[uiName]={}\n')  
    f.write('        G_CanvasFontDictionary[uiName]={}\n')
    f.write('        G_CanvasImageDictionary[uiName]={}\n')
    f.write('        G_CanvasEventDictionary[uiName]={}\n')
    f.write('        G_CanvasPointDictionary[uiName]={}\n')
    f.write('        G_CanvasPointDictionary[uiName]={}\n')
    f.write('        G_UIElementVariableArray[uiName]={}\n')
    f.write('        G_ListViewTagDictionary[uiName]={}\n')
    f.write('        G_UIElementIconDictionary[uiName]={}\n')
    f.write("        G_UIElementIconDictionary[uiName]['MainMenu'] = {}\n")
    f.write("        G_UIElementIconDictionary[uiName]['SysTray'] = {}\n")
    f.write('    G_UIElementDictionary[uiName][elementName]=element\n') 
    f.write("    if elementName == 'UIClass':\n") 
    f.write('        G_UIElementAliasDictionary[uiName].clear()\n') 
    f.write('    if alias:\n') 
    f.write('        G_UIElementAliasDictionary[uiName][alias]=elementName\n') 
    f.write('    if groupName:\n') 
    f.write('        G_UIGroupDictionary[uiName][elementName]=groupName\n') 
    f.write('    if styleName:\n') 
    f.write('        G_UIStyleDictionary[uiName][elementName]=styleName\n') 
    f.write("    if elementName.find('TreeView_') >= 0:\n")
    f.write('        G_UIElementIconDictionary[uiName][elementName]={}\n')
    f.write("    if elementName.find('ListView_') >= 0:\n")
    f.write('        G_ListViewTagDictionary[uiName][elementName]=[]\n')
    f.write("    if elementName.find('_HScrollbar') >= 0:\n")
    f.write("        FrameName = elementName.replace('_HScrollbar','')\n")
    f.write("        if FrameName:\n")
    f.write("            FrameWidget = G_UIElementDictionary[uiName][FrameName]\n")
    f.write("            FrameWidget.bind('<Configure>',EventFunction_Adaptor(HScrollBar_Config,scrollBar = element))\n")
    f.write("    if elementName.find('_VScrollbar') >= 0:\n")
    f.write("        FrameName = elementName.replace('_VScrollbar','')\n")
    f.write("        if FrameName:\n")
    f.write("            FrameWidget = G_UIElementDictionary[uiName][FrameName]\n")
    f.write("            FrameWidget.bind('<Configure>',EventFunction_Adaptor(VScrollBar_Config,scrollBar = element))\n")
#写入设置暗色标题栏
def WriteSetTitleBar(f):
    f.write('def SetTitleBar(root,titleText=\'\',isDarkMode=False,isDropTitle=False):\n')
    f.write('    """'+Language.G_Language[1494]+'"""\n')
    f.write('    try :\n')
    f.write('        root.update()\n')
    f.write('        root.title(titleText)\n')
    f.write('        if isDarkMode == True and isDropTitle == False:\n')
    f.write('            DARK_MODE = 20\n')
    f.write('            DwmSetWindowAttribute = ctypes.windll.dwmapi.DwmSetWindowAttribute\n')
    f.write('            WindowHandle = ctypes.windll.user32.GetParent(root.winfo_id())\n')
    f.write('            value = ctypes.c_int(2)\n')
    f.write('            DwmSetWindowAttribute(WindowHandle, DARK_MODE, ctypes.byref(value), ctypes.sizeof(value))\n')
    f.write('            root.update()\n')
    f.write('        if isDropTitle == True:\n')
    f.write('            root.overrideredirect(True)\n')
    # f.write('            from win32gui import GetParent, SetWindowPos, UpdateWindow, SetWindowLong, GetWindowLong, ReleaseCapture, SendMessage\n')
    # f.write('            from win32con import NULL, SWP_NOSIZE, SWP_NOMOVE, SWP_NOZORDER, SWP_DRAWFRAME, GWL_STYLE, WS_CAPTION, WM_SYSCOMMAND, SC_MOVE, HTCAPTION, WS_THICKFRAME\n')
    # f.write('            WindowHandle = ctypes.windll.user32.GetParent(root.winfo_id())\n')    
    # f.write('            SetWindowLong(WindowHandle, GWL_STYLE, GetWindowLong(WindowHandle, GWL_STYLE) & ~WS_CAPTION & ~WS_THICKFRAME)\n')
    # f.write('            SetWindowPos(WindowHandle, NULL, 0, 0, 0, 0, SWP_DRAWFRAME)\n')
    # f.write('            UpdateWindow(WindowHandle)\n')
    f.write('    except Exception:\n')
    f.write('        root.title(titleText)\n')


#写入增加控件到字典的函数
def WriteDestroyUI(f):
    #f.write(Language.G_Language[1300]+'\n')
    f.write("def PlayDestroyDialogAction(uiName,result,topLevel,animation='zoomout'):\n")
    f.write('    def FadeOut(topLevel,alpha):\n')
    f.write('        try :\n')
    f.write('            hwnd = windll.user32.GetParent(topLevel.winfo_id())\n')
    f.write('            _winlib = ctypes.windll.user32\n')
    f.write('            style = _winlib.GetWindowLongA( hwnd, 0xffffffec ) | 0x00080000\n')
    f.write('            _winlib.SetWindowLongA( hwnd, 0xffffffec, style )\n')
    f.write('            _winlib.SetLayeredWindowAttributes( hwnd, 0, alpha+1, 2 )\n')
    f.write('            alpha = alpha - 1\n')
    f.write('        except ImportError:\n')
    f.write('            pass\n')
    f.write('        if alpha > 0:\n')
    f.write('            topLevel.after(1,lambda:FadeOut(topLevel = topLevel,alpha = alpha))\n')
    f.write('        else:\n')
    f.write("            DestroyUI(uiName,result)\n")
    f.write('            print("结束")\n')
    f.write('    def ZoomOut(topLevel,zoom,win_x,win_y,win_width,win_height):\n')
    f.write('        try :\n')
    f.write('            center_x = win_x + int(win_width/2)\n')
    f.write('            center_y = win_y + int(win_height/2)\n')
    f.write('            zw = int(win_width * zoom)\n')
    f.write('            zh = int(win_height * zoom)\n')
    f.write('            zx = center_x - int(zw/2)\n')
    f.write('            zy = center_y - int(zh/2)\n')
    f.write("            topLevel.geometry('%dx%d+%d+%d'%(zw,zh,zx,zy))\n")
    f.write('            zoom = zoom - 0.01\n')
    f.write('        except ImportError:\n')
    f.write('            pass\n')
    f.write('        if zoom > 0.0:\n')
    f.write('            topLevel.after(1,lambda:ZoomOut(topLevel = topLevel,zoom = zoom ,win_x = win_x,win_y = win_y,win_width=win_width,win_height=win_height))\n')
    f.write('        else:\n')
    f.write("            DestroyUI(uiName,result)\n")
    f.write('            print("结束")\n')
    f.write('    if animation == "fadeout":\n')
    f.write('        try :\n')
    f.write('            hwnd = windll.user32.GetParent(topLevel.winfo_id())\n')
    f.write('            _winlib = ctypes.windll.user32\n')
    f.write('            style = _winlib.GetWindowLongA( hwnd, 0xffffffec ) | 0x00080000\n')
    f.write('            _winlib.SetWindowLongA( hwnd, 0xffffffec, style )\n')
    f.write('            _winlib.SetLayeredWindowAttributes( hwnd, 0, 0, 2 )\n')
    f.write('            topLevel.deiconify()\n')
    f.write('            topLevel.after(1,lambda:FadeOut(topLevel = topLevel,alpha = 255))\n')
    f.write('        except ImportError:\n')
    f.write('            pass\n')
    f.write('    elif animation == "zoomout":\n')
    f.write('        try :\n')
    f.write('            win_x = topLevel.winfo_x()\n')
    f.write('            win_y = topLevel.winfo_y()\n')
    f.write("            win_width = topLevel.winfo_width()\n")
    f.write('            win_height = topLevel.winfo_height()\n')
    f.write('            topLevel.after(1,lambda:ZoomOut(topLevel = topLevel,zoom = 1.0,win_x = win_x,win_y = win_y,win_width=win_width,win_height=win_height))\n')
    f.write('        except ImportError:\n')
    f.write('            pass\n')
    f.write("def DestroyUI(uiName,result=0,animation=''):\n")
    f.write('    """'+Language.G_Language[1300]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIRootSizeDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementLayerDictionary\n')
    f.write('    global G_UICommandDictionary\n')
    f.write('    global G_UIElementPlaceDictionary\n')
    f.write('    global G_UIElementRoundRectangleDictionary\n')
    f.write('    global G_UIGroupDictionary\n')
    f.write('    global G_UIStyleDictionary\n')
    f.write('    global G_UIRadioButtonGroupArray\n')
    f.write('    global G_CanvasSizeDictionary\n')
    f.write('    global G_CanvasShapeDictionary\n')
    f.write('    global G_CanvasParamDictionary\n')
    f.write('    global G_CanvasFontDictionary\n')
    f.write('    global G_CanvasImageDictionary\n')
    f.write('    global G_CanvasEventDictionary\n')
    f.write('    global G_CanvasPointDictionary\n')
    f.write('    global G_UIElementIconDictionary\n')
    f.write('    global G_UIInputDataArray\n')
    f.write('    global G_TopDialog\n')
    #f.write('    global G_UIElementUserDataArray\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        root = GetElement(uiName,"root")\n')
    f.write('        if root is not None:\n')
    f.write('            if G_TopDialog is root:\n')
    f.write('                G_TopDialog = None\n')
    f.write('            animation = animation.lower()\n')
    f.write("            if animation != '':\n")
    f.write('                PlayDestroyDialogAction(uiName,result,root,animation)\n')
    f.write('                return\n')
    f.write('            if root.master:\n')
    f.write('                try:\n')
    f.write('                    GetUIDataDictionary(uiName)\n')
    f.write('                except:\n')
    f.write('                    pass\n')
    f.write('            try:\n')
    f.write('                if root.master != None or result == 0:\n')
    f.write('                    root.withdraw()\n')
    f.write('                    for childName in root.children.keys():\n')
    f.write('                        child = root.children[childName]\n')
    f.write('                        try:\n')
    f.write('                            child.pack_forget()\n')
    f.write('                        except:\n')
    f.write('                            pass\n')
    f.write('                        try:\n')
    f.write('                            child.grid_forget()\n')
    f.write('                        except:\n')
    f.write('                            pass\n')
    f.write('                        try:\n')
    f.write('                            child.place_forget()\n')
    f.write('                        except:\n')
    f.write('                            pass\n')
    f.write('                    root.destroy()\n')
    f.write('            except:\n')
    f.write('                pass\n')
    f.write('        G_UIElementDictionary.pop(uiName)\n')
    f.write('        G_UIElementLayerDictionary.pop(uiName)\n')
    f.write('        G_UIRootSizeDictionary.pop(uiName)\n')
    f.write('        G_UICommandDictionary.pop(uiName)\n')
    f.write('        G_UIElementAliasDictionary.pop(uiName)\n')
    f.write('        G_UIElementPlaceDictionary.pop(uiName)\n')
    f.write('        G_UIElementRoundRectangleDictionary.pop(uiName)\n')
    f.write('        G_UIGroupDictionary.pop(uiName)\n')
    f.write('        G_UIStyleDictionary.pop(uiName)\n')
    f.write('        G_UIRadioButtonGroupArray.pop(uiName)\n')
    f.write('        G_CanvasSizeDictionary.pop(uiName)\n')
    f.write('        G_CanvasShapeDictionary.pop(uiName)\n')
    f.write('        G_CanvasParamDictionary.pop(uiName)\n')
    f.write('        G_CanvasFontDictionary.pop(uiName)\n')
    f.write('        G_CanvasImageDictionary.pop(uiName)\n')
    f.write('        G_CanvasEventDictionary.pop(uiName)\n')
    f.write('        G_CanvasPointDictionary.pop(uiName)\n')
    f.write('        G_UIElementIconDictionary.pop(uiName)\n')
    f.write('        G_UIInputDataArray[\'PFunc\'] = GetParentCallFunc()\n')
    f.write('        G_UIInputDataArray[\'result\'] = result\n')

#写入增加控件到字典的函数
def WriteDestroyUI_App(f):
    #f.write(Language.G_Language[1300]+'\n')
    f.write('def DestroyUI(uiName,result=0):\n')
    f.write('    """'+Language.G_Language[1300]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementLayerDictionary\n')
    f.write('    global G_UICommandDictionary\n')
    f.write('    global G_UIElementPlaceDictionary\n')
    f.write('    global G_UIElementRoundRectangleDictionary\n')
    f.write('    global G_UIGroupDictionary\n')
    f.write('    global G_UIStyleDictionary\n')
    f.write('    global G_UIRadioButtonGroupArray\n')
    f.write('    global G_CanvasSizeDictionary\n')
    f.write('    global G_CanvasShapeDictionary\n')
    f.write('    global G_CanvasParamDictionary\n')
    f.write('    global G_CanvasFontDictionary\n')
    f.write('    global G_CanvasImageDictionary\n')
    f.write('    global G_CanvasEventDictionary\n')
    f.write('    global G_CanvasPointDictionary\n')
    f.write('    global G_UIElementIconDictionary\n')
    f.write('    global G_UIInputDataArray\n')
    #f.write('    global G_UIElementUserDataArray\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        root = GetElement(uiName,"root")\n')
    f.write('        if root is not None:\n')
    f.write('            root.SetVisible(False)\n')
    f.write('        G_UIElementDictionary.pop(uiName)\n')
    f.write('        G_UIElementLayerDictionary.pop(uiName)\n')
    f.write('        G_UICommandDictionary.pop(uiName)\n')
    f.write('        G_UIElementAliasDictionary.pop(uiName)\n')
    f.write('        G_UIElementPlaceDictionary.pop(uiName)\n')
    f.write('        G_UIElementRoundRectangleDictionary.pop(uiName)\n')
    f.write('        G_UIGroupDictionary.pop(uiName)\n')
    f.write('        G_UIStyleDictionary.pop(uiName)\n')
    f.write('        G_UIRadioButtonGroupArray.pop(uiName)\n')
    f.write('        G_CanvasSizeDictionary.pop(uiName)\n')
    f.write('        G_CanvasShapeDictionary.pop(uiName)\n')
    f.write('        G_CanvasParamDictionary.pop(uiName)\n')
    f.write('        G_CanvasFontDictionary.pop(uiName)\n')
    f.write('        G_CanvasImageDictionary.pop(uiName)\n')
    f.write('        G_CanvasEventDictionary.pop(uiName)\n')
    f.write('        G_CanvasPointDictionary.pop(uiName)\n')
    f.write('        G_UIElementIconDictionary.pop(uiName)\n')
    #f.write('        G_UIElementUserDataArray.pop(uiName)\n')
    f.write('        G_UIInputDataArray[\'result\'] = result\n')
    f.write('        if len(G_UIElementDictionary) == 0:\n')
    f.write('            QuitApplication()\n')
            
#写入输出到界面的函数
def WriteGetElementFunction(f):
    #f.write(Language.G_Language[1202]+'\n')
    f.write('def GetElement(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1202]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary:\n')
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write('            return G_UIElementDictionary[uiName][elementName]\n')
    f.write('        if elementName.find("TreeView") >= 0:\n')
    f.write('            elementName = elementName.replace("TreeView","ListView")\n')
    f.write('            if elementName in G_UIElementDictionary[uiName]:\n')
    f.write('                return G_UIElementDictionary[uiName][elementName]\n')
    f.write('    return None\n')
    #f.write(Language.G_Language[1246]+'\n')
    f.write('def GetElementName(element,isAliasName=True):\n')
    f.write('    """'+Language.G_Language[1246]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    for uiName in G_UIElementDictionary:\n')
    f.write('        for elementName in G_UIElementDictionary[uiName]:\n')
    f.write('            Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('            if Control == element:\n')
    f.write('                if isAliasName == True:\n')
    f.write('                    for aliasName in  G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('                        if G_UIElementAliasDictionary[uiName][aliasName] == elementName:\n')
    f.write('                            return uiName,aliasName\n')
    f.write('                return uiName,elementName\n')
    f.write('            if hasattr(Control,"GetEntry") == True:\n')
    f.write('                ChildWidget = Control.GetEntry()\n')
    f.write('                if ChildWidget is element:\n')
    f.write('                    if isAliasName == True:\n')
    f.write('                        for aliasName in  G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('                            if G_UIElementAliasDictionary[uiName][aliasName] == elementName:\n')
    f.write('                                return uiName,aliasName\n')
    f.write('                    return uiName,elementName\n')
    f.write('            if hasattr(Control,"GetWidget") == True:\n')
    f.write('                ChildWidget = Control.GetWidget()\n')
    f.write('                if ChildWidget is element:\n')
    f.write('                    if isAliasName == True:\n')
    f.write('                        for aliasName in  G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('                            if G_UIElementAliasDictionary[uiName][aliasName] == elementName:\n')
    f.write('                                return uiName,aliasName\n')
    f.write('                    return uiName,elementName\n')
    f.write('    return None,None\n')
    f.write('#注册Form_1的回调函数:\n')
    f.write('def SetForm1_CallBack(uiName,eventType,onLoadCallBack=None):\n')
    f.write('    pass\n')
    f.write('#运行Form_1的回调函数:\n')
    f.write('def RunForm1_CallBack(uiName,eventType,onLoadCallBack=None):\n')
    f.write('    if onLoadCallBack:\n')
    f.write('        return onLoadCallBack(uiName)\n')
    f.write('def PrepareDisplayUI(uiName,form1,onLoadCallBack=None):\n')
    f.write('    global G_UIActiveDictionary\n')
    f.write('    children = form1.winfo_children()\n')
    f.write('    for child in children:\n')
    f.write('        uiName,elementName = GetElementName(child)\n')
    f.write('        if elementName and uiName in G_UIActiveDictionary.keys():\n')
    f.write('            G_UIActiveDictionary[uiName][elementName] = child\n')
    f.write('    if uiName in G_UIActiveDictionary.keys():\n')
    f.write("        G_UIActiveDictionary[uiName]['onLoad'] = onLoadCallBack\n")
    f.write('def ActiveElement(uiName,element):\n')
    f.write('    global G_UIActiveDictionary\n')
    f.write('    if uiName in G_UIActiveDictionary:\n')
    f.write('        for elementName in G_UIActiveDictionary[uiName].keys():\n')
    f.write('            if G_UIActiveDictionary[uiName][elementName] == element:\n')
    f.write('                G_UIActiveDictionary[uiName].pop(elementName)\n')
    f.write('                break\n')
    f.write('    if uiName in G_UIElementDictionary.keys():\n')
    f.write('        if uiName in G_UIElementRoundRectangleDictionary:\n')
    f.write('            for elementName in G_UIElementRoundRectangleDictionary[uiName]:\n')
    f.write('                Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                if Control == element:\n')
    f.write('                    RRInfo = G_UIElementRoundRectangleDictionary[uiName][elementName]\n')
    f.write('                    ShowRoundedRectangle(Control,RRInfo[0],RRInfo[1])\n')
    f.write('        Form_1 = GetElement(uiName,"Form_1")\n')
    f.write('        if Form_1 == element:\n')
    #这会导致不正常的显示所有的界面
    #f.write('        UpdateAllElementPlace(uiName)\n')
    f.write('            return\n')
    f.write('        for uiName in G_UIElementPlaceDictionary.keys():\n')
    f.write('            for elementName in G_UIElementPlaceDictionary[uiName]:\n')
    f.write('                if elementName in G_UIElementDictionary[uiName].keys():\n')
    f.write('                    Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                    if hasattr(Control,"GetEntry") == True:\n')
    f.write('                        Control = Control.GetEntry()\n')
    f.write('                    elif hasattr(Control,"GetWidget") == True:\n')
    f.write('                        Control = Control.GetWidget()\n')
    f.write('                    if Control == element:\n')
    f.write('                        UpdateElementPlace(uiName,elementName)\n')
    f.write('                    else:\n')
    f.write('                        try:\n')
    f.write('                            parentInfo = Control.winfo_parent()\n')
    f.write('                            parentWidget = Control._nametowidget(parentInfo)\n')
    f.write("                            UIRoot = GetElement(uiName,'root')\n")
    f.write("                            Form1 = GetElement(uiName,'Form_1')\n")
    f.write("                            if Form1:\n")
    f.write("                                while parentWidget is not None and parentWidget is not Form1 and parentWidget is not UIRoot:\n")
    f.write("                                    if parentWidget == element:\n")
    f.write("                                        UpdateElementPlace(uiName,elementName)\n")
    f.write("                                        break\n")
    f.write("                                    parentInfo = parentWidget.winfo_parent()\n")
    f.write("                                    parentWidget = Control._nametowidget(parentInfo)\n")
    f.write('                        except Exception as ex:\n')
    f.write('                            print(ex)\n')
    f.write('        if uiName in G_UIActiveDictionary.keys() and len(G_UIActiveDictionary[uiName]) == 1:\n')
    f.write("            if G_UIActiveDictionary[uiName]['onLoad'] is not None:\n")
    f.write("                G_UIActiveDictionary[uiName]['onLoad'](uiName)\n")
    f.write("                G_UIActiveDictionary[uiName].clear()\n")
    f.write("                ReDrawCanvasRecord(uiName)\n")
    f.write("                UpdateAllElementPlace(uiName)\n")
    f.write("def ActiveFrameChildsElement_InEditor(uiName,element):\n")
    f.write('    children = element.winfo_children()\n')
    f.write('    for child in children:\n')
    f.write('        uiName2,elementName = GetElementName(child)\n')
    f.write('        if uiName2 and elementName:\n')
    f.write('            realElementName = elementName\n')
    f.write('            if uiName2 in G_UIElementAliasDictionary.keys() and realElementName in G_UIElementAliasDictionary[uiName2].keys():\n')
    f.write('                realElementName = G_UIElementAliasDictionary[uiName2][realElementName]\n')
    f.write('            if realElementName:\n')
    f.write('                UpdateElementPlace(uiName2,realElementName)\n')
    f.write("def DestroyElement(uiName,elementName):\n")
    f.write('    """'+Language.G_Language[9329]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n')
    f.write('    if hasattr(Control,"GetEntry") == True:\n')
    f.write('        Control = Control.GetEntry()\n')
    f.write('    elif hasattr(Control,"GetWidget") == True:\n')
    f.write('        Control = Control.GetWidget()\n')
    f.write('    if Control:\n')
    f.write('        Control.destroy()\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            G_UIElementAliasDictionary[uiName].pop(elementName)\n')
    f.write('        elif elementName in G_UIElementDictionary[uiName].keys():\n')
    f.write('            G_UIElementDictionary[uiName].pop(elementName)\n')
#写入创建控件的函数
def WriteCreateElementFunction(f):
    f.write("def GenNewElementName(uiName,elementType):\n")
    f.write("    elementIndex = 1\n")
    f.write("    for elementName in G_UIElementDictionary[uiName]:\n")
    f.write("        if elementName.find('_') >= 0:\n")
    f.write("            splitArray = elementName.split('_')\n")
    f.write("            elementIndex = splitArray[-1]\n")
    f.write("    elementIndex = int(elementIndex) + 1\n")
    f.write("    elementName = elementType+'_'+str(elementIndex)\n")
    f.write("    return elementName\n")

    f.write("def CreateElementFromEXUIControl(uiName,ParentElement,elementType):\n")
    f.write("    try:\n")
    f.write("        uiClass = 'EXUIControl'\n")
    f.write("        import importlib\n")
    f.write("        from   importlib import import_module\n")
    f.write("        importModule = importlib.import_module(uiClass)\n")
    f.write("        importModule = importlib.reload(importModule)\n")
    f.write("        if hasattr(importModule,elementType) == True:\n")
    f.write("            importModule.G_ExeDir = G_ExeDir\n")
    f.write("            importModule.G_ResDir = G_ResDir\n")
    f.write("            ElementClass = getattr(importModule,elementType)\n")
    f.write("            newElement = ElementClass(ParentElement)\n")
    f.write("            return newElement\n")
    f.write("    except Exception as ex:\n")
    f.write("        MessageBox('请返回工程主界面保存，由系统生成复合控件代码。')\n")

    f.write("def CreateLabel(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9300]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write('            newLabel = tkinter.Label(ParentElement,text="Label")\n')
    f.write("            labelName = GenNewElementName(uiName,'Label')\n")
    f.write("            Register(uiName,labelName,newLabel,elementName)\n")
    f.write("            return newLabel\n")
    f.write('    return None\n')
    f.write("def CreateButton(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9301]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write('            newButton = tkinter.Button(ParentElement,text="Button")\n')
    f.write("            buttonName = GenNewElementName(uiName,'Button')\n")
    f.write("            Register(uiName,buttonName,newButton,elementName)\n")
    f.write("            return newButton\n")
    f.write('    return None\n')
    f.write("def CreateLabelButton(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9302]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write("            newElement = CreateElementFromEXUIControl(uiName,ParentElement,'LabelButton')\n")
    f.write('            if newElement:\n')
    f.write("                labelButtonName = GenNewElementName(uiName,'LabelButton')\n")
    f.write("                Register(uiName,labelButtonName,newElement,elementName)\n")
    f.write("                return newElement\n")
    f.write('    return None\n')
    f.write("def CreateEntry(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9303]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write("            newElement = CreateElementFromEXUIControl(uiName,ParentElement,'CustomEntry')\n")
    f.write('            if newElement:\n')
    f.write("                entryName = GenNewElementName(uiName,'Entry')\n")
    f.write("                Register(uiName,entryName,newElement,elementName)\n")
    f.write("                return newElement\n")
    f.write('    return None\n')
    f.write("def CreateText(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9304]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write('            newText = tkinter.Text(ParentElement)\n')
    f.write("            textName = GenNewElementName(uiName,'Text')\n")
    f.write("            Register(uiName,textName,newText,elementName)\n")
    f.write("            return newText\n")
    f.write('    return None\n')
    f.write("def CreateListBox(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9305]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write('            newListBox = tkinter.Listbox(ParentElement)\n')
    f.write("            listBoxName = GenNewElementName(uiName,'ListBox')\n")
    f.write("            Register(uiName,listBoxName,newListBox,elementName)\n")
    f.write("            return newListBox\n")
    f.write('    return None\n')
    f.write("def CreateComboBox(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9306]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write("            comboBoxName = GenNewElementName(uiName,'ComboBox')\n")
    f.write('            comboBoxVariable = AddTKVariable(uiName,comboBoxName)\n')
    f.write('            newComboBox = tkinter.ttk.Combobox(ParentElement,textvariable=comboBoxVariable, state="readonly")\n')
    f.write("            Register(uiName,comboBoxName,newComboBox,elementName)\n")
    f.write("            return newComboBox\n")
    f.write('    return None\n')
    f.write("def CreateRadioButtonGroup(uiName,parentName='Form_1',groupName='',defaultValue=1):\n")
    f.write('    """'+Language.G_Language[9310]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write('            groupVariable = AddTKVariable(uiName,groupName,defaultValue)\n')
    f.write('            AddUserData(uiName,parentName,groupName,"radiogroup",groupVariable,0)\n')
    f.write("            return groupVariable\n")
    f.write('    return None\n')
    f.write("def CreateRadioButton(uiName,parentName='Form_1',elementName='',groupName='',defaultValue=1,style='indicatoron'):\n")
    f.write('    """'+Language.G_Language[9307]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write("            radioButtonName = GenNewElementName(uiName,'RadioButton')\n")
    f.write('            groupVariable = GetUserData(uiName,parentName,groupName)\n')
    f.write('            newRadioButton = tkinter.Radiobutton(ParentElement,variable=groupVariable,value=defaultValue,text="RadioButton",anchor=tkinter.W)\n')
    f.write("            Register(uiName,radioButtonName,newRadioButton,elementName,groupName)\n")
    f.write("            if style == 'normal':\n")
    f.write("                newRadioButton.configure(indicatoron = False)\n")
    f.write("            elif style == 'selfdrawing':\n")
    f.write("                SetRadioButtonPyMeStyle(uiName,radioButtonName,groupVariable.get(),defaultValue,'#000000','#000000')\n")
    f.write("            return newRadioButton\n")
    f.write('    return None\n')
    f.write("def CreateCheckButton(uiName,parentName='Form_1',elementName='',defaultValue=False,style='indicatoron'):\n")
    f.write('    """'+Language.G_Language[9308]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write("            checkButtonName = GenNewElementName(uiName,'CheckButton')\n")
    f.write('            checkButtonVariable = AddTKVariable(uiName,checkButtonName)\n')
    f.write('            checkButtonVariable.set(defaultValue)\n')
    f.write('            newCheckButton = tkinter.Checkbutton(ParentElement,variable=checkButtonVariable,text="CheckButton",anchor=tkinter.W)\n')
    f.write("            Register(uiName,checkButtonName,newCheckButton,elementName)\n")
    f.write("            if style == 'normal':\n")
    f.write("                newCheckButton.configure(indicatoron = False)\n")
    f.write("            elif style == 'selfdrawing':\n")
    f.write("                SetCheckButtonPyMeStyle(uiName,checkButtonName,defaultValue,'#000000','#000000')\n")
    f.write("            return newCheckButton\n")
    f.write('    return None\n')
    f.write("def CreateSwitchButton(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9309]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write("            newElement = CreateElementFromEXUIControl(uiName,ParentElement,'SwitchButton')\n")
    f.write('            if newElement:\n')
    f.write("                switchButtonName = GenNewElementName(uiName,'SwitchButton')\n")
    f.write("                Register(uiName,switchButtonName,newElement,elementName)\n")
    f.write("                return newElement\n")
    f.write('    return None\n')
    f.write("def CreateLabelFrame(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9311]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write('            newLabelFrame = tkinter.LabelFrame(ParentElement)\n')
    f.write("            labelFrameName = GenNewElementName(uiName,'LabelFrame')\n")
    f.write("            Register(uiName,labelFrameName,newLabelFrame,elementName)\n")
    f.write("            return newLabelFrame\n")
    f.write('    return None\n')
    f.write("def CreateFrame(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9312]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write('            newFrame = tkinter.Frame(ParentElement)\n')
    f.write("            frameName = GenNewElementName(uiName,'Frame')\n")
    f.write("            Register(uiName,frameName,newFrame,elementName)\n")
    f.write("            return newFrame\n")
    f.write('    return None\n')
    f.write("def CreateCanvas(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9320]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write('            newCanvas = tkinter.Canvas(ParentElement)\n')
    f.write("            canvasName = GenNewElementName(uiName,'Canvas')\n")
    f.write("            Register(uiName,canvasName,newCanvas,elementName)\n")
    f.write("            return newCanvas\n")
    f.write('    return None\n')
    f.write("def CreateScale(uiName,parentName='Form_1',elementName='',orient = tkinter.HORIZONTAL):\n")
    f.write('    """'+Language.G_Language[9313]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write('            newScale = tkinter.Scale(ParentElement,orient = tkinter.HORIZONTAL)\n')
    f.write("            scaleName = GenNewElementName(uiName,'Scale')\n")
    f.write("            Register(uiName,scaleName,newScale,elementName)\n")
    f.write("            return newScale\n")
    f.write('    return None\n')
    f.write("def CreateSlider(uiName,parentName='Form_1',elementName='',orient = tkinter.HORIZONTAL):\n")
    f.write('    """'+Language.G_Language[9314]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write("            newElement = CreateElementFromEXUIControl(uiName,ParentElement,'Slider')\n")
    f.write('            if newElement:\n')
    f.write("                sliderName = GenNewElementName(uiName,'Slider')\n")
    f.write("                Register(uiName,sliderName,newElement,elementName)\n")
    f.write("                return newElement\n")
    f.write('    return None\n')
    f.write("def CreateProgress(uiName,parentName='Form_1',elementName='',orient = tkinter.HORIZONTAL):\n")
    f.write('    """'+Language.G_Language[9315]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write('            newProgress = tkinter.ttk.Progressbar(ParentElement,orient = orient)\n')
    f.write("            progressName = GenNewElementName(uiName,'Progress')\n")
    f.write("            Register(uiName,progressName,newProgress,elementName)\n")
    f.write("            return newProgress\n")
    f.write('    return None\n')
    f.write("def CreateProgressDial(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9316]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write("            newElement = CreateElementFromEXUIControl(uiName,ParentElement,'ProgressDial')\n")
    f.write('            if newElement:\n')
    f.write("                progressDialName = GenNewElementName(uiName,'ProgressDial')\n")
    f.write("                Register(uiName,progressDialName,newElement,elementName)\n")
    f.write("                return newElement\n")
    f.write('    return None\n')
    f.write("def CreateSpinBox(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9317]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write('            newSpinBox = tkinter.Spinbox(ParentElement)\n')
    f.write("            spinBoxName = GenNewElementName(uiName,'SpinBox')\n")
    f.write("            Register(uiName,spinBoxName,newSpinBox,elementName)\n")
    f.write("            return newSpinBox\n")
    f.write('    return None\n')
    f.write("def CreateTreeView(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9318]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write('            newTreeView = tkinter.ttk.Treeview(ParentElement,show="tree")\n')
    f.write("            treeViewName = GenNewElementName(uiName,'TreeView')\n")
    f.write("            Register(uiName,treeViewName,newTreeView,elementName)\n")
    f.write("            return newTreeView\n")
    f.write('    return None\n')
    f.write("def CreateListView(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9319]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write('            newListView = tkinter.ttk.Treeview(ParentElement,show="headings")\n')
    f.write("            listViewName = GenNewElementName(uiName,'ListView')\n")
    f.write("            Register(uiName,listViewName,newListView,elementName)\n")
    f.write("            return newListView\n")
    f.write('    return None\n')
    f.write("def CreateNoteBook(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9321]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write('            newNoteBook = tkinter.ttk.Notebook(ParentElement)\n')
    f.write("            noteBookName = GenNewElementName(uiName,'NoteBook')\n")
    f.write("            Register(uiName,noteBookName,newNoteBook,elementName)\n")
    f.write("            return newNoteBook\n")
    f.write('    return None\n')
    f.write("def CreatePanedWindow(uiName,parentName='Form_1',elementName='',orient = tkinter.HORIZONTAL):\n")
    f.write('    """'+Language.G_Language[9322]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write('            newPanedWindow = tkinter.PanedWindow(ParentElement)\n')
    f.write("            panedWindowName = GenNewElementName(uiName,'PanedWindow')\n")
    f.write("            Register(uiName,panedWindowName,newPanedWindow,elementName)\n")
    f.write("            newPanedWindow.configure(showhandle = '0')\n")
    f.write("            newPanedWindow.configure(sashrelief = 'flat')\n")
    f.write("            newPanedWindow.configure(sashwidth = '4')\n")
    f.write("            newPanedWindow.configure(orient = orient)\n")
    f.write("            return newPanedWindow\n")
    f.write('    return None\n')
    f.write("def CreateCalendar(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9323]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write("            newElement = CreateElementFromEXUIControl(uiName,ParentElement,'Calendar')\n")
    f.write('            if newElement:\n')
    f.write("                calendarName = GenNewElementName(uiName,'Calendar')\n")
    f.write("                Register(uiName,calendarName,newElement,elementName)\n")
    f.write("                return newElement\n")
    f.write('    return None\n')
    f.write("def CreateDatePicker(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9324]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write("            newElement = CreateElementFromEXUIControl(uiName,ParentElement,'DatePicker')\n")
    f.write('            if newElement:\n')
    f.write("                datepickerName = GenNewElementName(uiName,'DatePicker')\n")
    f.write("                Register(uiName,datepickerName,newElement,elementName)\n")
    f.write("                return newElement\n")
    f.write('    return None\n')

    f.write("def CreateNavigation(uiName,parentName='Form_1',elementName='',direction = tkinter.HORIZONTAL):\n")
    f.write('    """'+Language.G_Language[9325]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write("            newElement = CreateElementFromEXUIControl(uiName,ParentElement,'Navigation')\n")
    f.write('            if newElement:\n')
    f.write("                navigationName = GenNewElementName(uiName,'Navigation')\n")
    f.write("                Register(uiName,navigationName,newElement,elementName)\n")
    f.write("                return newElement\n")
    f.write('    return None\n')

    f.write("def CreateListMenu(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9326]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write("            newElement = CreateElementFromEXUIControl(uiName,ParentElement,'ListMenu')\n")
    f.write('            if newElement:\n')
    f.write("                listmenuName = GenNewElementName(uiName,'ListMenu')\n")
    f.write("                Register(uiName,listmenuName,newElement,elementName)\n")
    f.write("                return newElement\n")
    f.write('    return None\n')

    f.write("def CreateSwitchPage(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9327]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write("            newElement = CreateElementFromEXUIControl(uiName,ParentElement,'SwitchPage')\n")
    f.write('            if newElement:\n')
    f.write("                listmenuName = GenNewElementName(uiName,'SwitchPage')\n")
    f.write("                Register(uiName,listmenuName,newElement,elementName)\n")
    f.write("                return newElement\n")
    f.write('    return None\n')

    f.write("def CreateShowCase(uiName,parentName='Form_1',elementName=''):\n")
    f.write('    """'+Language.G_Language[9328]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            return None\n')
    f.write('        ParentElement = GetElement(uiName,parentName)\n')
    f.write('        if ParentElement:\n')
    f.write("            newElement = CreateElementFromEXUIControl(uiName,ParentElement,'ShowCase')\n")
    f.write('            if newElement:\n')
    f.write("                listmenuName = GenNewElementName(uiName,'ShowCase')\n")
    f.write("                Register(uiName,listmenuName,newElement,elementName)\n")
    f.write("                return newElement\n")
    f.write('    return None\n')

    f.write("def SetBindEventFunction(uiName,elementName,eventName,callbackFunction=None):\n")
    f.write('    """'+Language.G_Language[9203]+'"""\n')
    f.write('    Control = GetElement(uiName,elementName)\n')
    f.write('    if hasattr(Control,"GetEntry") == True:\n')
    f.write('        Control = Control.GetEntry()\n')
    f.write('    elif hasattr(Control,"GetWidget") == True:\n')
    f.write('        Control = Control.GetWidget()\n')
    f.write('    if Control and callbackFunction:\n')
    f.write('        RealElementName = elementName\n')
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and RealElementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            RealElementName = G_UIElementAliasDictionary[uiName][RealElementName]\n') 
    f.write("        if eventName == 'Command':\n")
    f.write('            if RealElementName.find(\'Scale_\') >= 0:\n') 
    f.write("                Control.configure(command=SetValueChangedFunction(callbackFunction,uiName = uiName,widgetName = elementName))\n")
    f.write('            else:\n') 
    f.write("                Control.configure(command=lambda:CommandFunction_Adaptor(callbackFunction,uiName,elementName))\n")
    # f.write("        elif :\n")
    # f.write("            bindEventName = str('<<'+eventName+'>>')\n")
    # f.write("            Control.bind(bindEventName,EventFunction_Adaptor(callbackFunction,uiName = uiName,widgetName = elementName,callbackFunc=callbackFunction),add=True)\n")
    f.write("        elif eventName == 'TreeviewSelect' or eventName == 'TreeviewOpen' or eventName == 'TreeviewClose' or eventName == 'ListboxSelect' or eventName == 'ComboboxSelected' or eventName == 'NotebookTabChanged':\n")
    f.write("            bindEventName = str('<<'+eventName+'>>')\n")
    f.write("            Control.bind(bindEventName,EventFunction_Adaptor(callbackFunction,uiName = uiName,widgetName = elementName),add=True)\n")
    f.write("        elif eventName == 'ListviewCellSelected':\n")
    f.write("            Control.bind('<Button-1>',EventFunction_Adaptor(OnListViewCellClicked,uiName = uiName,widgetName = elementName,callbackFunc=callbackFunction),add=True)\n")
    f.write("        elif eventName == 'ListViewHeadingClicked':\n")
    f.write("            Columns = Control.cget('column')\n")
    f.write("            for columnName in Columns:\n")
    f.write("                Control.heading(columnName,command=partial(callbackFunction,uiName = uiName,widgetName = elementName,columnname=columnName))\n")
    f.write("        else:\n")
    f.write("            bindEventName = str('<'+eventName+'>')\n")
    f.write("            Control.bind(bindEventName,EventFunction_Adaptor(callbackFunction,uiName = uiName,widgetName = elementName))\n")
#写入取得界面类型的函数
def WriteGetElementTypeFunction(f):
    #f.write(Language.G_Language[1245]+'\n')
    f.write('def GetElementType(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1245]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    
    f.write('    if uiName in G_UIElementAliasDictionary:\n')
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            splitArray = elementName.split('_')\n")
    f.write('            elementType = splitArray[0]\n')
    f.write('            if elementType == "PyMe":\n')
    f.write('                elementType = splitArray[1]\n')
    f.write('            return elementType\n')
    f.write('    return None\n')
#写入取得界面矩形信息的函数
def WriteGetElementRectFunction(f):
    f.write('def GetElementXYWH(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1318]+'"""\n')
    f.write('    element = GetElement(uiName,elementName)\n')
    f.write('    if element:\n')
    f.write('        x = element.winfo_x()\n')
    f.write('        y = element.winfo_y()\n')
    f.write('        width = element.winfo_width()\n')
    f.write('        height = element.winfo_height()\n')
    f.write('        return (x,y,width,height)\n')
    f.write('    return None\n')
    f.write('def SetElementXY(uiName,elementName,x,y):\n')
    f.write('    """'+Language.G_Language[9508]+'"""\n')
    f.write('    element = GetElement(uiName,elementName)\n')
    f.write('    if element:\n')
    f.write('        element.place(x=x,y=y)\n')
    f.write('def SetElementWH(uiName,elementName,width,height):\n')
    f.write('    """'+Language.G_Language[9509]+'"""\n')
    f.write('    element = GetElement(uiName,elementName)\n')
    f.write('    if element:\n')
    f.write('        element.place(width=width,height=height)\n')
    f.write('def SetElementXYWH(uiName,elementName,x,y,width,height):\n')
    f.write('    """'+Language.G_Language[9507]+'"""\n')
    f.write('    element = GetElement(uiName,elementName)\n')
    f.write('    if element:\n')
    f.write('        element.place(x=x,y=y,width=width,height=height)\n')
    
#写入增加控件内置变量的函数
def WriteAddTKVariableFunction(f):
    #f.write(Language.G_Language[1203]+'\n')
    f.write('def AddTKVariable(uiName,elementName,defaultValue = None):\n')
    f.write('    """'+Language.G_Language[1203]+'"""\n')
    f.write('    global G_UIElementVariableArray\n')
    
    f.write('    if uiName not in G_UIElementVariableArray:\n') 
    f.write('        G_UIElementVariableArray[uiName]={}\n') 
    f.write('    NameLower = elementName.lower()\n') 
    f.write('    if NameLower.find(\'combobox_\') >= 0:\n') 
    f.write('        G_UIElementVariableArray[uiName][elementName]=tkinter.StringVar()\n') 
    f.write('    elif NameLower.find(\'group_\') >= 0:\n') 
    f.write('        G_UIElementVariableArray[uiName][elementName]=tkinter.IntVar()\n') 
    f.write('    elif NameLower.find(\'checkbutton_\') >= 0:\n') 
    f.write('        G_UIElementVariableArray[uiName][elementName]=tkinter.BooleanVar()\n') 
    f.write('    else:\n') 
    f.write('        G_UIElementVariableArray[uiName][elementName]=tkinter.StringVar()\n') 
    f.write('    if defaultValue:\n') 
    f.write('        G_UIElementVariableArray[uiName][elementName].set(defaultValue) \n') 
    f.write('    return G_UIElementVariableArray[uiName][elementName]\n') 


#写入WEB端的
def WriteWebUIClass_HTML(f):
    f.write('class PyMeWeb_ComboBox(dict):\n')
    f.write('    def __init__(self,uiName,elementName):\n')
    f.write('        self.values = []\n')
    f.write('        self.Current = 0\n') 
    f.write('        self.uiName = uiName\n') 
    f.write('        self.elementName = elementName\n') 
    f.write('    def current(self,index):\n')
    f.write('        self.Current = index\n')
    f.write('class PyMeWeb_ListBox(dict):\n')
    f.write('    def __init__(self,uiName,elementName):\n')
    f.write('        self.values = []\n')
    f.write('        self.Current = 0\n') 
    f.write('        self.uiName = uiName\n') 
    f.write('        self.elementName = elementName\n') 
    f.write("    def delete(self,startIndex,endIndex='end'):\n")
    f.write("        if endIndex == 'end':\n")
    f.write("            endIndex = len(self.values)\n")
    f.write("        for i in range(startIndex,endIndex):\n")
    f.write("            self.values.pop(startIndex)\n")
    f.write("        G_UIElementVariableArray[self.uiName][self.elementName] = self.values\n")
    f.write("    def insert(self,index,value):\n")
    f.write("        if index == 'end':\n")
    f.write("            index = len(self.values)\n")
    f.write("        if len(self.values) <= index:\n")
    f.write("            self.values.append(value)\n")
    f.write("        else:\n")
    f.write("            self.values.insert(index,value)\n")
    f.write("        G_UIElementVariableArray[self.uiName][self.elementName] = self.values\n")
    f.write('    def current(self,index):\n')
    f.write('        self.Current = index\n')

#写入增加控件内置变量的函数
def WriteAddTKVariableFunction_HTML(f):
    #f.write(Language.G_Language[1203]+'\n')
    f.write('def AddTKVariable(uiName,elementName,defaultValue = None):\n')
    f.write('    """'+Language.G_Language[1203]+'"""\n')
    f.write('    global G_UIElementVariableArray\n')
    
    f.write('    if uiName not in G_UIElementVariableArray:\n') 
    f.write('        G_UIElementVariableArray[uiName]={}\n') 
    f.write('    G_UIElementVariableArray[uiName][elementName] = defaultValue \n') 
    f.write('    return G_UIElementVariableArray[uiName][elementName]\n') 
#写入设置控件内置变量的函数
def WriteSetTKVariableFunction(f):
    #f.write(Language.G_Language[1204]+'\n')
    f.write('def SetTKVariable(uiName,elementName,value):\n')
    f.write('    """'+Language.G_Language[1204]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    
    f.write('    if uiName in G_UIElementVariableArray:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n')  
    f.write('        if elementName in G_UIElementVariableArray[uiName]:\n') 
    f.write('            G_UIElementVariableArray[uiName][elementName].set(value)\n') 
    f.write('        if elementName in G_UIGroupDictionary[uiName]:\n') 
    f.write('            GroupName = G_UIGroupDictionary[uiName][elementName]\n')
    f.write('            if GroupName in G_UIElementVariableArray[uiName]:\n') 
    f.write('                G_UIElementVariableArray[uiName][GroupName].set(value)\n') 
#写入设置控件内置变量的函数
def WriteSetTKVariableFunction_HTML(f):
    #f.write(Language.G_Language[1204]+'\n')
    f.write('def SetTKVariable(uiName,elementName,value):\n')
    f.write('    """'+Language.G_Language[1204]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    
    f.write('    if uiName in G_UIElementVariableArray:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n')  
    f.write('        if elementName in G_UIElementVariableArray[uiName]:\n') 
    f.write('            G_UIElementVariableArray[uiName][elementName] = value \n') 
#写入获取控件内置变量的函数
def WriteGetTKVariableFunction(f):
    #f.write(Language.G_Language[1205]+'\n')
    f.write('def GetTKVariable(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1205]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    
    f.write('    if uiName in G_UIElementVariableArray:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName in G_UIElementVariableArray[uiName]:\n') 
    f.write('            return G_UIElementVariableArray[uiName][elementName].get()\n')  
    f.write('        if elementName in G_UIGroupDictionary[uiName]:\n') 
    f.write('            GroupName = G_UIGroupDictionary[uiName][elementName]\n')
    f.write('            if GroupName in G_UIElementVariableArray[uiName]:\n') 
    f.write('                return G_UIElementVariableArray[uiName][GroupName].get()\n')  
    f.write('    return None\n')
#写入获取控件内置变量的函数
def WriteGetTKVariableFunction_HTML(f):
    #f.write(Language.G_Language[1205]+'\n')
    f.write('def GetTKVariable(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1205]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    
    f.write('    if uiName in G_UIElementVariableArray:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName in G_UIElementVariableArray[uiName]:\n') 
    f.write('            return G_UIElementVariableArray[uiName][elementName]\n')  
    f.write('    return None\n')
#写入输出到界面的函数
def WriteAddUserDataFunction(f):  
    #f.write(Language.G_Language[1206]+'\n')
    f.write('def AddUserData(uiName,elementName,dataName,datatype,datavalue,isMapToText = 0):\n')
    f.write('    """'+Language.G_Language[1206]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementUserDataArray\n')
    f.write('    if uiName not in G_UIElementUserDataArray:\n')
    f.write('        G_UIElementUserDataArray[uiName]={} \n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if elementName not in G_UIElementUserDataArray[uiName]:\n')
    f.write('        G_UIElementUserDataArray[uiName][elementName]=[]\n')
    f.write('    else:\n')
    f.write('        for EBData in G_UIElementUserDataArray[uiName][elementName]:\n')
    f.write('            if EBData[0] == dataName:\n')
    f.write('                EBData[1] = datatype\n')
    f.write('                EBData[2] = datavalue\n')
    f.write('                EBData[3] = isMapToText\n')
    f.write('                if EBData[3] == 1:\n')
    f.write('                    SetText(uiName,elementName,datavalue,False) \n')    
    f.write('                return\n')
    f.write('    G_UIElementUserDataArray[uiName][elementName].append([dataName,datatype,datavalue,isMapToText])\n')
    f.write('def DelUserData(uiName,elementName,dataName):\n')
    f.write('    """'+Language.G_Language[3110]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementUserDataArray\n')   
    f.write('    if uiName in G_UIElementUserDataArray:\n')   
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName in G_UIElementUserDataArray[uiName]:\n')
    f.write('            dataIndex = 0\n')
    f.write('            for EBData in G_UIElementUserDataArray[uiName][elementName]:\n')
    f.write('                if EBData[0] == dataName:\n')
    f.write('                    G_UIElementUserDataArray[uiName][elementName].pop(dataIndex)\n')
    f.write('                    return \n')
    f.write('                dataIndex = dataIndex + 1\n')
#写入输出到界面的函数
def WriteAddUserDataFunction_HTML(f):  
    #f.write(Language.G_Language[1206]+'\n')
    f.write('def AddUserData(uiName,elementName,dataName,datatype,datavalue,isMapToText = 0):\n')
    f.write('    """'+Language.G_Language[1206]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementUserDataArray\n')
    f.write('    if uiName not in G_UIElementUserDataArray:\n')
    f.write('        G_UIElementUserDataArray[uiName]={} \n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if elementName not in G_UIElementUserDataArray[uiName]:\n')
    f.write('        G_UIElementUserDataArray[uiName][elementName]=[]\n')
    f.write('    else:\n')
    f.write('        for EBData in G_UIElementUserDataArray[uiName][elementName]:\n')
    f.write('            if EBData[0] == dataName:\n')
    f.write('                return\n')
    f.write('    G_UIElementUserDataArray[uiName][elementName].append([dataName,datatype,datavalue,isMapToText])\n')
    f.write('def DelUserData(uiName,elementName,dataName):\n')
    f.write('    """'+Language.G_Language[3110]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementUserDataArray\n')   
    f.write('    if uiName in G_UIElementUserDataArray:\n')   
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName in G_UIElementUserDataArray[uiName]:\n')
    f.write('            dataIndex = 0\n')
    f.write('            for EBData in G_UIElementUserDataArray[uiName][elementName]:\n')
    f.write('                if EBData[0] == dataName:\n')
    f.write('                    G_UIElementUserDataArray[uiName][elementName].pop(dataIndex)\n')
    f.write('                    return \n')
    f.write('                dataIndex = dataIndex + 1\n')
#写入输出到界面的函数
def WriteSetUserDataFunction(f):
    #f.write(Language.G_Language[1207]+'\n')
    f.write('def SetUserData(uiName,elementName,dataName,datavalue):\n')
    f.write('    """'+Language.G_Language[1207]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementUserDataArray\n')   
    f.write('    if uiName in G_UIElementUserDataArray:\n')   
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName in G_UIElementUserDataArray[uiName]:\n')
    f.write('            for EBData in G_UIElementUserDataArray[uiName][elementName]:\n')
    f.write('                if EBData[0] == dataName:\n')
    f.write('                    EBData[2] = datavalue\n')
    f.write('                    if EBData[3] == 1:\n')
    f.write('                        SetText(uiName,elementName,datavalue,False) \n')    
    f.write('                    return\n')
#写入输出到界面的函数
def WriteGetUserDataFunction(f):
    #f.write(Language.G_Language[1208]+'\n')
    f.write('def GetUserData(uiName,elementName,dataName):\n')
    f.write('    """'+Language.G_Language[1208]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementUserDataArray\n')
    
    f.write('    if  uiName in G_UIElementUserDataArray:\n')
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName in G_UIElementUserDataArray[uiName]:\n')
    f.write('            for EBData in G_UIElementUserDataArray[uiName][elementName]:\n')
    f.write('                if EBData[0] == dataName:\n')
    f.write('                    if EBData[1]==\'int\':\n')
    f.write('                        return int(EBData[2])\n')
    f.write('                    elif EBData[1]==\'float\':\n')
    f.write('                        return float(EBData[2])\n')
    f.write('                    else:\n')
    f.write('                        return EBData[2]\n')
    f.write('    return None\n')
#写入输出到界面的函数
def WriteSetTKAttribFunction(f):
    #f.write(Language.G_Language[1209]+'\n')
    f.write('def SetTKAttrib(uiName,elementName,AttribName,attribValue):\n')
    f.write('    """'+Language.G_Language[1209]+'"""\n')
    f.write('    Control = GetElement(uiName,elementName)\n')
    f.write('    if hasattr(Control,"GetEntry") == True:\n')
    f.write('        Control = Control.GetEntry()\n')
    f.write('    elif hasattr(Control,"GetWidget") == True:\n')
    f.write('        Control = Control.GetWidget()\n')
    f.write('    if Control:\n')
    f.write('        if AttribName in Control.configure().keys():\n')
    f.write('            Control[AttribName]=attribValue\n')
    
#写入输出到界面的函数
def WriteGetTKAttribFunction(f):
    #f.write(Language.G_Language[1210]+'\n')
    f.write('def GetTKAttrib(uiName,elementName,AttribName):\n')
    f.write('    """'+Language.G_Language[1210]+'"""\n')
    f.write('    Control = GetElement(uiName,elementName)\n')
    f.write('    if hasattr(Control,"GetEntry") == True:\n')
    f.write('        Control = Control.GetEntry()\n')
    f.write('    elif hasattr(Control,"GetWidget") == True:\n')
    f.write('        Control = Control.GetWidget()\n')
    f.write('    if Control:\n')
    f.write('        return Control.cget(AttribName)\n')
    f.write('    return None\n')
#写入设置控件显示的函数
def WriteSetElementVisibleFunction(f):
    #f.write(Language.G_Language[1239]+'\n')
    f.write('def SetElementVisible(uiName,elementName,Visible):\n')
    f.write('    """'+Language.G_Language[1870]+'"""\n')
    f.write('    Control = GetElement(uiName,elementName)\n')
    f.write('    if Control is None:\n')
    f.write('        return \n')
    f.write('    if hasattr(Control,"GetWidget") == True:\n')
    f.write('        Control = Control.GetWidget()\n')
    f.write('    RealElementName = elementName\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and RealElementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        RealElementName = G_UIElementAliasDictionary[uiName][RealElementName]\n') 
    f.write('    G_UIElementPlaceDictionary[uiName][RealElementName]["visible"] = Visible\n')
    f.write('    if Visible == True :\n')
    f.write('        if G_UIElementPlaceDictionary[uiName][RealElementName]["type"] == "pack":\n')
    f.write('            fill = G_UIElementPlaceDictionary[uiName][RealElementName]["fill"]\n')
    f.write('            side = G_UIElementPlaceDictionary[uiName][RealElementName]["side"]\n')
    f.write('            padx = G_UIElementPlaceDictionary[uiName][RealElementName]["padx"]\n')
    f.write('            pady = G_UIElementPlaceDictionary[uiName][RealElementName]["pady"]\n')
    f.write('            expand = G_UIElementPlaceDictionary[uiName][RealElementName]["expand"]\n')
    f.write('            SetControlPack(uiName,elementName,fill,side,padx,pady,expand)\n')
    f.write('        elif G_UIElementPlaceDictionary[uiName][RealElementName]["type"] == "grid":\n')
    f.write('            row = G_UIElementPlaceDictionary[uiName][RealElementName]["row"]\n')
    f.write('            column = G_UIElementPlaceDictionary[uiName][RealElementName]["column"]\n')
    f.write('            rowspan = G_UIElementPlaceDictionary[uiName][RealElementName]["rowspan"]\n')
    f.write('            columnspan = G_UIElementPlaceDictionary[uiName][RealElementName]["columnspan"]\n')
    f.write('            SetControlGrid(uiName,elementName,row,column,rowspan,columnspan)\n')
    f.write('        elif G_UIElementPlaceDictionary[uiName][RealElementName]["type"] == "place":\n')
    f.write('            x = 0\n')
    f.write('            if "relx" in G_UIElementPlaceDictionary[uiName][RealElementName]:\n')
    f.write('                x = G_UIElementPlaceDictionary[uiName][RealElementName]["relx"]\n')
    f.write('            else:\n')
    f.write('                x = G_UIElementPlaceDictionary[uiName][RealElementName]["x"]\n')
    f.write('            y = 0\n')
    f.write('            if "rely" in G_UIElementPlaceDictionary[uiName][RealElementName]:\n')
    f.write('                y = G_UIElementPlaceDictionary[uiName][RealElementName]["rely"]\n')
    f.write('            else:\n')
    f.write('                y = G_UIElementPlaceDictionary[uiName][RealElementName]["y"]\n')
    f.write('            w = 0\n')
    f.write('            if "relwidth" in G_UIElementPlaceDictionary[uiName][RealElementName]:\n')
    f.write('                w = G_UIElementPlaceDictionary[uiName][RealElementName]["relwidth"]\n')
    f.write('            else:\n')
    f.write('                w = G_UIElementPlaceDictionary[uiName][RealElementName]["width"]\n')
    f.write('            h = 0\n')
    f.write('            if "relheight" in G_UIElementPlaceDictionary[uiName][RealElementName]:\n')
    f.write('                h = G_UIElementPlaceDictionary[uiName][RealElementName]["relheight"]\n')
    f.write('            else:\n')
    f.write('                h = G_UIElementPlaceDictionary[uiName][RealElementName]["height"]\n')
    f.write('            SetControlPlace(uiName,elementName,x,y,w,h)\n')
    f.write('    else:\n')
    f.write('        if G_UIElementPlaceDictionary[uiName][RealElementName]["type"] == "pack":\n')
    f.write('            Control.pack_forget()\n')
    f.write('        elif G_UIElementPlaceDictionary[uiName][RealElementName]["type"] == "grid":\n')
    f.write('            Control.grid_forget()\n')
    f.write('        elif G_UIElementPlaceDictionary[uiName][RealElementName]["type"] == "place":\n')
    f.write('            Control.place_forget()\n')
    f.write("        G_UIElementPlaceDictionary[uiName][RealElementName]['visible'] = False\n")
    f.write('def SetVisible(uiName,elementName,Visible):\n')
    f.write('    """'+Language.G_Language[1239]+'"""\n')
    f.write('    SetElementVisible(uiName,elementName,Visible)\n')
    f.write('def SetElementEnable(uiName,elementName,Enable):\n')
    f.write('    """'+Language.G_Language[1872]+'"""\n')
    f.write('    element = GetElement(uiName,elementName)\n')
    f.write('    if element:\n')
    f.write('        if elementName and uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write("        if elementName.find('Frame_') >= 0 or elementName.find('LabelFrame_') >= 0:\n")
    f.write('            def SetChildrenState(child,state):\n')
    f.write('                childlist = child.winfo_children()\n')
    f.write('                for child in childlist:\n')
    f.write('                    try:\n')
    f.write('                        child.configure(state=state)\n')
    f.write('                    except:\n')
    f.write('                        pass\n')
    f.write('                    SetChildrenState(child,state)\n')
    f.write('            if Enable == True:\n')
    f.write("                SetChildrenState(element,'normal')\n")
    f.write('            else:\n')
    f.write("                SetChildrenState(element,'disabled')\n")
    f.write("        if elementName.find(\'Entry_\') >= 0 or elementName.find(\'LabelButton_\') >= 0:\n")
    f.write('            if Enable == True:\n')
    f.write("                element.SetState('normal')\n")
    f.write('            else:\n')
    f.write("                element.SetState('disabled')\n")
    f.write("        else:\n")
    f.write('            if hasattr(element,"GetEntry") == True:\n')
    f.write('                element = element.GetEntry()\n')
    f.write('            elif hasattr(element,"GetWidget") == True:\n')
    f.write('                element = element.GetWidget()\n')
    f.write('            try:\n')
    f.write('                if Enable == True:\n')
    f.write("                    element.configure(state='normal')\n")
    f.write('                else:\n')
    f.write("                    element.configure(state='disabled')\n")
    f.write('            except:\n')
    f.write('                pass\n')
    f.write('def SetEnable(uiName,elementName,Enable):\n')
    f.write('    """'+Language.G_Language[2641]+'"""\n')
    f.write('    SetElementEnable(uiName,elementName,Enable)\n')
#写入设置控件显示的函数
def WriteIsElementVisibleFunction(f):
    #f.write(Language.G_Language[1240]+'\n')
    f.write('def IsElementVisible(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1871]+'"""\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write("    return G_UIElementPlaceDictionary[uiName][elementName]['visible']\n")
    f.write('def IsVisible(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1240]+'"""\n')
    f.write("    return IsElementVisible(uiName,elementName)\n")
    f.write('def IsElementEnable(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1873]+'"""\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write("    if elementName.find(\'Entry_\') >= 0 or elementName.find(\'LabelButton_\') >= 0:\n")
    f.write("        return G_UIElementDictionary[uiName][elementName].GetState()\n")
    f.write("    else:\n")
    f.write("        ElementState = G_UIElementDictionary[uiName][elementName].cget('state')\n")
    f.write("        ElementState = str(ElementState)\n")
    f.write("        if ElementState == 'disabled':\n")
    f.write("            return False\n")
    f.write('        else:\n')
    f.write("            return True\n")
    f.write('def IsEnable(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[2642]+'"""\n')
    f.write("    return IsElementEnable(uiName,elementName)\n")

#写入设置控件显示的函数
def WriteSetElementVisibleFunction_Mobile(f):
    #f.write(Language.G_Language[1239]+'\n')
    f.write('def SetElementVisible(uiName,elementName,Visible):\n')
    f.write('    """'+Language.G_Language[1870]+'"""\n')
    f.write('    element = GetElement(uiName,elementName)\n')
    f.write('    if element:\n')
    f.write("        element.SetVisible(Visible)\n")
    f.write('def SetVisible(uiName,elementName,Visible):\n')
    f.write('    """'+Language.G_Language[1239]+'"""\n')
    f.write('    SetElementVisible(uiName,elementName,Visible)\n')
    f.write('def SetElementEnable(uiName,elementName,Enable):\n')
    f.write('    """'+Language.G_Language[1872]+'"""\n')
    f.write('    element = GetElement(uiName,elementName)\n')
    f.write('    if element:\n')
    f.write("        element.SetEnable(Enable)\n")
    f.write('def SetEnable(uiName,elementName,Enable):\n')
    f.write('    """'+Language.G_Language[2641]+'"""\n')
    f.write('    SetElementEnable(uiName,elementName,Enable)\n')

#写入设置控件显示的函数
def WriteIsElementVisibleFunction_Mobile(f):
    #f.write(Language.G_Language[1240]+'\n')
    f.write('def IsElementVisible(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1871]+'"""\n')
    f.write('    element = GetElement(uiName,elementName)\n')
    f.write('    if element:\n')
    f.write("        return element.IsVisible()\n")
    f.write('def IsVisible(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1240]+'"""\n')
    f.write("    return IsElementVisible(uiName,elementName)\n")
    f.write('def IsElementEnable(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1873]+'"""\n')
    f.write('    element = GetElement(uiName,elementName)\n')
    f.write('    if element:\n')
    f.write("        return element.IsEnable()\n")
    f.write('def IsEnable(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[2642]+'"""\n')
    f.write("    return IsElementEnable(uiName,elementName)\n")

#写入更新到文字
def WriteSetTextFunction(f):
    #f.write(Language.G_Language[1211]+'\n')
    f.write('def SetText(uiName,elementName,textValue,aliasName=True):\n')
    f.write('    """'+Language.G_Language[1211]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    showtext = str(\"%s\"%textValue)\n')
    f.write('    if aliasName and uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementVariableArray:\n') 
    f.write('        if elementName in G_UIElementVariableArray[uiName]:\n')
    f.write('            G_UIElementVariableArray[uiName][elementName].set(showtext)\n')
    f.write('            return\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')   
    f.write('            try:\n')
    f.write('                if elementName == "root":\n')
    f.write('                    G_UIElementDictionary[uiName][elementName].title(textValue)\n')
    f.write('                elif elementName.find(\'Text_\') >= 0:\n')
    f.write('                    Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                    if hasattr(Control,"GetEntry") == True:\n')
    f.write('                        Control = Control.GetEntry()\n')
    f.write('                    Control.delete(\'0.0\',tkinter.END)\n')
    f.write('                    if len(showtext) > 0:\n')
    f.write('                        Control.insert(tkinter.END,showtext)\n')
    f.write('                        Control.see(tkinter.END)\n')
    f.write("                elif elementName.find(\'Entry_\') >= 0 or elementName.find(\'LabelButton_\') >= 0:\n")
    f.write('                    G_UIElementDictionary[uiName][elementName].SetText(showtext)\n') 
    f.write('                else:\n')
    f.write('                    G_UIElementDictionary[uiName][elementName].configure(text=showtext)\n')
    f.write('            except Exception as ex:\n')
    f.write('                print(ex)\n')
    f.write("def InsertText(uiName,elementName,position=tkinter.END,textValue='',tag=''):\n")
    f.write('    """'+Language.G_Language[1328]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    showtext = str(\"%s\"%textValue)\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')   
    f.write('            if elementName.find(\'Text_\') >= 0:\n')
    f.write('                if len(showtext) > 0:\n')
    f.write('                    Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                    if hasattr(Control,"GetEntry") == True:\n')
    f.write('                        Control = Control.GetEntry()\n')
    f.write('                    Control.mark_set(tkinter.INSERT,position)\n')
    f.write('                    Control.insert(position,showtext,tag)\n')
    f.write('                    currentLine = Control.index(tkinter.INSERT)\n')
    f.write('                    Control.see(currentLine)\n')
    f.write('                    return  currentLine\n')
    f.write('    return  None\n')
    f.write("def GetCurrentLine(uiName,elementName):\n")
    f.write('    """'+Language.G_Language[9072]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    element = GetElement(uiName,elementName)\n')
    f.write('    if element:\n')
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')   
    f.write('            if elementName.find(\'Text_\') >= 0:\n')
    f.write('                if hasattr(element,"GetEntry") == True:\n')
    f.write('                    element = element.GetEntry()\n')
    f.write('                return element.index(tkinter.INSERT)\n')
    f.write('    return  None\n')
    f.write("def DeleteContent(uiName,elementName,fromPosition='',toPosition=None):\n")
    f.write('    """'+Language.G_Language[9073]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    element = GetElement(uiName,elementName)\n')
    f.write('    if element:\n')
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')   
    f.write('            if elementName.find(\'Text_\') >= 0:\n')
    f.write('                if hasattr(element,"GetEntry") == True:\n')
    f.write('                    element = element.GetEntry()\n')
    f.write('                if toPosition:\n')
    f.write('                    element.delete(fromPosition,toPosition)\n')
    f.write('                else:\n')
    f.write('                    element.delete(fromPosition)\n')
#写入更新到文字
def WriteSetFontFunction(f):
    f.write('def CreateFont(fontName,fontSize,fontWeight=\'normal\',fontSlant=\'roman\',fontUnderline=0,fontOverstrike=0):\n')
    f.write('    """'+Language.G_Language[1493]+'"""\n')
    f.write('    return tkinter.font.Font(family=fontName, size=fontSize,weight=fontWeight,slant=fontSlant,underline=fontUnderline,overstrike=fontOverstrike)\n')
    #f.write(Language.G_Language[1211]+'\n')
    f.write('def SetFont(uiName,elementName,fontName,fontSize,fontWeight=\'normal\',fontSlant=\'roman\',fontUnderline=0,fontOverstrike=0):\n')
    f.write('    """'+Language.G_Language[1341]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_CanvasFontDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')   
    f.write('            newFont = None\n')
    f.write('            if elementName in G_CanvasFontDictionary[uiName]:\n')   
    f.write('                for fontInfo in G_CanvasFontDictionary[uiName][elementName]:\n')
    f.write('                    if fontInfo[1] == fontName and fontInfo[2] == str(fontSize) and fontInfo[3] == fontWeight and fontInfo[4] == fontSlant and fontInfo[5] == str(fontUnderline) and fontInfo[6] == str(fontOverstrike):\n')
    f.write('                        newFont = fontInfo[0]\n')                
    f.write('                        break\n')
    f.write('            else:\n')
    f.write('                G_CanvasFontDictionary[uiName][elementName] = []\n')
    f.write('            if newFont is None:\n')
    f.write('                newFont = tkinter.font.Font(family=fontName, size=fontSize,weight=fontWeight,slant=fontSlant,underline=fontUnderline,overstrike=fontOverstrike)\n')
    f.write("            if elementName.find('Entry_') >= 0 or elementName.find('LabelButton_') >= 0:\n")
    f.write('                G_UIElementDictionary[uiName][elementName].SetFont(font=newFont)\n')
    f.write("            elif elementName.find('Canvas_') < 0 and elementName.find('Form_') < 0:\n")
    f.write('                G_UIElementDictionary[uiName][elementName].configure(font=newFont)\n')
    f.write('            G_CanvasFontDictionary[uiName][elementName].append([newFont,fontName,str(fontSize),fontWeight,fontSlant,str(fontUnderline),str(fontOverstrike)])\n')                
    f.write('def GetFont(uiName,elementName,fontName,fontSize,fontWeight=\'normal\',fontSlant=\'roman\',fontUnderline=0,fontOverstrike=0,createifnofind=False):\n')
    f.write('    """'+Language.G_Language[1571]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_CanvasFontDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')   
    f.write('            if elementName in G_CanvasFontDictionary[uiName]:\n')   
    f.write('                for fontInfo in G_CanvasFontDictionary[uiName][elementName]:\n')
    f.write('                    if fontInfo[1] == fontName and fontInfo[2] == str(fontSize) and fontInfo[3] == fontWeight and fontInfo[4] == fontSlant and fontInfo[5] == str(fontUnderline) and fontInfo[6] == str(fontOverstrike):\n')
    f.write('                        return fontInfo[0]\n')
    f.write('            else:\n')
    f.write('                G_CanvasFontDictionary[uiName][elementName] = []\n')
    f.write('            if createifnofind == True:\n')
    f.write('                newFont = tkinter.font.Font(family=fontName, size=fontSize,weight=fontWeight,slant=fontSlant,underline=fontUnderline,overstrike=fontOverstrike)\n')
    f.write('                G_CanvasFontDictionary[uiName][elementName].append([newFont,fontName,str(fontSize),fontWeight,fontSlant,str(fontUnderline),str(fontOverstrike)])\n')                
    f.write('                return newFont\n')
    f.write('    return None\n')
#写入更新到文字
def WriteSetFontFunction_App(f):
    #f.write(Language.G_Language[1211]+'\n')
    f.write('def SetFont(uiName,elementName,fontName,fontSize,fontWeight=\'normal\',fontSlant=\'roman\',fontUnderline=0,fontOverstrike=0):\n')
    f.write('    """'+Language.G_Language[1341]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')   
    f.write('            bold = False\n')
    f.write("            if fontWeight == 'bold':\n")
    f.write('                bold = True\n')
    f.write('            italic = False\n')
    f.write("            if fontSlant == 'italic':\n")
    f.write('                italic = True\n')
    f.write('            underline = False\n')
    f.write("            if fontUnderline == 1:\n")
    f.write('                underline = True\n')
    f.write('            G_UIElementDictionary[uiName][elementName].SetFont(fontName,fontSize,bold,italic,underline)\n')
#写入更新到文字
def WriteSetTextFunction_HTML(f):
    #f.write(Language.G_Language[1211]+'\n')
    f.write('def SetText(uiName,elementName,textValue,aliasName=True):\n')
    f.write('    """'+Language.G_Language[1211]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    showtext = str(\"%s\"%textValue)\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementVariableArray:\n') 
    f.write('        G_UIElementVariableArray[uiName][elementName] = showtext\n')
    
#写入更新到文字
def WriteSetTextFunction_APP(f):
    #f.write(Language.G_Language[1211]+'\n')
    f.write('def SetText(uiName,elementName,textValue,aliasName=True):\n')
    f.write('    """'+Language.G_Language[1211]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    showtext = str(\"%s\"%textValue)\n')
    f.write('    if aliasName and uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementDictionary:\n') 
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write('            G_UIElementDictionary[uiName][elementName].SetText(showtext)\n')
    f.write("def InsertText(uiName,elementName,position,textValue='',tag=''):\n")
    f.write('    """'+Language.G_Language[1328]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    showtext = str(\"%s\"%textValue)\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementDictionary:\n') 
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write('            G_UIElementDictionary[uiName][elementName].insert(position,textValue,tag)\n')
#写入更新到文字
def WriteGetTextFunction(f):
    #f.write(Language.G_Language[1212]+'\n')
    f.write('def GetText(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1212]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')   
    f.write('            if elementName.find(\'Text_\') >= 0:\n')
    f.write('                Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                if hasattr(Control,"GetEntry") == True:\n')
    f.write('                    Control = Control.GetEntry()\n')
    f.write('                return Control.get(\'0.0\', tkinter.END)\n')
    f.write('            elif elementName.find(\'Spinbox_\') >= 0:\n')
    f.write('                return str(G_UIElementDictionary[uiName][elementName].get())\n')
    f.write('            elif elementName.find(\'ComboBox_\') >= 0:\n')
    f.write('                return str(G_UIElementDictionary[uiName][elementName].get())\n')
    f.write('            elif elementName.find(\'ListBox_\') >= 0:\n')
    f.write('                currIndex = G_UIElementDictionary[uiName][elementName].curselection()\n')
    f.write('                if len(currIndex) > 0 and currIndex[0] >= 0:\n')
    f.write('                    return  G_UIElementDictionary[uiName][elementName].get(currIndex[0])\n')
    f.write('            elif elementName.find(\'Entry_\') >= 0:\n')
    f.write('                if elementName in  G_UIElementVariableArray[uiName]:\n')  
    f.write('                    text = G_UIElementVariableArray[uiName][elementName].get()\n')  
    f.write('                else:\n')  
    f.write('                    text = G_UIElementDictionary[uiName][elementName].GetText()\n') 
    f.write('                return text\n')
    f.write('            elif elementName.find(\'LabelButton_\') >= 0:\n')
    f.write('                text = G_UIElementDictionary[uiName][elementName].GetText()\n') 
    f.write('                return text\n')
    f.write('            else:\n')
    f.write('                if uiName in G_UIElementVariableArray:\n') 
    f.write('                    if elementName in G_UIElementVariableArray[uiName]:\n')
    f.write('                        text = G_UIElementVariableArray[uiName][elementName].get()\n')
    f.write('                        return text\n')
    f.write('                return G_UIElementDictionary[uiName][elementName].cget(\'text\')\n')
    f.write('    return str("")\n')


#写入设置背景颜色
def WriteSetBGColorFunction(f):
    #f.write(Language.G_Language[1211]+'\n')
    f.write('def SetBGColor(uiName,elementName,RGBColor):\n')
    f.write('    """'+Language.G_Language[1334]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')   
    f.write('            Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('            if hasattr(Control,"SetBGColor") == True:\n')
    f.write('                Control.SetBGColor(RGBColor)\n')
    f.write('            else:\n')
    f.write('                Control.configure(bg=RGBColor)\n')
    f.write('def SetRadioButtonSelectedColor(uiName,elementName,GroupID,BGColor,FGColor):\n')
    f.write('    """'+Language.G_Language[9971]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    global G_UIRadioButtonGroupArray\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')   
    f.write('            Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('            if GroupID not in G_UIRadioButtonGroupArray[uiName]:\n')
    f.write('                G_UIRadioButtonGroupArray[uiName][GroupID] = {}\n')
    f.write('            if elementName not in G_UIRadioButtonGroupArray[uiName][GroupID]:\n')  
    f.write("                G_UIRadioButtonGroupArray[uiName][GroupID][elementName]=[Control.cget('bg'),Control.cget('fg')]\n")
    f.write('            def OnRadioButtonSelected(event,uiName,elementName,BGColor,FGColor):\n')
    f.write('                for RadioButtonName in G_UIRadioButtonGroupArray[uiName][GroupID]:\n')
    f.write("                    OriBGColor = G_UIRadioButtonGroupArray[uiName][GroupID][RadioButtonName][0]\n")
    f.write("                    OriFGColor = G_UIRadioButtonGroupArray[uiName][GroupID][RadioButtonName][1]\n")
    f.write("                    if RadioButtonName != elementName:\n")
    f.write("                        SetBGColor(uiName,RadioButtonName,OriBGColor)\n")
    f.write("                        SetTextColor(uiName,RadioButtonName,OriFGColor)\n")
    f.write("                    else:\n")
    f.write("                        SetBGColor(uiName,RadioButtonName,BGColor)\n")
    f.write("                        SetTextColor(uiName,RadioButtonName,FGColor)\n")
    f.write("            Control.bind('<ButtonPress-1>',EventFunction_Adaptor(OnRadioButtonSelected,uiName = uiName,elementName = elementName,BGColor = BGColor,FGColor = FGColor))\n")
    f.write('def SetCheckButtonSelectedColor(uiName,elementName,BGColor,FGColor):\n')
    f.write('    """'+Language.G_Language[9972]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    global G_UIRadioButtonGroupArray\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')   
    f.write('            Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('            if elementName not in G_UIRadioButtonGroupArray[uiName]:\n')
    f.write('                G_UIRadioButtonGroupArray[uiName][elementName] = {}\n')
    f.write("            G_UIRadioButtonGroupArray[uiName][elementName]=[Control.cget('bg'),Control.cget('fg')]\n")
    f.write('            def OnCheckButtonSelected(event,uiName,elementName,BGColor,FGColor):\n')
    f.write('                if elementName in G_UIRadioButtonGroupArray[uiName].keys():\n')
    f.write('                    CheckValue = GetTKVariable(uiName,elementName)\n')
    f.write("                    if CheckValue == False:\n")
    f.write("                        SetBGColor(uiName,elementName,BGColor)\n")
    f.write("                        SetTextColor(uiName,elementName,FGColor)\n")
    f.write("                    else:\n")
    f.write("                        OriBGColor = G_UIRadioButtonGroupArray[uiName][elementName][0]\n")
    f.write("                        OriFGColor = G_UIRadioButtonGroupArray[uiName][elementName][1]\n")
    f.write("                        SetBGColor(uiName,elementName,OriBGColor)\n")
    f.write("                        SetTextColor(uiName,elementName,OriFGColor)\n")
    f.write("            Control.bind('<ButtonPress-1>',EventFunction_Adaptor(OnCheckButtonSelected,uiName = uiName,elementName = elementName,BGColor = BGColor,FGColor = FGColor))\n")
    f.write('def SetComboBoxListColor(uiName,elementName,BGColor,FGColor):\n')
    f.write('    """'+Language.G_Language[9970]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    global G_UIRadioButtonGroupArray\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')   
    f.write('            Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write("            Control.tk.eval('[ttk::combobox::PopdownWindow %s].f.l configure -foreground %s -background %s' % (Control,FGColor,BGColor))\n")
    
#写入取得背景颜色
def WriteGetBGColorFunction(f):
    #f.write(Language.G_Language[1211]+'\n')
    f.write('def GetBGColor(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1335]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')   
    f.write('            Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('            if hasattr(elementName,"GetBGColor") == True:\n')
    f.write('                return Control.GetBGColor()\n')
    f.write('            else:\n')
    f.write('                return Control.cget(\'bg\')\n')
    f.write('    return None\n')

#写入设置文字颜色
def WriteSetTextColorFunction(f):
    #f.write(Language.G_Language[1211]+'\n')
    f.write('def SetTextColor(uiName,elementName,RGBColor):\n')
    f.write('    """'+Language.G_Language[1336]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')   
    f.write('            Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('            if hasattr(Control,"SetFGColor") == True:\n')
    f.write('                Control.SetFGColor(RGBColor)\n')
    f.write('            else:\n')
    f.write('                Control.configure(fg=RGBColor)\n')


#写入取得文字颜色
def WriteGetTextColorFunction(f):
    #f.write(Language.G_Language[1211]+'\n')
    f.write('def GetTextColor(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1337]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')   
    f.write('            Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('            if hasattr(elementName,"GetFGColor") == True:\n')
    f.write('                return Control.GetFGColor()\n')
    f.write('            else:\n')
    f.write('                return Control.cget(\'fg\')\n')
    f.write('    return None\n')

#写入更新到文字
def WriteGetTextFunction_HTML(f):
    #f.write(Language.G_Language[1212]+'\n')
    f.write('def GetText(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1212]+'"""\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementVariableArray:\n') 
    f.write('        if elementName in G_UIElementVariableArray[uiName]:\n')
    f.write('            return G_UIElementVariableArray[uiName][elementName]\n')
    f.write('    return str("")\n')

#写入更新到文字
def WriteMessageBoxFunction_HTML(f):  
    #f.write(Language.G_Language[1221]+'\n')
    f.write('def MessageBox(text="",title="info",type="info",parent=None):\n')
    f.write('    """'+Language.G_Language[1221]+'"""\n')
    f.write('    global G_UrlParamMessageBox\n')
    f.write('    parent_func,func_params = GetParentCallFunc()\n')
    f.write('    if parent_func:\n')
    f.write("       if parent_func.find('_cmd') >= 0:\n")
    f.write("           uiName = parent_func.split('_cmd')[0]\n")
    f.write("           print(uiName)\n")
    f.write("           G_UrlParamMessageBox = [title,text,type]\n")
    # f.write("           import flask\n")
    # f.write('           G_FlaskReturnContent = flask.render_template(uiName+".html",url_param_messagebox=[title,text,type])\n')
#写入更新到文字
def WriteGetTextFunction_APP(f):
    #f.write(Language.G_Language[1212]+'\n')
    f.write('def GetText(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1212]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    if uiName in G_UIElementDictionary:\n') 
    f.write('         if elementName in G_UIElementDictionary[uiName]:\n')
    f.write('            return G_UIElementDictionary[uiName][elementName].GetText()\n')
    f.write('    return str("")\n')

#设置列表项颜色
def WriteSetItemColorFunction(f):
    f.write('def SetItemBGColor(uiName,elementName,lineIndex,color):\n')
    f.write('    """'+Language.G_Language[6486]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ComboBox_') >= 0 or elementName.find('ListBox_') >= 0:\n")
    f.write('                    G_UIElementDictionary[uiName][elementName].itemconfig(lineIndex, {\'bg\':color})\n')
    f.write('def SetItemFGColor(uiName,elementName,lineIndex,color):\n')
    f.write('    """'+Language.G_Language[6492]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ComboBox_') >= 0 or elementName.find('ListBox_') >= 0:\n")
    f.write('                    G_UIElementDictionary[uiName][elementName].itemconfig(lineIndex, {\'fg\':color})\n')
#写入更新到文字
def WriteAddItemTextFunction(f,runMode):
    #f.write(Language.G_Language[1243]+'\n')
    f.write('def AddItemText(uiName,elementName,text,lineIndex="end",set_see=False):\n')
    f.write('    """'+Language.G_Language[1243]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ComboBox_') >= 0:\n")
    if runMode == 'android':
        f.write("                G_UIElementDictionary[uiName][elementName].AddTextLine(text,lineIndex)\n")
    else:
        f.write("                ValueArray = list(G_UIElementDictionary[uiName][elementName]['value'])\n")
        f.write('                if type(lineIndex)==type(1):\n')
        f.write('                    ValueArray.insert(lineIndex,text)\n')
        f.write('                else:\n')
        f.write('                   ValueArray.append(text)\n')
        f.write("                G_UIElementDictionary[uiName][elementName]['value'] = ValueArray\n")
    f.write("            elif elementName.find('ListBox_') >= 0:\n")
    f.write('                Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                if type(lineIndex)==type(1):\n')
    f.write('                    Control.insert(lineIndex,text)\n')
    f.write('                else:\n')
    f.write('                    Control.insert(lineIndex, text)\n')
    f.write('                if set_see == True:\n')
    f.write('                    Control.see(lineIndex)\n')
    f.write('def GetItemText(uiName,elementName,lineIndex=0):\n')
    f.write('    """'+Language.G_Language[8024]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write('            Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write("            if elementName.find('ComboBox_') >= 0:\n")
    if runMode == 'android':
        f.write("                return  Control.GetValueByIndex(lineIndex)\n")
    else:
        f.write("                ValueArray = list(Control['value'])\n")
        f.write('                if lineIndex < len(ValueArray):\n')
        f.write('                    return ValueArray[lineIndex]\n')
    f.write("            elif elementName.find('ListBox_') >= 0:\n")
    if runMode == 'android':
        f.write("                return  Control.GetValueByIndex(lineIndex)\n")
    else:
        f.write('                return Control.get(lineIndex)\n')
    #f.write(Language.G_Language[1247]+'\n')
    f.write('def AddLineText(uiName,elementName,text,lineIndex="end",textTag=\'\',set_see=False):\n')
    f.write('    """'+Language.G_Language[1247]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('Text_') >= 0:\n")
    f.write('                Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                if hasattr(Control,"GetEntry") == True:\n')
    f.write('                    Control = Control.GetEntry()\n')
    f.write('                if type(lineIndex)==type(1):\n')
    f.write('                    lineIndex = lineIndex + 1\n')
    f.write("                    if textTag != '':\n")
    f.write('                        Control.insert("%d.0"%lineIndex,text,textTag)\n')
    f.write('                    else:\n')
    f.write('                        Control.insert("%d.0"%lineIndex,text)\n')
    f.write('                else:\n')
    f.write("                    if textTag != '':\n")
    f.write('                        Control.insert(lineIndex,text,textTag)\n')
    f.write('                    else:\n')
    f.write('                        Control.insert(lineIndex,text)\n')
    f.write('                if set_see == True:\n')
    f.write('                    Control.see(lineIndex)\n')
    f.write("            if elementName.find('ListBox_') >= 0:\n")
    f.write('                Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                if type(lineIndex)==type(1):\n')
    f.write("                    if textTag != '' :\n")
    f.write('                        Control.insert("%d"%lineIndex, text,textTag)\n')
    f.write('                    else:\n')
    f.write('                        Control.insert("%d"%lineIndex, text)\n')
    f.write('                else:\n')
    f.write("                    if textTag != '':\n")
    f.write('                        Control.insert(lineIndex,text,textTag)\n')
    f.write('                    else:\n')
    f.write('                        Control.insert(lineIndex,text)\n')
    f.write('                if set_see == True:\n')
    f.write('                    Control.see(lineIndex)\n')
    f.write('def GetLineText(uiName,elementName,lineIndex=0):\n')
    f.write('    """'+Language.G_Language[8025]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write('            Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write("            if elementName.find('Text_') >= 0:\n")
    if runMode == 'android':
        f.write("                return  Control.GetValueByIndex(lineIndex)\n")
    else:
        f.write('                linestart = str("%s.0" % (lineIndex))\n')
        f.write('                lineend = str("%s.end" % (lineIndex))\n')
        f.write("                return Control.get(linestart, lineend).strip().replace('\\n','')\n")
    f.write("            elif elementName.find('ListBox_') >= 0:\n")
    if runMode == 'android':
        f.write("                return  Control.get(lineIndex)\n")
    else:
        f.write('                return Control.get(lineIndex)\n')
    f.write('def AddPage(uiName,elementName,text,iconFile="",targetUIName=\'\'):\n')
    f.write('    """'+Language.G_Language[8008]+'"""\n')
    f.write('    global G_ResourcesFileList\n')
    f.write('    NoteBook = GetElement(uiName,elementName)\n')
    f.write('    PageFrame = tkinter.Frame(NoteBook)\n')
    f.write('    PageFrame.place(relx = 0.0,rely = 0.0,relwidth = 1.0,relheight = 1.0)\n')
    f.write("    PageFrame.configure(bg='#888888')\n")
    f.write('    if targetUIName and len(targetUIName) > 0:\n')
    f.write('        try:\n')
    f.write('            uiClass = targetUIName\n')
    f.write('            if targetUIName.find(".py") > 0:\n')
    f.write('                UIPath, UIFile = os.path.split(targetUIName)\n')
    f.write('                if UIPath.find(":") < 0:\n')
    f.write('                    UIPath = os.path.join(G_ExeDir,UIPath)\n')
    f.write('                import sys\n')
    f.write('                sys.path.append(UIPath)\n')
    f.write('                uiClass, extension = os.path.splitext(UIFile)\n')
    f.write('            import importlib\n')
    f.write('            from   importlib import import_module\n')
    f.write('            importModule = importlib.import_module(uiClass)\n')
    f.write('            importModule = importlib.reload(importModule)\n')
    f.write('            if hasattr(importModule,"Fun") == True:\n')
    f.write('                importModule.Fun.G_ExeDir = G_ExeDir\n')
    f.write('                importModule.Fun.G_ResDir = G_ResDir\n')
    f.write('                if hasattr(importModule,"EXUIControl") == True:\n')
    f.write('                    importModule.EXUIControl.G_ExeDir = G_ExeDir\n')
    f.write('                    importModule.EXUIControl.G_ResDir = G_ResDir\n')
    f.write("            if uiClass.find('Modules.') == 0:\n")
    f.write('                LibNameArray =  uiClass.partition("Modules.")\n')
    f.write('                uiClass = LibNameArray[2]\n')
    f.write('                newClass = getattr(importModule, uiClass)\n')
    f.write('            else:\n')
    f.write('                newClass = getattr(importModule, uiClass)\n')
    f.write('            newClassInstance = newClass(PageFrame,False)\n')
    f.write('        except Exception as ex:\n')
    f.write('            MessageBox(str(ex))\n')
    f.write('    if len(iconFile) > 0 and os.path.exists(iconFile) == True:\n')
    f.write('        if elementName not in G_UIElementIconDictionary[uiName]:\n')
    f.write('            G_UIElementIconDictionary[uiName][elementName]= {}\n')
    f.write('        G_UIElementIconDictionary[uiName][elementName][text] = ImageTk.PhotoImage(file=iconFile) \n')
    f.write('        NoteBook.add(PageFrame,text = text,image=G_UIElementIconDictionary[uiName][elementName][text],compound="left")\n')
    f.write('    else:\n')
    f.write('        NoteBook.add(PageFrame,text = text)\n')
    f.write('def GetPage(uiName,elementName,index=0):\n')
    f.write('    """'+Language.G_Language[8026]+'"""\n')
    f.write('    NoteBook = GetElement(uiName,elementName)\n')
    f.write('    if NoteBook:\n')
    f.write('        Pages = NoteBook.winfo_children()\n')
    f.write('        if index >= 0 and index < len(Pages):\n')
    f.write('            return Pages[index]\n')
    f.write('    return None\n')
    f.write('def SelectPage(uiName,elementName,index=0):\n')
    f.write('    """'+Language.G_Language[8010]+'"""\n')
    f.write('    NoteBook = GetElement(uiName,elementName)\n')
    f.write('    if NoteBook:\n')
    f.write('        Pages = NoteBook.winfo_children()\n')
    f.write('        if index >= 0 and index < len(Pages):\n')
    f.write('            NoteBook.select(index)\n')

    f.write('def GetSelectedPageIndex(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[8014]+'"""\n')
    f.write('    NoteBook = GetElement(uiName,elementName)\n')
    f.write('    if NoteBook:\n')
    f.write('        return NoteBook.index("current")\n')
    f.write('    return -1\n')

    f.write('def GetPageText(uiName,elementName,index=0):\n')
    f.write('    """'+Language.G_Language[8015]+'"""\n')
    f.write('    NoteBook = GetElement(uiName,elementName)\n')
    f.write('    if NoteBook:\n')
    f.write('        return NoteBook.tab(index,"text")\n')
    f.write('    return -1\n')

    f.write('def GetPageIndex(uiName,elementName,title):\n')
    f.write('    """'+Language.G_Language[8016]+'"""\n')
    f.write('    NoteBook = GetElement(uiName,elementName)\n')
    f.write('    if NoteBook:\n')
    f.write('        Tabs = NoteBook.tabs()\n')
    f.write('        for i in range(0,len(Tabs)):\n')
    f.write('            tabTitle = NoteBook.tab(i,"text")\n')
    f.write('            if tabTitle == title:\n')
    f.write('                return i\n')
    f.write('    return -1\n')

    f.write('def HidePage(uiName,elementName,index=0):\n')
    f.write('    """'+Language.G_Language[8011]+'"""\n')
    f.write('    NoteBook = GetElement(uiName,elementName)\n')
    f.write('    if NoteBook:\n')
    f.write('        Pages = NoteBook.winfo_children()\n')
    f.write('        if index >= 0 and index < len(Pages):\n')
    f.write('            NoteBook.hide(index)\n')
    f.write('def DelPage(uiName,elementName,index=0):\n')
    f.write('    """'+Language.G_Language[8009]+'"""\n')
    f.write('    NoteBook = GetElement(uiName,elementName)\n')
    f.write('    if NoteBook:\n')
    f.write('        Pages = NoteBook.winfo_children()\n')
    f.write('        if index >= 0 and index < len(Pages):\n')
    f.write('            NoteBook.forget(Pages[index])\n')
    f.write('            DestoryChild(Pages[index])\n')

    f.write("def AddPanedWindowPage(uiName,elementName='',WidthOrHeight=10):\n")
    f.write('    """'+Language.G_Language[8012]+'"""\n')
    f.write('    realElementName = elementName\n')
    f.write('    if uiName in G_UIElementAliasDictionary:\n')
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            realElementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('        PanedWindow = GetElement(uiName,elementName)\n')
    f.write('        if PanedWindow:\n')
    f.write('            PanedWindow_child = tkinter.Canvas(PanedWindow,bg="#888888")\n')
    f.write("            if PanedWindow.cget('orient') == tkinter.HORIZONTAL:\n")
    f.write('                PanedWindow.add(PanedWindow_child,width = WidthOrHeight)\n')
    f.write("            else:\n")
    f.write('                PanedWindow.add(PanedWindow_child,height = WidthOrHeight)\n')
    f.write("            Pages = PanedWindow.panes()\n")
    f.write('            PageCount = len(Pages)\n')
    f.write("            realChildName = str('%s_child%s'%(realElementName,PageCount+1))\n")
    f.write("            aliasChildName = str('%s_child%s'%(elementName,PageCount+1))\n")
    f.write("            Register(uiName,realChildName,PanedWindow_child,aliasChildName)\n")
    f.write("            return PanedWindow_child\n")
    f.write('    return None\n')

    f.write("def DelPanedWindowPage(uiName,elementName='',index=0):\n")
    f.write('    """'+Language.G_Language[8013]+'"""\n')
    f.write('    PanedWindow = GetElement(uiName,elementName)\n')
    f.write('    if PanedWindow:\n')
    f.write("        Pages = PanedWindow.panes()\n")
    f.write('        if index >= 0 and index < len(Pages):\n')
    f.write('            PanedWindow.forget(Pages[index])\n')

    # f.write('def AddImage(uiName,elementName,text,lineIndex="end",textTag=\'\'):\n')
    # f.write('    """'+Language.G_Language[1247]+'"""\n')
    # f.write('    global G_UIElementAliasDictionary\n')
    # f.write('    global G_UIElementDictionary\n')
    # f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    # f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    # f.write('    if uiName in G_UIElementDictionary:\n')
    # f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    # f.write("            if elementName.find('Text_') >= 0 or elementName.find('ListBox_') >= 0:\n")
    # f.write('                if type(lineIndex)==type(1):\n')
    # f.write("                    if textTag != '' and elementName.find('Text_') >= 0 :\n")
    # f.write('                        G_UIElementDictionary[uiName][elementName].insert("%d.0"%(lineIndex+1), text,textTag)\n')
    # f.write('                    else:\n')
    # f.write('                        G_UIElementDictionary[uiName][elementName].insert("%d.0"%(lineIndex+1), text)\n')
    # f.write('                else:\n')
    # f.write("                    if textTag != '' and elementName.find('Text_') >= 0 :\n")
    # f.write('                        G_UIElementDictionary[uiName][elementName].insert(lineIndex,text,textTag)\n')
    # f.write('                    else:\n')
    # f.write('                        G_UIElementDictionary[uiName][elementName].insert(lineIndex,text)\n')
    #f.write(Language.G_Language[1280]+'\n')
    f.write('def AddTreeItem(uiName,elementName,parentItem="",insertItemPosition="end",itemName="",itemText="",itemValues=(),iconName="",tag=""):\n')
    f.write('    """'+Language.G_Language[1280]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementIconDictionary\n')
    f.write('    global G_ResourcesFileList\n')
    f.write('    Item = None\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('TreeView_') >= 0 and len(itemName) > 0:\n")
    f.write('                if iconName != "":\n')
    f.write('                    if iconName in G_UIElementIconDictionary[uiName][elementName]:\n')
    f.write('                        ItemIcon = G_UIElementIconDictionary[uiName][elementName][iconName]\n')
    f.write('                        Item = G_UIElementDictionary[uiName][elementName].insert(parentItem,insertItemPosition,itemName,text=itemText,values=itemValues,image=ItemIcon,tag=tag)\n')
    f.write('                    else:\n')
    f.write('                        ItemIcon = None\n')
    f.write('                        if os.path.exists(iconName) == True:\n')
    f.write('                            ItemIcon = ImageTk.PhotoImage(file = iconName)\n')
    f.write('                        else:\n')
    f.write('                            imagePath = iconName\n')
    f.write('                            iconName_Lower = iconName.lower()\n')
    f.write('                            if iconName_Lower in G_ResourcesFileList:\n')
    f.write('                               imagePath = G_ResourcesFileList[iconName_Lower]\n')
    f.write('                            if os.path.exists(imagePath) == True:\n')
    f.write('                                ItemIcon = ImageTk.PhotoImage(file = imagePath)\n')
    f.write('                        if ItemIcon:\n')
    f.write('                            Item = G_UIElementDictionary[uiName][elementName].insert(parentItem,insertItemPosition,itemName,text=itemText,values=itemValues,image=ItemIcon,tag=tag)\n')
    f.write('                            G_UIElementIconDictionary[uiName][elementName][Item] = ItemIcon\n')
    f.write('                        else:\n')
    f.write('                            Item = G_UIElementDictionary[uiName][elementName].insert(parentItem,insertItemPosition,itemName,text=itemText,values=itemValues,tag=tag)\n')
    f.write('                else:\n')
    f.write('                    Item = G_UIElementDictionary[uiName][elementName].insert(parentItem,insertItemPosition,itemName,text=itemText,values=itemValues,tag=tag)\n')
    f.write('    return Item\n')
    #f.write(Language.G_Language[1281]+'\n')
    f.write('def SetTreeItemText(uiName,elementName,itemName,text):\n')
    f.write('    """'+Language.G_Language[1281]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('TreeView_') >= 0 and len(itemName) > 0:\n")
    f.write('                G_UIElementDictionary[uiName][elementName].item(itemName,text=text)\n')
    f.write('def GetTreeItemText(uiName,elementName,itemName):\n')
    f.write('    """'+Language.G_Language[1474]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('TreeView_') >= 0 and len(itemName) > 0:\n")
    f.write('                item_text = G_UIElementDictionary[uiName][elementName].item(itemName,"text")\n')
    f.write('                return item_text\n')
    f.write('    return None\n')
    f.write('def SetTreeItemValues(uiName,elementName,itemName,itemValues):\n')
    f.write('    """'+Language.G_Language[1282]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('TreeView_') >= 0 and len(itemName) > 0:\n")
    f.write('                G_UIElementDictionary[uiName][elementName].item(itemName,values=itemValues)\n')
    f.write('def GetTreeItemValues(uiName,elementName,itemName):\n')
    f.write('    """'+Language.G_Language[1475]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('TreeView_') >= 0 and len(itemName) > 0:\n")
    f.write('                item_value = G_UIElementDictionary[uiName][elementName].item(itemName,"values")\n')
    f.write('                return item_value\n')
    f.write('    return None\n')
    #f.write(Language.G_Language[1283]+'\n')
    f.write('def SetTreeItemIcon(uiName,elementName,itemName,iconName=""):\n')
    f.write('    """'+Language.G_Language[1283]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_ResourcesFileList\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('TreeView_') >= 0 and len(itemName) > 0:\n")
    f.write('                if iconName != "":\n')
    f.write('                    if iconName in G_UIElementIconDictionary[uiName][elementName]:\n')
    f.write('                        ItemIcon = G_UIElementIconDictionary[uiName][elementName][iconName]\n')
    f.write('                        G_UIElementDictionary[uiName][elementName].item(itemName,image=ItemIcon)\n')
    f.write('                        G_UIElementIconDictionary[uiName][elementName][itemName]=ItemIcon\n')
    f.write('                    else:\n')
    f.write('                        ItemIcon = None\n')
    f.write('                        if os.path.exists(iconName) == True:\n')
    f.write('                            ItemIcon = ImageTk.PhotoImage(file = iconName)\n')
    f.write('                        else:\n')
    f.write('                            imagePath = iconName\n')
    f.write('                            iconName_Lower = iconName.lower()\n')
    f.write('                            if iconName_Lower in G_ResourcesFileList:\n')
    f.write('                               imagePath = G_ResourcesFileList[iconName_Lower]\n')
    f.write('                            if os.path.exists(imagePath) == True:\n')
    f.write('                                ItemIcon = ImageTk.PhotoImage(file = imagePath)\n')
    f.write('                        if ItemIcon:\n')
    f.write('                            G_UIElementDictionary[uiName][elementName].item(itemName,image=ItemIcon)\n')
    f.write('                            G_UIElementIconDictionary[uiName][elementName][itemName]=ItemIcon\n')
    #f.write(Language.G_Language[1284]+'\n')
    f.write('def ExpandTreeItem(uiName,elementName,itemName,expand=True):\n')
    f.write('    """'+Language.G_Language[1284]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('TreeView_') >= 0 and len(itemName) > 0:\n")
    f.write('                G_UIElementDictionary[uiName][elementName].item(itemName,open=expand)\n')
    
    f.write('def SetColumnList(uiName,elementName,columnList):\n')
    f.write('    """'+Language.G_Language[3164]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0 :\n")
    f.write('                G_UIElementDictionary[uiName][elementName].configure(columns = columnList)\n')
    f.write('                for columnName in columnList:\n')
    f.write("                    G_UIElementDictionary[uiName][elementName].column(columnName,anchor='center',width=100,stretch=True)\n")
    f.write("                    G_UIElementDictionary[uiName][elementName].heading(columnName,anchor='center',text=columnName)\n")

    f.write("def SetColumnInfo(uiName,elementName,columnName='',anchor='center',width=100,stretch=True):\n")
    f.write('    """'+Language.G_Language[3165]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0 :\n")
    f.write('                columnList = G_UIElementDictionary[uiName][elementName].cget(\'columns\')\n')
    f.write('                for columnName in columnList:\n')
    f.write("                    G_UIElementDictionary[uiName][elementName].column(columnName,anchor=anchor,width=width,stretch=stretch)\n")
    f.write("                    G_UIElementDictionary[uiName][elementName].heading(columnName,anchor=anchor,text=columnName)\n")

    f.write('def AddRowText(uiName,elementName,rowIndex =\'end\',values=(''),tag=\'\'):\n')
    f.write('    """'+Language.G_Language[1962]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_ListViewTagDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write("                if rowIndex == '':\n")
    f.write("                    rowIndex = 'end'\n")
    f.write("                values_list = []\n")
    f.write("                if isinstance(values,str) == True:\n")
    f.write("                    values_list = values.split(',')\n")
    f.write("                else:\n")
    f.write("                    values_list = list(values)\n")
    f.write("                for i in range(len(values_list)):\n")
    f.write("                    if isinstance(values_list[i],bool) == True:\n")
    f.write("                        if values_list[i] == True:\n")
    f.write("                            values_list[i] = '☑'\n")
    f.write("                        elif values_list[i] == False:\n")
    f.write("                            values_list[i] = '☐'\n")
    f.write('                ListView = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                currentRowIndex = len(ListView.get_children())\n')
    f.write('                if isinstance(rowIndex,int):\n')
    f.write('                    currentRowIndex = rowIndex\n')
    f.write("                if tag == '':\n")
    f.write("                    tag = 'even'\n")
    f.write("                    if currentRowIndex%2 == 0:\n")
    f.write("                        tag = 'even'\n")
    f.write("                    else:\n")
    f.write("                        tag = 'odd'\n")
    f.write('                G_UIElementDictionary[uiName][elementName].insert(\'\',rowIndex, values=values_list,tag=tag)\n')
    f.write('                G_ListViewTagDictionary[uiName][elementName].append(tag)\n')
    f.write('                return currentRowIndex\n')
    f.write('    return -1\n')

    f.write('def AddMultiRowText(uiName,elementName,rowIndex =\'end\',rowValuesList=[],tagList=[]):\n')
    f.write('    """'+Language.G_Language[2036]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_ListViewTagDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write("                if rowIndex == '':\n")
    f.write("                    rowIndex = 'end'\n")
    f.write("                values_list = []\n")
    f.write("                ListView = G_UIElementDictionary[uiName][elementName]\n")
    f.write('                currentRowIndex = len(ListView.get_children())\n')
    f.write('                if isinstance(rowIndex,int):\n')
    f.write('                    currentRowIndex = rowIndex\n')
    f.write("                rowCount = len(rowValuesList)\n")
    f.write("                tagCount = len(tagList)\n")
    f.write("                for rowOffset in range(rowCount):\n")
    f.write("                    rowValues = rowValuesList[rowOffset]\n")
    f.write("                    if isinstance(rowValues,str) == True:\n")
    f.write("                        values_list = rowValues.split(',')\n")
    f.write("                    else:\n")
    f.write("                        values_list = list(rowValues)\n")
    f.write("                    for i in range(len(values_list)):\n")
    f.write("                        if isinstance(values_list[i],bool) == True:\n")
    f.write("                            if values_list[i] == True:\n")
    f.write("                                values_list[i] = '☑'\n")
    f.write("                            elif values_list[i] == False:\n")
    f.write("                                values_list[i] = '☐'\n")
    f.write("                    if rowOffset < tagCount:\n")
    f.write("                        tag = tagList[rowOffset]\n")
    f.write("                    else:\n")
    f.write("                        tag = 'even'\n")
    f.write("                        if (currentRowIndex + rowOffset)%2 == 0:\n")
    f.write("                            tag = 'even'\n")
    f.write("                        else:\n")
    f.write("                            tag = 'odd'\n")
    f.write('                    ListView.insert(\'\',rowIndex, values=values_list,tag=tag)\n')
    f.write('                    G_ListViewTagDictionary[uiName][elementName].append(tag)\n')
    f.write('                return currentRowIndex\n')
    f.write('    return -1\n')

    f.write('def GetRowTextList(uiName,elementName,rowIndex):\n')
    f.write('    """'+Language.G_Language[1973]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write('                ListView = G_UIElementDictionary[uiName][elementName]\n')
    f.write("                rowHandle = ListView.get_children()[rowIndex]\n")
    f.write('                rowValues = list(ListView.item(rowHandle,"values"))\n')
    f.write("                for i in range(len(rowValues)):\n")
    f.write("                    if rowValues[i] == '☑':\n")
    f.write("                        rowValues[i] = True\n")
    f.write("                    elif rowValues[i] == '☐':\n")
    f.write("                        rowValues[i] = False\n")
    f.write('                return rowValues\n')
    f.write('    return None\n')

    f.write('def GetColumnTextList(uiName,elementName,columnIndex):\n')
    f.write('    """'+Language.G_Language[2037]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write('                ListView = G_UIElementDictionary[uiName][elementName]\n')
    f.write("                RowList = ListView.get_children()\n") 
    f.write("                ColumnTextlist = []\n") 
    f.write("                for rowHandle in RowList:\n")
    f.write('                    rowValues = ListView.item(rowHandle,"values")\n')
    f.write("                    columnText = rowValues[columnIndex]\n")
    f.write("                    if columnText == '☑':\n")
    f.write("                        ColumnTextlist.append(True)\n")
    f.write("                    elif columnText == '☐':\n")
    f.write("                        ColumnTextlist.append(False)\n")
    f.write("                    else:\n")
    f.write("                        ColumnTextlist.append(columnText)\n")
    f.write('                return ColumnTextlist\n')
    f.write('    return None\n')

    f.write('def GetAllRowTextList(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[2038]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write('                ListView = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                allrowValues = []\n')
    f.write("                for rowHandle in ListView.get_children():\n")
    f.write('                    rowValues = list(ListView.item(rowHandle,"values"))\n')
    f.write('                    allrowValues.append(rowValues)\n')
    f.write('                return allrowValues\n')
    f.write('    return None\n')
    

    f.write('def GetCellText(uiName,elementName,rowIndex,columnIndex):\n')
    f.write('    """'+Language.G_Language[1974]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write('                ListView = G_UIElementDictionary[uiName][elementName]\n')
    f.write("                rowHandle = ListView.get_children()[rowIndex]\n")
    if runMode == 'android':
        f.write('                rowValues = ListView.item(rowHandle)["values"]\n')
    else:
        f.write('                rowValues = ListView.item(rowHandle,"values")\n')
    f.write("                if rowValues[columnIndex] == '☑':\n")
    f.write("                    return True\n")
    f.write("                elif rowValues[columnIndex] == '☐':\n")
    f.write("                    return False\n")
    f.write('                return rowValues[columnIndex]\n')
    f.write('    return None\n')
    f.write('def SetCellText(uiName,elementName,rowIndex,columnIndex,text):\n')
    f.write('    """'+Language.G_Language[1963]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write("                rowHandle = G_UIElementDictionary[uiName][elementName].get_children()[rowIndex]\n")
    f.write('                G_UIElementDictionary[uiName][elementName].set(rowHandle,column=columnIndex,value=text)\n')
    f.write('def SetCellCheckBox(uiName,elementName,rowIndex,columnIndex,value=True):\n')
    f.write('    """'+Language.G_Language[2030]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write("                rowHandle = G_UIElementDictionary[uiName][elementName].get_children()[rowIndex]\n")
    f.write("                if value == True:\n")
    f.write("                    G_UIElementDictionary[uiName][elementName].set(rowHandle,column=columnIndex,value='☑')\n")
    f.write("                else:\n")
    f.write("                    G_UIElementDictionary[uiName][elementName].set(rowHandle,column=columnIndex,value='☐')\n")
    f.write('def SetColumnCheckBox(uiName,elementName,beginRowIndex=0,endRowIndex=-1,columnIndex=0,value=True):\n')
    f.write('    """'+Language.G_Language[2031]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write("                if endRowIndex == -1:\n")
    f.write("                    endRowIndex = len(G_UIElementDictionary[uiName][elementName].get_children())\n")
    f.write("                rowHandleList = G_UIElementDictionary[uiName][elementName].get_children()[beginRowIndex:endRowIndex]\n")
    f.write("                for rowHandle in rowHandleList:\n")
    f.write("                    if value == True:\n")
    f.write("                        G_UIElementDictionary[uiName][elementName].set(rowHandle,column=columnIndex,value='☑')\n") 
    f.write("                    else:\n")
    f.write("                        G_UIElementDictionary[uiName][elementName].set(rowHandle,column=columnIndex,value='☐')\n")

    f.write('def DeleteRow(uiName,elementName,rowIndex):\n')
    f.write('    """'+Language.G_Language[1964]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write("                rowHandle = G_UIElementDictionary[uiName][elementName].get_children()[rowIndex]\n")
    f.write('                G_UIElementDictionary[uiName][elementName].delete(rowHandle)\n')
    
    f.write('def DeleteAllRows(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1965]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write('                ListView = G_UIElementDictionary[uiName][elementName]\n')
    if runMode == 'android':
        f.write('                ListView.clear()\n')
    else:
        f.write('                RootChildren = ListView.get_children()\n')
        f.write('                ListView.delete(*RootChildren)\n')
        # f.write('                for Item in RootChildren:\n')
        # f.write('                    ListView.delete(Item)\n')

    f.write('def CheckPickedRow(uiName,elementName,x,y):\n')
    f.write('    """'+Language.G_Language[1966]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write('                ListView = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                PickedItem = ListView.identify("item",x,y)\n')
    f.write('                if PickedItem:\n')
    f.write('                   RootChildren = ListView.get_children()\n')
    f.write('                   return RootChildren.index(PickedItem)\n')
    f.write('    return None\n')
    f.write('def CheckPickedCell(uiName,elementName,x,y):\n')
    f.write('    """'+Language.G_Language[1982]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write('                ListView = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                PickedItem = ListView.identify("item",x,y)\n')
    f.write('                if PickedItem:\n')
    # f.write('                   row = ListView.identify_row(y)\n')
    # f.write('                   row = row.replace("I","")\n')
    # f.write('                   row = int(row) - 1\n')
    f.write('                    row = ListView.index(PickedItem)\n')
    f.write('                    column = ListView.identify_column(x)\n')
    f.write('                    column = column.replace("#","")\n')
    f.write('                    column = int(column) - 1\n')
    f.write('                    return (row,column)\n')
    f.write('    return (-1,-1)\n')
    f.write('def OnListViewCellClicked(event,uiName,widgetName,callbackFunc):\n')
    # f.write('    rowIndex,columnIndex = CheckPickedCell(uiName,widgetName,event.x,event.y)\n')
    # f.write('    if callbackFunc:\n')
    # f.write('        callbackFunc(uiName,widgetName,rowIndex,columnIndex)\n')
    f.write('    """'+Language.G_Language[1727]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    elementName = widgetName\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write('                ListView = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                PickedItem = ListView.identify("item",event.x,event.y)\n')
    f.write('                if PickedItem:\n')
    f.write('                    rowIndex = ListView.index(PickedItem)\n')
    f.write('                    rowHandle = ListView.get_children()[rowIndex]\n')
    f.write('                    rowValues = ListView.item(rowHandle,"values")\n')
    f.write('                    column = ListView.identify_column(event.x)\n')
    f.write('                    column = column.replace("#","")\n')
    f.write('                    columnIndex = int(column) - 1\n')
    f.write("                    if rowValues[columnIndex] == '☑':\n")
    f.write("                        ListView.set(rowHandle,column=columnIndex,value='☐')\n")
    f.write("                    elif rowValues[columnIndex] == '☐':\n")
    f.write("                        ListView.set(rowHandle,column=columnIndex,value='☑')\n")
    f.write('                    if callbackFunc:\n')
    f.write('                        callbackFunc(uiName,widgetName,rowIndex,columnIndex)\n')
    f.write('def SelectRow(uiName,elementName,beginrowIndex=0,endrowIndex=0):\n')
    f.write('    """'+Language.G_Language[2039]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write('                ListView = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                RootChildren = ListView.get_children()\n')
    f.write('                RowCount = len(RootChildren)\n')
    f.write('                if beginrowIndex >= 0 or beginrowIndex < RowCount:\n')
    f.write('                    select = []\n')
    f.write('                    if endrowIndex < 0:\n')
    f.write('                        endrowIndex = RowCount + endrowIndex\n')
    f.write('                    elif endrowIndex == 0:\n')
    f.write('                        endrowIndex = beginrowIndex\n')
    f.write('                    for index in range(beginrowIndex,endrowIndex+1):\n')
    f.write("                        select.append(RootChildren[index])\n")
    f.write('                    ListView.selection_set(select)\n')
    f.write('def GetSelectedRowIndex(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[9013]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write('                ListView = G_UIElementDictionary[uiName][elementName]\n')
    f.write("                selectionList = ListView.selection()\n")
    f.write("                if selectionList and len(selectionList) > 0:\n")
    f.write("                    if len(selectionList) == 1:\n")
    f.write("                        rowHandle = selectionList[0]\n")
    f.write('                        rowIndex = ListView.index(rowHandle)\n')
    f.write('                        return rowIndex\n')
    f.write("                    else:\n")
    f.write("                        rowIndexList = []\n")
    f.write("                        for rowHandle in selectionList:\n")
    f.write('                            rowIndex = ListView.index(rowHandle)\n')
    f.write('                            rowIndexList.append(rowIndex)\n')
    f.write('                        return rowIndexList\n')
    f.write('    return -1\n')
    f.write('def SortLineByColumn(uiName,elementName,columnIndex=0,reverse = False):\n')
    f.write('    """'+Language.G_Language[2032]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write('                ListView = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                AllLineValues = []\n')
    f.write('                RootChildren = ListView.get_children()\n')
    f.write('                for Item in RootChildren:\n')
    f.write('                    itemInfo = ListView.item(Item)\n')
    f.write('                    AllLineValues.append(itemInfo["values"])\n')
    f.write('                    AllLineValues.sort(key=lambda x:str(x[columnIndex]),reverse=reverse)\n')
    f.write('                for Item in RootChildren:\n')
    f.write('                    ListView.delete(Item)\n')
    f.write('                for line in AllLineValues:\n')
    f.write('                    itemHandle = ListView.insert("",0,text=line[0],values=line)\n')
    f.write("def SetRowStyle(uiName,elementName,rowIndex='even',bgColor='lightblue',fgColor='#000000',textFont=None):\n")
    f.write('    """'+Language.G_Language[2035]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_ListViewTagDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write('                ListView = G_UIElementDictionary[uiName][elementName]\n')
    f.write("                if rowIndex == 'even':\n")
    f.write("                    if textFont:\n")
    f.write("                        ListView.tag_configure('even', background=bgColor,font=textFont,foreground=fgColor)\n")
    f.write("                    else:\n")
    f.write("                        ListView.tag_configure('even', background=bgColor,foreground=fgColor)\n")
    f.write("                    RootChildren = ListView.get_children()\n")
    f.write("                    row = 0\n")
    f.write("                    rowTag = 'even'\n")
    f.write("                    for Item in RootChildren:\n")
    f.write("                        if row/2 != int(row/2):\n")
    f.write("                            rowTag = 'even'\n")
    f.write("                        else:\n")
    f.write("                            rowTag = 'odd'\n")
    f.write('                        ListView.item(Item,tag=rowTag)\n')
    f.write('                        row = row + 1\n')
    f.write("                elif rowIndex == 'odd':\n")
    f.write("                    if textFont:\n")
    f.write("                        ListView.tag_configure('odd', background=bgColor,font=textFont,foreground=fgColor)\n")
    f.write("                    else:\n")
    f.write("                        ListView.tag_configure('odd', background=bgColor,foreground=fgColor)\n")
    f.write("                    RootChildren = ListView.get_children()\n")
    f.write("                    row = 0\n")
    f.write("                    rowTag = 'even'\n")
    f.write("                    for Item in RootChildren:\n")
    f.write("                        if row/2 != int(row/2):\n")
    f.write("                            rowTag = 'even'\n")
    f.write("                        else:\n")
    f.write("                            rowTag = 'odd'\n")
    f.write('                        ListView.item(Item,tag=rowTag)\n')
    f.write('                        row = row + 1\n')
    f.write("                elif rowIndex == 'all':\n")
    f.write("                    if textFont:\n")
    f.write("                        ListView.tag_configure('all', background=bgColor,font=textFont,foreground=fgColor)\n")
    f.write("                    else:\n")
    f.write("                        ListView.tag_configure('all', background=bgColor,foreground=fgColor)\n")
    f.write("                    RootChildren = ListView.get_children()\n")
    f.write("                    rowTag = 'all'\n")
    f.write("                    for Item in RootChildren:\n")
    f.write('                        ListView.item(Item,tag=rowTag)\n')
    f.write("                elif rowIndex == 'hover':\n")
    f.write("                    if textFont:\n")
    f.write("                        ListView.tag_configure('hover', background=bgColor,font=textFont,foreground=fgColor)\n")
    f.write("                    else:\n")
    f.write("                        ListView.tag_configure('hover', background=bgColor,foreground=fgColor)\n")
    f.write("                    AddUserData(uiName,elementName,'HoverItem','list',[None,None,bgColor],0)\n")
    f.write("                else:\n")
    f.write("                    if textFont:\n")
    f.write("                        ListView.tag_configure(str('row_%d'%rowIndex), background=bgColor,font=textFont,foreground=fgColor)\n")
    f.write("                    else:\n")
    f.write("                        ListView.tag_configure(str('row_%d'%rowIndex), background=bgColor,foreground=fgColor)\n")
    f.write("                    RootChildren = ListView.get_children()\n")
    f.write("                    Item = RootChildren[rowIndex]\n")
    f.write("                    ListView.item(Item,tag=str('row_%d'%rowIndex))\n")
    f.write("def SetRowBGColor(uiName,elementName,rowIndex='even',bgColor='lightblue'):\n")
    f.write('    """'+Language.G_Language[2033]+'"""\n')
    f.write("    SetRowStyle(uiName,elementName,rowIndex=rowIndex,bgColor=bgColor,fgColor='#000000',textFont=None)\n")

    f.write("def OnListViewRowMouseMotion(event,uiName,widgetName):\n")
    f.write('    """'+Language.G_Language[2034]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    elementName = widgetName\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write('                ListView = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                PickedItem = ListView.identify("item",event.x,event.y)\n')
    f.write('                if PickedItem:\n')
    f.write('                    RootChildren = ListView.get_children()\n')
    f.write('                    RowIndex =  RootChildren.index(PickedItem)\n')
    f.write('                    if RowIndex >= 0:\n')
    f.write('                        HoverItem = GetUserData(uiName,elementName,"HoverItem")\n')
    f.write('                        if HoverItem:\n')
    f.write('                            LastItem = HoverItem[0]\n')
    f.write('                            LastItemTag = HoverItem[1]\n')
    f.write('                            LastItemBG = HoverItem[2]\n')
    f.write('                            if LastItem:\n')
    f.write('                                ListView.item(LastItem,tag=LastItemTag)\n')
    f.write("                            RootChildren = ListView.get_children()\n")
    f.write("                            NewItem = RootChildren[RowIndex]\n")
    f.write("                            NewItemTag = ListView.item(NewItem,'tag')\n")
    f.write("                            ListView.item(NewItem,tag=str('hover'))\n")
    f.write("                            if HoverItem:\n")
    f.write("                                SetUserData(uiName,elementName,'HoverItem',[NewItem,NewItemTag,LastItemBG])\n")
    f.write("                            else:\n")
    f.write("                                AddUserData(uiName,elementName,'HoverItem','list',[NewItem,NewItemTag,LastItemBG],0)\n")

#写入WEB端的
def WriteAddItemTextFunction_HTML(f):
    f.write('def AddRowText(uiName,elementName,rowIndex =\'end\',values=(''),tag=\'\'):\n')
    f.write('    """'+Language.G_Language[1962]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    global G_ListViewTagDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary.keys():\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write("                if rowIndex == '':\n")
    f.write("                    rowIndex = 'end'\n")
    f.write("                values_list = []\n")
    f.write("                if isinstance(values,str) == True:\n")
    f.write("                    values_list = values.split(',')\n")
    f.write("                else:\n")
    f.write("                    values_list = list(values)\n")
    f.write("                for i in range(len(values_list)):\n")
    f.write("                    if isinstance(values_list[i],bool) == True:\n")
    f.write("                        if values_list[i] == True:\n")
    f.write("                            values_list[i] = '☑'\n")
    f.write("                        elif values_list[i] == False:\n")
    f.write("                            values_list[i] = '☐'\n")
    f.write('                if elementName not in G_UIElementVariableArray[uiName].keys():\n')
    f.write('                    G_UIElementVariableArray[uiName][elementName] = []\n')
    f.write('                currentRowIndex = len(G_UIElementVariableArray[uiName][elementName])\n')
    f.write('                if isinstance(rowIndex,int):\n')
    f.write('                    currentRowIndex = rowIndex\n')
    f.write("                if tag == '':\n")
    f.write("                    tag = 'even'\n")
    f.write("                    if currentRowIndex%2 == 0:\n")
    f.write("                        tag = 'even'\n")
    f.write("                    else:\n")
    f.write("                        tag = 'odd'\n")
    f.write("                if rowIndex == 'end':\n")
    f.write('                    G_UIElementVariableArray[uiName][elementName].append(values_list)\n')
    f.write("                else:\n")
    f.write('                    G_UIElementVariableArray[uiName][elementName].insert(currentRowIndex, values_list)\n')
    f.write('                G_ListViewTagDictionary[uiName][elementName].append(tag)\n')
    f.write('                return currentRowIndex\n')
    f.write('    return -1\n')
    f.write("def SetCellText(uiName,elementName,rowIndex,columnIndex,text=''):\n")
    f.write('    """'+Language.G_Language[1963]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write('                if elementName not in G_UIElementVariableArray[uiName].keys():\n')
    f.write('                    G_UIElementVariableArray[uiName][elementName] = []\n')
    f.write('                if rowIndex < len(G_UIElementVariableArray[uiName][elementName]):\n')
    f.write('                    valueList = G_UIElementVariableArray[uiName][elementName][rowIndex]\n')
    f.write('                    columnCount = len(valueList)\n')
    f.write('                    if columnIndex >= columnCount:\n')
    f.write('                        for i in range(columnCount,columnIndex+1):\n')
    f.write("                            G_UIElementVariableArray[uiName][elementName][rowIndex].append('')\n")
    f.write('                    G_UIElementVariableArray[uiName][elementName][rowIndex][columnIndex]=text\n')
    f.write('def DeleteRow(uiName,elementName,rowIndex):\n')
    f.write('    """'+Language.G_Language[1964]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write('                if elementName in G_UIElementVariableArray[uiName].keys():\n')
    f.write('                    G_UIElementVariableArray[uiName][elementName].pop(rowIndex)\n')
    f.write('def DeleteAllRows(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1965]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListView_') >= 0:\n")
    f.write('                if elementName in G_UIElementVariableArray[uiName].keys():\n')
    f.write('                    G_UIElementVariableArray[uiName][elementName].clear()\n')
#写入移动树结点
def WriteCheckPickedTreeItemFunction(f):
    f.write('def CheckPickedTreeItem(uiName,elementName,x,y):\n')
    f.write('    """'+Language.G_Language[1310]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('TreeView_') >= 0:\n")
    f.write('                return G_UIElementDictionary[uiName][elementName].identify("item",x,y)\n')
    f.write('    return None\n')
    f.write('def CheckClickedTreeItem(uiName,elementName,x,y):\n')
    f.write('    """'+Language.G_Language[1310]+'"""\n')
    f.write('    return CheckPickedTreeItem(uiName,elementName,x,y)\n')
    f.write('def SelectTreeItem(uiName,elementName,item):\n')
    f.write('    """'+Language.G_Language[1327]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('TreeView_') >= 0:\n")
    f.write('                G_UIElementDictionary[uiName][elementName].selection_set(item)\n')
    f.write('def GetSelectedTreeItem(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1359]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('TreeView_') >= 0:\n")
    f.write('                return G_UIElementDictionary[uiName][elementName].selection()\n')
    f.write('    return None\n')
    f.write('def UnSelecteTreeItem(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1364]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('TreeView_') >= 0:\n")
    f.write('                selected_item = G_UIElementDictionary[uiName][elementName].selection()\n')
    f.write('                if selected_item:\n')
    f.write('                    G_UIElementDictionary[uiName][elementName].selection_remove(selected_item)\n')
#写入移动树结点
def WriteMoveTreeItemFunction(f):
    f.write('def MoveTreeItem(uiName,elementName,itemName,parentItem="",insertItemPosition="end"):\n')
    f.write('    """'+Language.G_Language[1311]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('TreeView_') >= 0 and len(itemName) > 0:\n")
    f.write('                G_UIElementDictionary[uiName][elementName].move(itemName,parentItem,insertItemPosition)\n')

#写入更新到文字
def WriteDelItemTextFunction(f):
    #f.write(Language.G_Language[1244]+'\n')
    f.write('def DelItemText(uiName,elementName,lineIndexOrText):\n')
    f.write('    """'+Language.G_Language[1244]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ComboBox_') >= 0:\n")
    f.write("                ValueArray = list(G_UIElementDictionary[uiName][elementName]['value'])\n")
    f.write('                if type(lineIndexOrText)==type(1):\n')
    f.write('                    ValueArray.pop(lineIndexOrText)\n')
    f.write("                    G_UIElementDictionary[uiName][elementName]['value'] = ValueArray\n")
    f.write('                else:\n')
    f.write('                    ValueIndex = ValueArray.index(lineIndexOrText)\n')
    f.write('                    if ValueIndex >= 0:\n')
    f.write('                        ValueArray.pop(ValueIndex)\n')
    f.write("                    G_UIElementDictionary[uiName][elementName]['value'] = ValueArray\n")
    f.write("            elif elementName.find('ListBox_') >= 0:\n")
    f.write('                if type(lineIndexOrText)==type(1):\n')
    f.write('                    G_UIElementDictionary[uiName][elementName].delete(lineIndexOrText)\n')
    f.write('                else:\n')
    f.write('                    ValueArray = G_UIElementDictionary[uiName][elementName].get(0,tkinter.END)\n')
    f.write('                    ValueIndex = ValueArray.index(lineIndexOrText)\n')
    f.write('                    if ValueIndex >= 0:\n')
    f.write('                        G_UIElementDictionary[uiName][elementName].delete(ValueIndex)\n')
    #f.write(Language.G_Language[1248]+'\n')
    f.write('def DelLineText(uiName,elementName,lineIndex="end"):\n')
    f.write('    """'+Language.G_Language[1248]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('Text_') >= 0:\n")
    f.write('                Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                if hasattr(Control,"GetEntry") == True:\n')
    f.write('                    Control = Control.GetEntry()\n')
    f.write('                if type(lineIndex)==type(1):\n')
    f.write('                    lineIndex = lineIndex + 1\n')
    f.write('                    beginIndex = str("%d.0"%lineIndex)\n')
    f.write('                    endIndex = str("%d.0"%(lineIndex+1))\n')
    f.write('                    Control.delete(beginIndex,endIndex)\n')
    f.write('                else:\n')
    f.write('                    beginIndex = str("%s.0"%lineIndex)\n')
    f.write('                    endIndex = str("%s.end"%lineIndex)\n')
    f.write('                    Control.delete(beginIndex,endIndex)\n')
    f.write("            elif elementName.find('ListBox_') >= 0:\n")
    f.write('                if type(lineIndex)==type(1):\n')
    f.write('                    G_UIElementDictionary[uiName][elementName].delete("%d"%lineIndex)\n')
    f.write('                else:\n')
    f.write('                    G_UIElementDictionary[uiName][elementName].delete("%s"%lineIndex)\n')
    f.write('def DelTreeItem(uiName,elementName,item):\n')
    f.write('    """'+Language.G_Language[1285]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('TreeView_') >= 0:\n")
    f.write('                G_UIElementDictionary[uiName][elementName].delete(item)\n')
    f.write('def DelAllTreeItem(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1312]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('TreeView_') >= 0:\n")
    f.write('                TreeView = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                RootChildren = TreeView.get_children()\n')
    f.write('                for Item in RootChildren:\n')
    f.write('                    TreeView.delete(Item)\n')
    f.write('def DelAllLines(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1338]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ListBox_') >= 0:\n")
    f.write('                G_UIElementDictionary[uiName][elementName].delete(0,tkinter.END)\n')
    f.write("            elif elementName.find('Text_') >= 0:\n")
    f.write('                Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                if hasattr(Control,"GetEntry") == True:\n')
    f.write('                    Control = Control.GetEntry()\n')
    f.write('                Control.delete(\'0.0\',tkinter.END)\n')
    f.write('def DelAllItemText(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1814]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        if elementName in G_UIElementDictionary[uiName]:\n')
    f.write("            if elementName.find('ComboBox_') >= 0:\n")
    f.write("                G_UIElementDictionary[uiName][elementName]['value'] = []\n")
#写入更新到文字
def WriteSetImageFunction(f,exportMode = False,usePME = False):
    f.write('def LoadImageFromPMEFile(imagePath):\n')
    if not usePME:
        f.write('    return None\n')
    else:
        f.write('    global PMEPassword\n')
        f.write('    pathName,fileName = os.path.split(imagePath)\n')
        f.write('    shotName,extension = os.path.splitext(fileName)\n')
        f.write('    imagePath = os.path.join(pathName,shotName+".pme")\n')
        f.write('    if os.path.exists(imagePath) == True:\n')
        f.write('        #从加密文件中读取图片\n')
        f.write('        result,image = PyMeEncryption.LoadFromEncryptionFile(imagePath,PMEPassword)\n')
        f.write('        if result == True:\n')
        f.write('            return image\n')
        f.write('        else:\n')
        f.write('            return None\n')
        f.write('    imagePath_Lower = imagePath.lower()\n')
        f.write('    if imagePath_Lower in G_ResourcesFileList:\n')
        f.write('        imagePath = G_ResourcesFileList[imagePath_Lower]\n')
        f.write('        if os.path.exists(imagePath) == False:\n')
        f.write('            return None\n')
        f.write('        #从加密文件中读取图片\n')
        f.write('        result,image = PyMeEncryption.LoadFromEncryptionFile(imagePath,PMEPassword)\n')
        f.write('        if result == True:\n')
        f.write('            return image\n')
        f.write('    return None\n')
    #f.write(Language.G_Language[1213]+'\n')
    f.write('def SetImage(uiName,elementName,imagePath,autoSize = True,format=\'RGBA\'):\n')
    f.write('    """'+Language.G_Language[1213]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    global G_ResourcesFileList\n')
    f.write('    from   PIL import Image,ImageTk\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control :\n') 
    f.write('        Control_Width = Control.winfo_width()\n') 
    f.write('        Control_Height = Control.winfo_height()\n') 
    f.write('        if isinstance(imagePath,str) == True:\n')
    f.write('            pathName,fileName = os.path.split(imagePath)\n')
    f.write('            shotName,extension = os.path.splitext(fileName)\n')
    f.write('            if extension.lower() == \'.gif\':\n')
    f.write('                if autoSize == True:\n')
    f.write('                    LoadGIF(uiName,elementName,imagePath,Control_Width,Control_Height)\n')
    f.write('                else:\n')
    f.write('                    LoadGIF(uiName,elementName,imagePath)\n')
    f.write('                return\n')
    f.write('        image = None\n')
    f.write('        if isinstance(imagePath,str) == True:\n')
    f.write('            imagePath_Lower = imagePath.lower()\n')
    f.write('            if os.path.exists(imagePath) == False:\n')
    f.write('                if imagePath_Lower in G_ResourcesFileList:\n')
    f.write('                    imagePath = G_ResourcesFileList[imagePath_Lower]\n')
    f.write('                if os.path.exists(imagePath) == False:\n')
    if not exportMode:
        f.write("                    Control.configure(image = '')\n")
        f.write('                    return\n')
        f.write('            image = Image.open(imagePath).convert(format)\n')
    else:
        f.write('                    image = LoadImageFromPMEFile(imagePath)\n')
        f.write('                    if image is None:\n')
        f.write("                        Control.configure(image = '')\n")
        f.write('                        return\n')
        f.write('            if image is None:\n')
        f.write('                image = Image.open(imagePath).convert(format)\n')
    f.write('        elif isinstance(imagePath,Image.Image) == True:\n')
    f.write('            image = imagePath.convert(format)\n')
    f.write('        if image is None:\n')
    f.write("            Control.configure(image = '')\n")
    f.write('            return\n')
    f.write('        realElementName = elementName\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            realElementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if realElementName.find(\'Label_\') >= 0 or realElementName.find(\'Button_\') >= 0 :\n')
    f.write('            if uiName in G_UIElementUserDataArray:\n')
    f.write('                if realElementName in G_UIElementUserDataArray[uiName]:\n')
    f.write('                    for EBData in G_UIElementUserDataArray[uiName][realElementName]:\n')   
    f.write('                        if EBData[0] == \'image\' and EBData[1] == \'imageInfo\':\n')
    f.write('                            EBData[2][1] = imagePath\n')
    f.write('                            if autoSize == True:\n')
    f.write('                                image_Resize = image.resize((Control_Width, Control_Height),Image.LANCZOS)\n')
    f.write('                            else:\n')
    f.write('                                image_Resize = image\n')
    f.write('                            EBData[2][0] = ImageTk.PhotoImage(image_Resize)\n')
    f.write('                            EBData[2][2] = autoSize\n')
    f.write('                            Control.configure(image = EBData[2][0])\n')
    f.write('                            return \n')
    f.write('            if autoSize == True:\n')
    f.write('                image_Resize = image.resize((Control_Width, Control_Height),Image.LANCZOS)\n')
    f.write('            else:\n')
    f.write('                image_Resize = image\n')
    f.write('            newPTImage = ImageTk.PhotoImage(image_Resize)\n')
    f.write('            AddUserData(uiName,elementName,\'image\',\'imageInfo\',[newPTImage,imagePath,autoSize],0)\n')
    f.write('            Control.configure(image = newPTImage)\n')
    f.write('        if realElementName.find(\'Text_\') >= 0:\n')
    f.write('            if hasattr(Control,"GetEntry") == True:\n')
    f.write('                Control = Control.GetEntry()\n')
    f.write('            Control.delete(\'0.0\',tkinter.END)\n')
    f.write('            imagePath_Lower = imagePath.lower()\n')
    f.write('            if autoSize == True:\n')
    f.write('                image_Resize = image.resize((Control_Width, Control_Height),Image.LANCZOS)\n')
    f.write('            else:\n')
    f.write('                image_Resize = image\n')
    f.write('            newPTImage = ImageTk.PhotoImage(image_Resize)\n')
    f.write('            Control.image_create(tkinter.END, image=newPTImage)\n')
    f.write('            AddUserData(uiName,elementName,\'image\',\'imageInfo\',[newPTImage,imagePath,autoSize],0)\n')
    f.write('        if realElementName.find(\'Form_\') >= 0 or realElementName.find(\'Canvas_\') >= 0:\n')
    f.write('            if autoSize == True:\n')
    f.write('               SetCanvasBGImage(uiName,elementName,imagePath)\n')
    f.write('            else:\n')
    f.write('               SetCanvasBGImage(uiName,elementName,imagePath,\'\')\n')
    
    f.write("def InsertImage(uiName,elementName,position=tkinter.END,imagePath='',reSize=None):\n")
    f.write('    """'+Language.G_Language[9071]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    global G_ResourcesFileList\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control == True:\n') 
    f.write('        from   PIL import Image,ImageTk\n')
    f.write('        image = None\n')
    f.write('        if isinstance(imagePath,str) == True:\n')
    f.write('            imagePath_Lower = imagePath.lower()\n')
    f.write('            if os.path.exists(imagePath) == False:\n')
    f.write('                if imagePath_Lower in G_ResourcesFileList:\n')
    f.write('                    imagePath = G_ResourcesFileList[imagePath_Lower]\n')
    f.write('                if os.path.exists(imagePath) == False:\n')
    if not exportMode:
        f.write('                    return\n')
        f.write('            image = Image.open(imagePath).convert(format)\n')
    else:
        f.write('                    image = LoadImageFromPMEFile(imagePath)\n')
        f.write('                    if image is None:\n')
        f.write('                        return\n')
        f.write('            if image is None:\n')
        f.write('                image = Image.open(imagePath).convert(format)\n')
    f.write('        elif isinstance(imagePath,Image.Image) == True:\n')
    f.write('            image = imagePath.convert(format)\n')
    f.write('        if image:\n')
    f.write('            image_Resize = image\n')
    f.write('            if reSize:\n')
    f.write('                image_Resize = image.resize(reSize,Image.LANCZOS)\n')
    f.write('            newPTImage = ImageTk.PhotoImage(image_Resize)\n')
    f.write('            Control.image_create(position, image=newPTImage)\n')
    f.write('            AddUserData(uiName,elementName,\'image\',\'imageInfo\',[newPTImage,imagePath,False],0)\n')
    f.write('            currentLine = Control.index(tkinter.INSERT)\n')
    f.write('            return  currentLine\n')
    
    #f.write(Language.G_Language[1213]+'\n')
    f.write("def SetCanvasBGImage(uiName,elementName,imagePath,wrapType='Zoom'):\n")
    f.write('    """'+Language.G_Language[1813]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    global G_ResourcesFileList\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        realElementName = elementName\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            realElementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if realElementName.find(\'Form_\') >= 0 or realElementName.find(\'Canvas_\') >= 0 :\n')
    f.write("            Control.delete('BGImage')\n")
    f.write("            newImage = None\n")
    f.write('            if imagePath:\n')
    f.write('                if isinstance(imagePath,str) == True:\n')
    f.write('                    imagePath_Lower = imagePath.lower()\n')
    f.write('                    if os.path.exists(imagePath) == False:\n')
    f.write('                        if imagePath_Lower in G_ResourcesFileList:\n')
    f.write('                            imagePath = G_ResourcesFileList[imagePath_Lower]\n')
    f.write('                        if os.path.exists(imagePath) == False:\n')
    if not exportMode:
        f.write('                            return\n')
        f.write('                    newImage = Image.open(imagePath).convert(\'RGBA\')\n')
    else:
        f.write('                            newImage = LoadImageFromPMEFile(imagePath)\n')
        f.write('                    if newImage is None:\n')
        f.write('                        newImage = Image.open(imagePath).convert(\'RGBA\')\n')
    f.write('                else:\n')
    f.write('                    newImage = imagePath\n')
    f.write('            if newImage is None:\n')
    f.write('                return\n')
    f.write('            Control_Width = Control.winfo_width()\n')
    f.write('            Control_Height = Control.winfo_height()\n')
    f.write('            try:\n')
    f.write('                Form_1_Pack = Control.pack_info()\n')
    f.write('                if  len(Form_1_Pack) > 0:\n')
    f.write('                    if uiName in G_UIRootSizeDictionary.keys() and "width" in G_UIRootSizeDictionary[uiName].keys():\n')
    f.write('                        Control_Width = G_UIRootSizeDictionary[uiName]["width"]\n')
    f.write('                    elif G_RootSize:\n')
    f.write('                        Control_Width = G_RootSize[0]\n')
    f.write('                    if uiName in G_UIRootSizeDictionary.keys() and "height" in G_UIRootSizeDictionary[uiName].keys():\n')
    f.write('                        Control_Height = G_UIRootSizeDictionary[uiName]["height"]\n')
    f.write('                    elif G_RootSize:\n')
    f.write('                        Control_Height = G_RootSize[1]\n')
    f.write('            except:\n')
    f.write('                pass\n')
    f.write('            if wrapType == "Zoom" :\n')
    f.write('                reSizeImage = newImage.resize((Control_Width, Control_Height),Image.LANCZOS)\n')
    f.write('                newPTImage = ImageTk.PhotoImage(reSizeImage)\n')
    f.write("                AddUserData(uiName,elementName,'BGImage','imageInfo',[newPTImage,imagePath,wrapType],0)\n")
    f.write('                Control.create_image(0,0,anchor=tkinter.NW,image=newPTImage,tag="BGImage")\n')
    f.write('            elif wrapType == "Tiling" :\n')
    f.write('                newPTImage = ImageTk.PhotoImage(newImage)\n')
    f.write("                AddUserData(uiName,elementName,'BGImage','imageInfo',[newPTImage,imagePath,wrapType],0)\n")
    f.write("                RepeatRow = int(Control_Width / newImage.height) + 1\n")
    f.write("                RepeatCow = int(Control_Height / newImage.width) + 1\n")
    f.write("                for r in range(RepeatRow):\n")
    f.write("                    for c in range(RepeatCow):\n")
    f.write('                        Control.create_image(c * newImage.width, r * newImage.height,anchor=tkinter.NW,image=newPTImage,tag="BGImage")\n')
    f.write('            else:\n')
    f.write('                newPTImage = ImageTk.PhotoImage(newImage)\n')
    f.write("                AddUserData(uiName,elementName,'BGImage','imageInfo',[newPTImage,imagePath,wrapType],0)\n")
    f.write('                Control.create_image(0,0,anchor=tkinter.NW,image=newPTImage,tag="BGImage")\n')
    f.write('        ReDrawCanvasShape(uiName,elementName)\n')
    f.write("g_DownLoadImageDictionary = {}\n")
    f.write("def SetImageFromURL(uiName,elementName,url,autoSize = True):\n")
    f.write('    """'+Language.G_Language[1815]+'"""\n')
    f.write("    global g_DownLoadImageDictionary\n")
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    ControlType = "Label"\n')
    f.write('    if elementName.find(\'Form_\') >= 0 or elementName.find(\'Canvas_\') >= 0 :\n')
    f.write('        ControlType = "Canvas"\n')
    f.write('    if elementName.find(\'Text_\') >= 0 :\n')
    f.write('        ControlType = "Text"\n')
    f.write('    if Control:\n')
    f.write('        def DownLoadImageFromURL(Control,ControlType,url,autoSize):\n')
    f.write("            try:\n")
    f.write("                if url in g_DownLoadImageDictionary:\n")    
    f.write('                    if ControlType == "Canvas":\n')   
    f.write("                        Control.delete('BGImage')\n")
    f.write('                        Control.create_image(0,0,anchor=tkinter.NW,image=g_DownLoadImageDictionary[url],tag="BGImage")\n')
    f.write('                    elif ControlType == "Text":\n')   
    f.write('                        if hasattr(Control,"GetEntry") == True:\n')
    f.write('                            Control = Control.GetEntry()\n')
    f.write("                        Control.delete(\'0.0\',tkinter.END)\n")
    f.write('                        Control.image_create(tkinter.END, image=g_DownLoadImageDictionary[url])\n')
    f.write("                    else:\n")   
    f.write("                        Control.configure(image=g_DownLoadImageDictionary[url])\n")    
    f.write("                else:\n") 
    f.write("                    urlOpen = urlopen(url)\n") 
    f.write("                    if urlOpen :\n") 
    f.write("                        image_bytes = urlOpen.read()\n") 
    f.write("                        data_stream = io.BytesIO(image_bytes)\n") 
    f.write("                        pil_image = Image.open(data_stream)\n") 
    f.write("                        if autoSize == True:\n") 
    f.write("                            pil_image = pil_image.resize((Control.winfo_width(), Control.winfo_height()),Image.LANCZOS)\n") 
    f.write("                        g_DownLoadImageDictionary[url] = ImageTk.PhotoImage(pil_image)\n") 
    f.write('                        if ControlType == "Canvas":\n')   
    f.write("                            Control.delete('BGImage')\n")
    f.write('                            Control.create_image(0,0,anchor=tkinter.NW,image=g_DownLoadImageDictionary[url],tag="BGImage")\n')
    f.write('                        elif ControlType == "Text":\n')   
    f.write("                            Control.delete(\'0.0\',tkinter.END)\n")
    f.write('                            Control.image_create(tkinter.END, image=g_DownLoadImageDictionary[url])\n')
    f.write("                        else:\n")   
    f.write("                            Control.configure(image=g_DownLoadImageDictionary[url])\n") 
    f.write("            except Exception as ex:\n")
    f.write("                print(ex)\n")
    f.write('        run_thread = threading.Thread(target=DownLoadImageFromURL, args=[Control,ControlType,url,autoSize])\n')
    f.write('        run_thread.Daemon = True\n')
    f.write('        run_thread.start() \n')
    f.write('def RemoveImage(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[9503]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        DelUserData(uiName,elementName,\'image\')\n')
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find(\'Label_\') >= 0 or elementName.find(\'Button_\') >= 0 :\n')
    f.write("            Control.configure(image = '')\n")
    f.write('        if elementName.find(\'Form_\') >= 0 or elementName.find(\'Canvas_\') >= 0 :\n')
    f.write("            Control.delete('BGImage')\n")
#写入更新到文字
def WriteGetImageFunction(f):
    #f.write(Language.G_Language[1214]+'\n')
    f.write('def GetImage(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1214]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find(\'Label_\') >= 0 or elementName.find(\'Button_\') >= 0 :\n')
    f.write('            if uiName in G_UIElementUserDataArray:\n')
    f.write('                if elementName in G_UIElementUserDataArray[uiName]:\n')
    f.write('                    for EBData in G_UIElementUserDataArray[uiName][elementName]:\n')   
    f.write('                        if EBData[0] == \'image\' and EBData[1] ==\'imageInfo\':\n')
    f.write('                            return EBData[2][0]\n')
    f.write('        if elementName.find(\'Form_\') >= 0 or elementName.find(\'Canvas_\') >= 0 :\n')
    f.write('            if uiName in G_UIElementUserDataArray:\n')
    f.write('                if elementName in G_UIElementUserDataArray[uiName]:\n')
    f.write('                    for EBData in G_UIElementUserDataArray[uiName][elementName]:\n')   
    f.write('                        if EBData[0] == \'BGImage\' and EBData[1] ==\'imageInfo\':\n')
    f.write('                            return EBData[2][0]\n')
    f.write('    return str("")\n')
    f.write('def GetImageFileName(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[6595]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find(\'Label_\') >= 0 or elementName.find(\'Button_\') >= 0 :\n')
    f.write('            if uiName in G_UIElementUserDataArray:\n')
    f.write('                if elementName in G_UIElementUserDataArray[uiName]:\n')
    f.write('                    for EBData in G_UIElementUserDataArray[uiName][elementName]:\n')   
    f.write('                        if EBData[0] == \'image\' and EBData[1] ==\'imageInfo\':\n')
    f.write('                            return EBData[2][1]\n')
    f.write('        if elementName.find(\'Form_\') >= 0 or elementName.find(\'Canvas_\') >= 0 :\n')
    f.write('            if uiName in G_UIElementUserDataArray:\n')
    f.write('                if elementName in G_UIElementUserDataArray[uiName]:\n')
    f.write('                    for EBData in G_UIElementUserDataArray[uiName][elementName]:\n')   
    f.write('                        if EBData[0] == \'BGImage\' and EBData[1] ==\'imageInfo\':\n')
    f.write('                            return EBData[2][1]\n')
    f.write('    return str("")\n')
    f.write('def LoadImageFromFile(imagefile,reSize=None,uiName=None,elementName=None):\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_ResourcesFileList\n')
    f.write('    """'+Language.G_Language[6594]+'"""\n')
    f.write('    if imagefile != None:\n')
    f.write('        resourPath = imagefile\n')
    f.write('        newImage = None\n')
    f.write("        if os.path.exists(resourPath) == False:\n")
    f.write("            resourPath, imagefile = os.path.split(imagefile)\n")
    f.write('            imagefile_Lower = imagefile.lower()\n')
    f.write('            if imagefile_Lower in G_ResourcesFileList:\n')
    f.write('                resourPath = G_ResourcesFileList[imagefile_Lower]\n')
    # f.write('                if os.path.exists(resourPath) == False:\n')
    # f.write('                    return None\n')
    f.write('            else:\n')
    f.write('                newImage = LoadImageFromPMEFile(imagefile)\n')
    f.write('        try:\n')
    f.write('            if os.path.exists(resourPath) == True and newImage is None:\n')
    f.write('                pathname_noext, extension = os.path.splitext(resourPath)\n')
    f.write('                newImage = None\n')
    f.write('                extension = extension.lower()\n')
    f.write('                if extension == ".png" or extension == ".gif":\n')
    f.write('                    newImage = Image.open(resourPath).convert(\'RGBA\')\n')
    f.write('                elif extension == ".jpg" or extension == ".bmp":\n')
    f.write('                    newImage = Image.open(resourPath).convert(\'RGB\')\n')
    f.write('                else:\n')
    f.write('                    return None\n')
    f.write('            if newImage == None:\n')
    f.write('                return None\n')
    f.write('            if reSize:\n')
    f.write('                newImage = newImage.resize((reSize[0],reSize[1]),Image.LANCZOS)\n')
    f.write('            if uiName and elementName:\n')
    f.write('                realElementName = elementName\n')
    f.write('                if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('                    realElementName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('                newPTImage = ImageTk.PhotoImage(newImage)\n')
    f.write("                if realElementName.find('Form_') >= 0 or realElementName.find('Canvas_') >= 0 :\n")
    f.write("                    AddUserData(uiName,elementName,'BGImage','imageInfo',[newPTImage,resourPath,False],0)\n")
    f.write("                else:\n")
    f.write("                    AddUserData(uiName,elementName,'image','imageInfo',[newPTImage,resourPath,False],0)\n")
    f.write('            return newImage\n')
    f.write('        except Exception as ex:\n')
    f.write('            print(imagefile+":'+Language.G_Language[1706]+'")\n')
    f.write('    return None\n')
    f.write('def LoadGIF(uiName,elementName,imagefile,w=0,h=0):\n')
    f.write('    """'+Language.G_Language[6590]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    global G_ResourcesFileList\n')
    f.write('    newImage = None\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write("        if elementName.find('Label_') >= 0 or elementName.find('Button_') >= 0 or elementName.find('RadioButton_') >= 0 or elementName.find('CheckButton_') >= 0 or elementName.find('Text_') >= 0:\n")
    f.write('            hasGIFAnimation = False\n')
    f.write('            if imagefile != None:\n')
    f.write('                resourPath = imagefile \n')
    f.write("                if os.path.exists(resourPath) == False:\n")
    f.write("                    resourPath, imagefile = os.path.split(imagefile)\n")
    f.write('                    imagefile_Lower = imagefile.lower()\n')
    f.write('                    if imagefile_Lower in G_ResourcesFileList:\n')
    f.write('                        resourPath = G_ResourcesFileList[imagefile_Lower]\n')
    f.write('                if os.path.exists(resourPath) == True:\n')
    f.write('                    try:\n')
    f.write("                        if imagefile.find('.gif') >= 0:\n")
    f.write('                            GifData = Image.open(resourPath)\n')
    f.write('                            seq = []\n')
    f.write('                            try:\n')
    f.write('                                while 1:\n')
    f.write("                                    imageRGBA = GifData.copy().convert('RGBA')\n")
    f.write('                                    if newImage is None:\n')
    f.write('                                        newImage = imageRGBA\n')
    f.write('                                    if w > 0 and h > 0:\n')
    f.write('                                        resizeImage = imageRGBA.resize((w, h),Image.LANCZOS)\n')
    f.write('                                        newFrame = ImageTk.PhotoImage(resizeImage)\n')
    f.write('                                    else:\n')
    f.write('                                        newFrame = ImageTk.PhotoImage(imageRGBA)\n')
    f.write('                                    seq.append(newFrame)\n')
    f.write('                                    GifData.seek(len(seq))\n')
    f.write('                            except EOFError:\n')
    f.write('                                pass\n')
    f.write('                            delay = 100\n')
    f.write('                            try:\n')
    f.write("                                delay = GifData.info['duration']\n")
    f.write('                            except KeyError:\n')
    f.write('                                delay = 100\n')
    f.write('                            if delay == 0:\n')
    f.write('                                delay = 100\n')
    f.write('                            hasGIFAnimation = True\n')
    f.write('                            if elementName not in G_CanvasImageDictionary[uiName]:\n')
    f.write('                                G_CanvasImageDictionary[uiName][elementName] = []\n')
    f.write('                            G_CanvasImageDictionary[uiName][elementName].append([imagefile,[seq,delay,0,None],w,h])\n')
    f.write('                        else:\n')
    f.write("                            newImage = Image.open(resourPath).convert('RGBA')\n")
    f.write('                    except:\n')
    f.write('                        return newImage\n')
    f.write('                if hasGIFAnimation == True:\n')
    f.write('                    Control.after(100,lambda: updateGIFFrame(uiName,elementName))\n')
    f.write('    return newImage\n')
    f.write('def StopGIF(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[6591]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    global G_ResourcesFileList\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write("        if elementName.find('Label_') >= 0 or elementName.find('Button_') >= 0 or elementName.find('RadioButton_') >= 0 or elementName.find('CheckButton_') >= 0 or elementName.find('Text_') >= 0:\n")
    f.write('            Control.after_cancel(updateGIFFrame)\n')
    f.write('            if elementName in G_CanvasImageDictionary[uiName]:\n')
    f.write('                G_CanvasImageDictionary[uiName][elementName].clear()\n')

#写入更新到文字
def WriteSetImageFunction_Mobile(f,exportMode = False,usePME = False):
    f.write('def LoadImageFromPMEFile(imagePath):\n')
    if not usePME:
        f.write('    return None\n')
    else:
        f.write('    global PMEPassword\n')
        f.write('    pathName,fileName = os.path.split(imagePath)\n')
        f.write('    shotName,extension = os.path.splitext(fileName)\n')
        f.write('    imagePath = os.path.join(pathName,shotName+".pme")\n')
        f.write('    if os.path.exists(imagePath) == True:\n')
        f.write('        #从加密文件中读取图片\n')
        f.write('        result,image = PyMeEncryption.LoadFromEncryptionFile(imagePath,PMEPassword)\n')
        f.write('        if result == True:\n')
        f.write('            return image\n')
        f.write('        else:\n')
        f.write('            return None\n')
        f.write('    imagePath_Lower = imagePath.lower()\n')
        f.write('    if imagePath_Lower in G_ResourcesFileList:\n')
        f.write('        imagePath = G_ResourcesFileList[imagePath_Lower]\n')
        f.write('        if os.path.exists(imagePath) == False:\n')
        f.write('            return None\n')
        f.write('        #从加密文件中读取图片\n')
        f.write('        result,image = PyMeEncryption.LoadFromEncryptionFile(imagePath,PMEPassword)\n')
        f.write('        if result == True:\n')
        f.write('            return image\n')
        f.write('    return None\n')
    #f.write(Language.G_Language[1213]+'\n')
    f.write('def SetImage(uiName,elementName,imagePath,autoSize = True,format=\'RGBA\'):\n')
    f.write('    """'+Language.G_Language[1213]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control and isinstance(imagePath,str) == True:\n') 
    f.write('        if autoSize == True:\n')
    f.write('            Control.SetImage(imagePath,"IMG_2_NODE")\n')
    f.write('        else:\n')
    f.write('            Control.SetImage(imagePath,None)\n')
    f.write("def InsertImage(uiName,elementName,position=tkinter.END,imagePath='',reSize=None):\n")
    f.write('    """'+Language.G_Language[9071]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control and isinstance(imagePath,str) == True:\n') 
    f.write('        Control.SetImage(imagePath,None)\n')
    #f.write('        currentLine = Control.index(tkinter.INSERT)\n')
    f.write('        return  currentLine\n')
    #f.write(Language.G_Language[1213]+'\n')
    f.write("def SetCanvasBGImage(uiName,elementName,imagePath,wrapType='Zoom'):\n")
    f.write('    """'+Language.G_Language[1813]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    global G_ResourcesFileList\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        realElementName = elementName\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            realElementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if realElementName.find(\'Form_\') >= 0 or realElementName.find(\'Canvas_\') >= 0 :\n')
    f.write('            ControlWidth = Control.GetWidth()\n')
    f.write('            ControlHeight = Control.GetHeight()\n')
    f.write('            if wrapType == "Zoom" :\n')
    f.write('                Control.SetImage(imagePath,"IMG_2_NODE")\n')
    f.write('            elif wrapType == "Tiling" :\n')
    f.write('                pass\n')
    # f.write('                newPTImage = ImageTk.PhotoImage(newImage)\n')
    # f.write("                AddUserData(uiName,elementName,'BGImage','imageInfo',[newPTImage,imagePath,wrapType],0)\n")
    # f.write("                RepeatRow = int(ControlHeight/ newImage.height) + 1\n")
    # f.write("                RepeatCow = int(ControlWidth/ newImage.width) + 1\n")
    # f.write("                for r in range(RepeatRow):\n")
    # f.write("                    for c in range(RepeatCow):\n")
    # f.write('                        Control.create_image(c * newImage.width, r * newImage.height,anchor=tkinter.NW,image=newPTImage,tag="BGImage")\n')
    # f.write('                        DrawImage(uiName,elementName,c * newImage.width, r * newImage.height,ControlWidth,ControlHeight,imagePath,shapeTag='')\n')
    f.write('            else:\n')
    f.write('                Control.SetImage(imagePath,None)\n')


    f.write("g_DownLoadImageDictionary = {}\n")
    f.write("def SetImageFromURL(uiName,elementName,url,autoSize = True):\n")
    f.write('    """'+Language.G_Language[1815]+'"""\n')
    f.write("    global g_DownLoadImageDictionary\n")
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    ControlType = "Label"\n')
    f.write('    if elementName.find(\'Form_\') >= 0 or elementName.find(\'Canvas_\') >= 0 :\n')
    f.write('        ControlType = "Canvas"\n')
    f.write('    if elementName.find(\'Text_\') >= 0 :\n')
    f.write('        ControlType = "Text"\n')
    f.write('    if Control:\n')
    f.write('        def DownLoadImageFromURL(widget,ControlType,url,autoSize):\n')
    f.write("            try:\n")
    f.write("                if url in g_DownLoadImageDictionary:\n")    
    f.write('                    if ControlType == "Canvas":\n')   
    f.write("                        Control.delete('BGImage')\n")
    f.write('                        Control.create_image(0,0,anchor=tkinter.NW,image=g_DownLoadImageDictionary[url],tag="BGImage")\n')
    f.write('                    elif ControlType == "Text":\n')   
    f.write("                        Control.delete(\'0.0\',tkinter.END)\n")
    f.write('                        Control.image_create(tkinter.END, image=g_DownLoadImageDictionary[url])\n')
    f.write("                    else:\n")   
    f.write("                        widget.configure(image=g_DownLoadImageDictionary[url])\n")    
    f.write("                else:\n") 
    f.write("                    urlOpen = urlopen(url)\n") 
    f.write("                    if urlOpen :\n") 
    f.write("                        image_bytes = urlOpen.read()\n") 
    f.write("                        data_stream = io.BytesIO(image_bytes)\n") 
    f.write("                        pil_image = Image.open(data_stream)\n") 
    f.write("                        if autoSize == True:\n") 
    f.write("                            pil_image = pil_image.resize((Control.winfo_width(), Control.winfo_height()),Image.LANCZOS)\n") 
    f.write("                        g_DownLoadImageDictionary[url] = ImageTk.PhotoImage(pil_image)\n") 
    f.write('                        if ControlType == "Canvas":\n')   
    f.write("                            Control.delete('BGImage')\n")
    f.write('                            Control.create_image(0,0,anchor=tkinter.NW,image=g_DownLoadImageDictionary[url],tag="BGImage")\n')
    f.write('                        elif ControlType == "Text":\n')   
    f.write("                            Control.delete(\'0.0\',tkinter.END)\n")
    f.write('                            Control.image_create(tkinter.END, image=g_DownLoadImageDictionary[url])\n')
    f.write("                        else:\n")   
    f.write("                            widget.configure(image=g_DownLoadImageDictionary[url])\n") 
    f.write("            except Exception as ex:\n")
    f.write("                print(ex)\n")
    f.write('        run_thread = threading.Thread(target=DownLoadImageFromURL, args=[Control,ControlType,url,autoSize])\n')
    f.write('        run_thread.Daemon = True\n')
    f.write('        run_thread.start() \n')


#把树结点写入文件
def WriteLoadTreeItemIconFunction(f):
    #f.write(Language.G_Language[1249]+'\n')
    f.write('def LoadImageToIconList(uiName,elementName,ItemName,imageFile):\n')
    f.write('    """'+Language.G_Language[1249]+'"""\n')
    f.write('    global G_ResourcesFileList\n')
    f.write('    imagePath = imageFile\n')
    f.write('    imageFile_Lower = imageFile.lower()\n')
    f.write('    if imageFile_Lower in G_ResourcesFileList:\n')
    f.write('        imagePath = G_ResourcesFileList[imageFile_Lower]\n')
    f.write('    if os.path.exists(imagePath) == True:\n')
    f.write('        image = ImageTk.PhotoImage(file = imagePath)\n')
    f.write('        if elementName not in G_UIElementIconDictionary[uiName].keys():\n')
    f.write('            G_UIElementIconDictionary[uiName][elementName] = {}\n')
    f.write('        G_UIElementIconDictionary[uiName][elementName][ItemName] = image\n')
    f.write('        return image\n')
    f.write('    return None\n')

#取得当前选中文本
def WriteGetSelectTextFunction(f):
    f.write('def GetSelectText(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[9070]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find(\'Text_\') >= 0 :\n') 
    f.write('            if hasattr(Control,"GetEntry") == True:\n')
    f.write('                Control = Control.GetEntry()\n')
    f.write('            return Control.get(tkinter.SEL_FIRST,tkinter.SEL_LAST)\n')
    f.write('    return None\n')

#删除当前选中文本
def WriteDelSelectTextFunction(f):
    f.write('def DelSelectText(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[9014]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find(\'Text_\') >= 0 :\n')
    f.write('            if hasattr(Control,"GetEntry") == True:\n')
    f.write('                Control = Control.GetEntry()\n')
    f.write('            return Control.delete(tkinter.SEL_FIRST,tkinter.SEL_LAST)\n')
    f.write('    return None\n')

#写入设置当前值
def WriteSetCurrentValueFunction(f):
    #f.write(Language.G_Language[1232]+'\n')
    f.write('def SetCurrentValue(uiName,elementName,value):\n')
    f.write('    """'+Language.G_Language[1292]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find(\'RadioButton_\') >= 0 :\n') 
    f.write('            SetTKVariable(uiName,elementName,value)\n')
    f.write('        if elementName in G_UIGroupDictionary[uiName]:\n') 
    f.write('            GroupName = G_UIGroupDictionary[uiName][elementName]\n')
    f.write('            if GroupName.find("Group_") == 0:\n')
    f.write('                GroupText = GroupName[6:]\n') 
    f.write('                GroupID = int(GroupText)\n') 
    f.write('                OnRadioButtonClick(GroupID,value)\n') 
    f.write('        elif elementName.find(\'CheckButton_\') >= 0 :\n') 
    f.write('            event = ChartEvent(0,0,Control)\n')
    f.write('            if value != GetCurrentValue(uiName,elementName):\n')
    f.write('                OnCheckButtonClick(event,uiName,elementName)\n')
    f.write('            SetTKVariable(uiName,elementName,value)\n')
    f.write('        elif elementName.find(\'ComboBox_\') >= 0 :\n') 
    f.write('            Control.set(value)\n')
    f.write('        elif elementName.find(\'Scale_\') >= 0 :\n') 
    f.write('            Control.set(value)\n')
    f.write('        elif elementName.find(\'SpinBox_\') >= 0 :\n') 
    f.write('            SetTKVariable(uiName,elementName,value)\n')
    f.write('        elif elementName.find(\'SwitchButton_\') >= 0 :\n') 
    f.write('            Control.SetCurrValue(value)\n')
    f.write('        elif elementName.find(\'Slider_\') >= 0 :\n') 
    f.write('            Control.SetCurrValue(value)\n')
    f.write('        elif elementName.find(\'Slider_\') >= 0 :\n') 
    f.write('            Control.SetCurrValue(value)\n')
    f.write('        elif elementName.find(\'ProgressDial_\') >= 0 :\n') 
    f.write('            Control.SetCurrValue(value)\n')
    f.write('        elif elementName.find(\'ListBox_\') >= 0 :\n')
    f.write('            Control.selection_clear(0,tkinter.END)\n')  
    f.write('            itemCount = Control.size()\n')  
    f.write('            for itemIndex in range(0,itemCount):\n')   
    f.write('                itemText = Control.get(itemIndex)\n')   
    f.write('                if itemText == value:\n')   
    f.write('                    Control.select_set(itemIndex)\n')   
    f.write('                    break\n')   
    f.write('        elif elementName.find(\'Progress_\') >= 0 :\n') 
    f.write('            Control["value"] = value \n')
    f.write('def SetCurrentIndex(uiName,elementName,index):\n')
    f.write('    """'+Language.G_Language[1231]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find(\'ComboBox_\') >= 0 :\n') 
    f.write('            Control.current(index)\n')
    f.write('        elif elementName.find(\'ListBox_\') >= 0 :\n')
    f.write('            Control.selection_clear(0,tkinter.END)\n')   
    f.write('            Control.selection_set(index)\n')   
    f.write('        elif elementName.find(\'Navigation_\') >= 0 :\n')
    f.write('            Control.SetCurrentIndex(index)\n')   
#写入设置当前值
def WriteSetCurrentValueFunction_APP(f):
    #f.write(Language.G_Language[1232]+'\n')
    f.write('def SetCurrentValue(uiName,elementName,value):\n')
    f.write('    """'+Language.G_Language[1292]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find(\'RadioButton_\') >= 0 :\n') 
    f.write('            Control.SetRadioValue(value)\n')
    f.write('        elif elementName.find(\'CheckButton_\') >= 0 :\n') 
    f.write('            Control.SetChecked(value)\n')
    f.write('        elif elementName.find(\'ComboBox_\') >= 0 :\n') 
    f.write('            Control.SelectText(value)\n')
    f.write('        elif elementName.find(\'Scale_\') >= 0 :\n') 
    f.write('            Control.SetValue(value)\n')
    f.write('        elif elementName.find(\'Slider_\') >= 0 :\n') 
    f.write('            Control.SetCurrValue(value)\n')
    f.write('        elif elementName.find(\'SpinBox_\') >= 0 :\n') 
    f.write('            Control.SetValue(value)\n')
    f.write('        elif elementName.find(\'ListBox_\') >= 0 :\n')
    f.write('            Control.SelectText(value)\n')   
    f.write('        elif elementName.find(\'Progress_\') >= 0 :\n') 
    f.write('            Control.SetValue(value)\n')
    f.write('        elif elementName.find(\'ProgressDial_\') >= 0 :\n') 
    f.write('            Control.SetCurrValue(value)\n')
#弹出对话框
def WriteMessageBoxFunction_APP(f):
    #f.write(Language.G_Language[1221]+'\n')
    f.write('def MessageBox(text="",title="info",type="info"):\n')
    f.write('    """'+Language.G_Language[1221]+'"""\n')
    f.write('    GameLib.MessageBox(text)\n')

#写入设置滑动条
def WriteSetScaleFunction(f):
    f.write('def SetScale(uiName,elementName,minimum,maximum,tickinterval):\n')
    f.write('    """'+Language.G_Language[1293]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find(\'Scale_\') >= 0 :\n') 
    f.write('            Control.configure(from_=minimum)\n') 
    f.write('            Control.configure(to=maximum)\n') 
    f.write('            Control.configure(tickinterval=tickinterval)\n') 
    f.write('def SetSlider(uiName,elementName,minimum,maximum,value=0):\n')
    f.write('    """'+Language.G_Language[1108]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find(\'Slider_\') >= 0 :\n') 
    f.write('            Control.SetMinValue(minimum)\n') 
    f.write('            Control.SetMaxValue(maximum)\n') 
    f.write('            Control.SetCurrValue(value)\n') 
#写入设置滑动条
def WriteSetProgressFunction(f):
    f.write('def SetProgress(uiName,elementName,maximum,value=0):\n')
    f.write('    """'+Language.G_Language[1299]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find("ProgressDial_") >= 0:\n')
    f.write('            Control.SetMaxValue(maximum)\n')
    f.write('            Control.GetCurrValue(value)\n')
    f.write('        elif elementName.find("Progress_") >= 0:\n')
    f.write('            Control.configure(maximum=maximum)\n') 
    f.write('            Control.configure(value=value)\n') 

#写入设置滑动条
def WriteMoveFrameFunction(f):
    f.write('def MovingChildPageXViewOffset(uiName,elementName,step=1):\n')
    f.write('    """'+Language.G_Language[1805]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        elementName = elementName + "_Child"\n')
    f.write('        ChildPage = GetElement(uiName,elementName)\n')
    f.write('        if ChildPage:\n') 
    f.write('            ChildPage.xview("scroll",step,"units")\n')
    f.write('def MovingChildPageYViewOffset(uiName,elementName,step=1):\n')
    f.write('    """'+Language.G_Language[1806]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        elementName = elementName + "_Child"\n')
    f.write('        ChildPage = GetElement(uiName,elementName)\n')
    f.write('        if ChildPage:\n') 
    f.write('            ChildPage.yview("scroll",step,"units")\n')
    f.write('def MovingChildPageXViewTo(uiName,elementName,x=1.0):\n')
    f.write('    """'+Language.G_Language[1807]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        elementName = elementName + "_Child"\n')
    f.write('        ChildPage = GetElement(uiName,elementName)\n')
    f.write('        if ChildPage:\n') 
    f.write('            ChildPage.xview_moveto(x)\n')
    f.write('def MovingChildPageYViewTo(uiName,elementName,y=1.0):\n')
    f.write('    """'+Language.G_Language[1808]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        elementName = elementName + "_Child"\n')
    f.write('        ChildPage = GetElement(uiName,elementName)\n')
    f.write('        if ChildPage:\n') 
    f.write('            ChildPage.yview_moveto(y)\n')
#写入取得的日期
def WriteGetDateFunction(f):
    f.write('def GetDate(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1296]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        return Control.GetDate()\n') 
    f.write('    return None\n') 
    f.write('def SetDate(uiName,elementName,year,month,day):\n')
    f.write('    """'+Language.G_Language[1473]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        return Control.SetDate(year,month,day)\n') 
    f.write('    return None\n') 
#写入取得当前ListBox和ComboBox值列表的函数
def WriteGetValueListFunction(f):
    f.write('def GetValueList(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1958]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find(\'ComboBox_\') >= 0 :\n') 
    f.write('            return Control["values"]\n')
    f.write('        elif elementName.find(\'ListBox_\') >= 0 :\n')
    f.write('            listValueList = Control.get(0,tkinter.END)\n')   
    f.write('            return listValueList\n')   
    f.write('        elif elementName.find(\'SpinBox_\') >= 0 :\n') 
    f.write('            return Control["values"]\n')
    f.write('    return None\n')
    f.write('def GetSelectedValueList(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[9023]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find(\'ListBox_\') >= 0 :\n')
    f.write('            selectedIndexList = Control.curselection()\n')   
    f.write('            selectedValueList = []\n')   
    f.write('            for index in selectedIndexList:\n')   
    f.write('                itemText = Control.get(index)\n')   
    f.write('                selectedValueList.append(itemText)\n')   
    f.write('            return selectedValueList\n')   
    f.write('    return None\n')
#写入取得当前ListBox和ComboBox值列表的函数
def WriteGetValueListFunction_APP(f):
    f.write('def GetValueList(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1958]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find(\'ComboBox_\') >= 0 :\n') 
    f.write('            return Control.GetValueList()\n')
    f.write('        elif elementName.find(\'ListBox_\') >= 0 :\n')
    f.write('            return Control.GetValueList()\n') 
    f.write('        elif elementName.find(\'SpinBox_\') >= 0 :\n') 
    f.write('            return Control.GetValueList()\n')
    f.write('    return None\n')

#写入设置当前ListBox和ComboBox值列表的函数
def WriteSetValueListFunction(f):
    f.write('def SetValueList(uiName,elementName,valueList):\n')
    f.write('    """'+Language.G_Language[1959]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find(\'ComboBox_\') >= 0 :\n') 
    f.write('            Control["values"] = valueList\n')
    f.write('        elif elementName.find(\'ListBox_\') >= 0 :\n')
    f.write('            Control.delete(0,tkinter.END)\n')   
    f.write('            for value in valueList:\n')   
    f.write('                Control.insert(tkinter.END,value)\n')   
    f.write('        elif elementName.find(\'SpinBox_\') >= 0 :\n') 
    f.write('            Control["values"] = valueList\n')

#写入设置当前ListBox和ComboBox值列表的函数
def WriteSetValueListFunction_APP(f):
    f.write('def SetValueList(uiName,elementName,valueList):\n')
    f.write('    """'+Language.G_Language[1959]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find(\'ComboBox_\') >= 0 :\n') 
    f.write('            Control.SetValueList(valueList)\n')
    f.write('        elif elementName.find(\'ListBox_\') >= 0 :\n')
    f.write('            Control.SetValueList(valueList)\n')
    f.write('        elif elementName.find(\'SpinBox_\') >= 0 :\n') 
    f.write('            Control.SetValueList(valueList)\n')
#写入取得当前值
def WriteGetCurrentValueFunction(f):
    f.write('def OnListBoxSelect(event,uiName,widgetName):\n')
    f.write('    ListBox_Index = GetCurrentIndex(uiName,widgetName)\n')
    f.write('    if ListBox_Index < 0:\n')
    f.write('        if widgetName in  G_UIElementVariableArray[uiName]:\n') 
    f.write('            ListBox_Index = G_UIElementVariableArray[uiName][widgetName].get()\n')
    f.write('            SetCurrentIndex(uiName,widgetName,ListBox_Index)\n')
    f.write('def OnListBoxFocusOut(event,uiName,widgetName):\n')
    f.write('    ListBox_Index = GetCurrentIndex(uiName,widgetName)\n')
    f.write('    if ListBox_Index >= 0:\n')
    f.write('        G_UIElementVariableArray[uiName][widgetName].set(ListBox_Index)\n')
    #f.write(Language.G_Language[1232]+'\n')
    f.write('def GetCurrentValue(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1291]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find(\'RadioButton_\') >= 0 :\n') 
    f.write('            return GetTKVariable(uiName,elementName)\n')
    f.write('        elif elementName.find(\'CheckButton_\') >= 0 :\n') 
    f.write('            return GetTKVariable(uiName,elementName)\n')
    f.write('        elif elementName.find(\'ComboBox_\') >= 0 :\n') 
    f.write('            return Control.get()\n')
    f.write('        elif elementName.find(\'Scale_\') >= 0 :\n') 
    f.write('            return Control.get()\n')
    f.write('        elif elementName.find(\'SpinBox_\') >= 0 :\n') 
    f.write('            return Control.get()\n')
    f.write('        elif elementName.find(\'SwitchButton_\') >= 0 :\n') 
    f.write('            return Control.GetCurrValue()\n')
    f.write('        elif elementName.find(\'ProgressDial_\') >= 0 :\n') 
    f.write('            return Control.GetCurrValue()\n')
    f.write('        elif elementName.find(\'Slider_\') >= 0 :\n') 
    f.write('            return Control.GetCurrValue()\n')
    f.write('        elif elementName.find(\'ListBox_\') >= 0 :\n')
    f.write('            currIndex = Control.curselection()\n')   
    f.write('            if len(currIndex) > 0 and currIndex[0] >= 0:\n')   
    f.write('                return Control.get(currIndex[0])\n')   
    f.write('        elif elementName.find(\'Progress_\') >= 0 :\n') 
    f.write('            return Control["value"]\n')
    f.write('        elif elementName.find(\'Navigation_\') >= 0 :\n') 
    f.write('            return Control.GetCurrentItemValue()\n')
    f.write('    return -1\n')
    f.write('def GetCurrentIndex(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1232]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find(\'ComboBox_\') >= 0 :\n') 
    f.write('            return Control.current()\n')
    f.write('        elif elementName.find(\'ListBox_\') >= 0 :\n')
    f.write('            currIndex = Control.curselection()\n')   
    f.write('            if len(currIndex) > 0 and currIndex[0] >= 0:\n')   
    f.write('                return currIndex[0]\n')   
    f.write('        if elementName.find(\'Navigation_\') >= 0 :\n') 
    f.write('            return Control.GetCurrentIndex()\n')
    f.write('    return -1\n')

    
#写入取得当前值
def WriteGetCurrentValueFunction_APP(f):
    #f.write(Language.G_Language[1232]+'\n')
    f.write('def GetCurrentValue(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1291]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find(\'RadioButton_\') >= 0 :\n') 
    f.write('            return Control.GetRadioValue()\n')
    f.write('        elif elementName.find(\'CheckButton_\') >= 0 :\n') 
    f.write('            return Control.IsChecked()\n')
    f.write('        elif elementName.find(\'ComboBox_\') >= 0 :\n') 
    f.write('            return Control.GetSelectedText()\n')
    f.write('        elif elementName.find(\'Scale_\') >= 0 :\n') 
    f.write('            return Control.GetValue()\n')
    f.write('        elif elementName.find(\'Slider_\') >= 0 :\n') 
    f.write('            return Control.GetCurrValue()\n')
    f.write('        elif elementName.find(\'SpinBox_\') >= 0 :\n') 
    f.write('            return Control.GetValue()\n')
    f.write('        elif elementName.find(\'ListBox_\') >= 0 :\n')
    f.write('            return Control.GetSelectedText()\n')   
    f.write('        elif elementName.find(\'Progress_\') >= 0 :\n') 
    f.write('            return Control.GetValue()\n')
    f.write('        elif elementName.find(\'ProgressDial_\') >= 0 :\n') 
    f.write('            return Control.GetCurrValue()\n')
    f.write('        elif elementName.find(\'SwitchButton_\') >= 0 :\n') 
    f.write('            return Control.GetCurrValue()\n')
    f.write('        elif elementName.find(\'ProgressDial_\') >= 0 :\n') 
    f.write('            return Control.GetCurrValue()\n')
    f.write('    return -1\n')
    f.write('def GetCurrentIndex(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1314]+'"""\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if elementName.find(\'ComboBox_\') >= 0 :\n') 
    f.write('            return Control.GetSelectedIndex()\n')
    f.write('        elif elementName.find(\'ListBox_\') >= 0 :\n')
    f.write('            return Control.GetSelectedIndex()\n')   
    f.write('    return -1\n')
#写入更新到文字
def WriteInitFunction(f,HasCanvas,UseDataBase):
    #f.write(Language.G_Language[1215]+'\n')
    f.write('def InitElementData(uiName):\n')
    f.write('    """'+Language.G_Language[1215]+'"""\n')
    f.write('    global G_UIElementUserDataArray\n')
    f.write('    global G_UIElementLayerDictionary\n')
    f.write('    global G_ResourcesFileList\n')
    f.write('    global G_UIRootSizeDictionary\n')
    f.write('    global G_UIRootStateDictionary\n')
    f.write('    global G_RootSize\n')
    f.write('    global G_UIScale\n')
    f.write('    global G_WindowDraggable\n')
    f.write('    if uiName in G_UIElementUserDataArray:\n')
    f.write('        for elementName in G_UIElementUserDataArray[uiName].keys():\n')
    f.write('            for EBData in G_UIElementUserDataArray[uiName][elementName]:\n')
    f.write('                if EBData[3] == 1:\n')
    f.write('                    SetText(uiName,elementName,EBData[2],False)\n')
        
    if HasCanvas:
        f.write('    UIScale = G_UIScale\n')
        f.write('    if uiName in G_UIRootSizeDictionary.keys():\n')
        f.write('        if "scale" in G_UIRootSizeDictionary[uiName].keys():\n')
        f.write('            UIScale = G_UIRootSizeDictionary[uiName]["scale"]\n')
        f.write('    LoadCanvasRecord(uiName,UIScale)\n')
    if UseDataBase:
        f.write('    for elementName in G_UIElementDictionary[uiName]:\n')
        f.write('        if elementName.find("ListView_") >= 0 and elementName.find("Scroll") < 0:\n')
        f.write('             LoadDynamicColumn(uiName,elementName)\n')
        
    f.write('    uiClass = GetElement(uiName,"UIClass")\n')
    f.write('    if uiClass:\n')
    f.write('        Form_1 = GetElement(uiName,"Form_1")\n')
    f.write('        if Form_1:\n')
    f.write('            Form_1_Width = Form_1.winfo_width()\n')
    f.write('            Form_1_Pack = Form_1.pack_info()\n')
    f.write('            if Form_1_Width == 1 or len(Form_1_Pack) > 0:\n')
    f.write('                if uiName in G_UIRootSizeDictionary.keys() and "width" in G_UIRootSizeDictionary[uiName].keys():\n')
    f.write('                    Form_1_Width = G_UIRootSizeDictionary[uiName]["width"]\n')
    f.write('                elif G_RootSize:\n')
    f.write('                    Form_1_Width = G_RootSize[0]\n')
    f.write('            Form_1_Height = Form_1.winfo_height()\n')
    f.write('            if Form_1_Height == 1 or len(Form_1_Pack) > 0:\n')
    f.write('                if uiName in G_UIRootSizeDictionary.keys() and "height" in G_UIRootSizeDictionary[uiName].keys():\n')
    f.write('                    Form_1_Height = G_UIRootSizeDictionary[uiName]["height"]\n')
    f.write('                elif G_RootSize:\n')
    f.write('                    Form_1_Height = G_RootSize[1]\n')
    f.write('            event = ChartEvent(Form_1_Width,Form_1_Height,Form_1)\n')
    f.write('            if hasattr(uiClass,"Configure") == True:\n')
    f.write('                uiClass.Configure(event)\n')
    f.write('        if G_WindowDraggable:\n')
    f.write('            uiRoot = GetElement(uiName,"root")\n')
    f.write('            if uiRoot is G_WindowDraggable.GetWidget():\n')
    f.write('                for formName in uiRoot.children.keys():\n')
    f.write('                    formwidget = uiRoot.children[formName]\n')
    f.write("                    formwidget.bind('<ButtonPress-1>',G_WindowDraggable.StartDrag)\n")
    f.write("                    formwidget.bind('<ButtonRelease-1>',G_WindowDraggable.StopDrag)\n")
    f.write("                    formwidget.bind('<B1-Motion>',G_WindowDraggable.MoveDragPos)\n")
    f.write('                    for childName in formwidget.children.keys():\n')
    f.write('                        childwidget = formwidget.children[childName]\n')
    f.write('                        if childwidget.winfo_class() == "Label" or childwidget.winfo_class() == "Labelframe" or childwidget.winfo_class() == "Frame":\n')
    f.write('                            childUiName,childElementName = GetElementName(childwidget,False)\n')
    f.write('                            if childElementName == None or childElementName.find("LabelButton_") >= 0:\n')
    f.write("                                continue\n")
    f.write("                            bindingFunc = childwidget.bind('<ButtonPress-1>')\n")
    f.write("                            if bindingFunc:\n")                       
    f.write("                                continue\n")
    f.write("                            childwidget.bind('<ButtonPress-1>',G_WindowDraggable.StartDrag)\n")
    f.write("                            childwidget.bind('<ButtonRelease-1>',G_WindowDraggable.StopDrag)\n")
    f.write("                            childwidget.bind('<B1-Motion>',G_WindowDraggable.MoveDragPos)\n")
    f.write('    for elementName in G_UIElementLayerDictionary[uiName]:\n')
    f.write('        Control = GetElement(uiName,elementName)\n')
    f.write('        direction = G_UIElementLayerDictionary[uiName][elementName]\n')
    f.write("        if direction == 'lift':\n")
    f.write('            Control.lift()\n')
    f.write('        else:\n')
    f.write('            Control.lower()\n')
    f.write('    ResizeAllChart(uiName,True)\n')
    f.write('    #显示界面\n')
    f.write("    if uiName in G_UIRootStateDictionary.keys() and G_UIRootStateDictionary[uiName] == 'deiconify':\n")
    f.write('        return\n')
    f.write('    else:\n')
    f.write('        RestoreUI(uiName)\n')
    #f.write(Language.G_Language[1216]+'\n')
    f.write('def InitElementStyle(uiName,Style):\n')
    f.write('    """'+Language.G_Language[1216]+'"""\n')
    f.write('    StyleArray = ReadStyleFile(Style+".py")\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        Root = GetElement(uiName,\'root\')\n')
    f.write('        TFormKey = \'.TForm\'\n')
    f.write('        if TFormKey in StyleArray:\n')
    f.write('            if \'background\' in StyleArray[TFormKey]:\n')
    f.write('                Root[\'background\'] = StyleArray[TFormKey][\'background\']\n')
    f.write('        for elementName in G_UIElementDictionary[uiName].keys():\n')
    f.write('            Widget = G_UIElementDictionary[uiName][elementName]\n')
    f.write('            if elementName != "UIClass" and elementName != "root":\n')
    f.write('                try:\n')
    f.write('                    OldWidget = Widget\n')
    f.write('                    if hasattr(Widget,"GetWidget") == True:\n')
    f.write('                        Widget = Widget.GetWidget()\n')
    f.write('                    if  Widget.winfo_exists() == 1:\n')
    f.write('                        WinClass = Widget.winfo_class()\n')
    f.write('                        StyleName = ".T"+WinClass\n')
    f.write('                        if StyleName in StyleArray.keys():\n')
    f.write("                            for attribute in StyleArray[StyleName].keys():\n")
    f.write('                                if attribute == "relief":\n')
    f.write('                                    continue\n')
    f.write('                                if attribute == "highlightthickness":\n')
    f.write('                                    continue\n')
    f.write('                                if attribute == "bd":\n')
    f.write('                                    continue\n')
    f.write('                                if attribute == "background" and elementName != "Form_1":\n')
    f.write('                                    if hasattr(OldWidget,"SetBGColor") == True:\n')
    f.write('                                        OldWidget.SetBGColor(StyleArray[StyleName][attribute])\n')
    f.write('                                    if Widget["background"] == "#EFEFEF":\n')
    f.write('                                        Widget[attribute] = StyleArray[StyleName][attribute]\n')
    f.write('                                    else:\n')
    f.write('                                        continue\n')
    f.write('                                else:\n')
    f.write('                                    if elementName.find("_LabelButton_") > 0:\n')
    f.write('                                        continue\n')
    f.write('                                    Widget[attribute] = StyleArray[StyleName][attribute]\n')
    f.write('                                    if attribute == "foreground" :\n')
    f.write('                                        if hasattr(OldWidget,"SetFGColor") == True:\n')
    f.write('                                            OldWidget.SetFGColor(StyleArray[StyleName][attribute])\n')
    f.write('                except Exception as ex:\n')
    f.write('                    errorText = str(ex)\n')
    f.write('                    if errorText.find("no attribute \'winfo_exists\'") < 0:\n')
    f.write('                        print(ex)\n')

#写入更新到文字
def WriteInitFunction_Mobile(f,HasCanvas,UseDataBase):
    #f.write(Language.G_Language[1215]+'\n')
    f.write('def InitElementData(uiName):\n')
    f.write('    """'+Language.G_Language[1215]+'"""\n')
    
    f.write('    global G_UIElementUserDataArray\n')
    f.write('    if uiName in G_UIElementUserDataArray:\n')
    f.write('        for elementName in G_UIElementUserDataArray[uiName].keys():\n')
    f.write('            for EBData in G_UIElementUserDataArray[uiName][elementName]:\n')
    f.write('                if EBData[3] == 1:\n')
    f.write('                    SetText(uiName,elementName,EBData[2],False)\n')
    if  HasCanvas:
        f.write('    LoadCanvasRecord(uiName)\n')
    if  UseDataBase:
        f.write('    for elementName in G_UIElementDictionary[uiName]:\n')
        f.write('        if elementName.find("ListView_") >= 0:\n')
        f.write('             LoadDynamicColumn(uiName,elementName)\n')

def WriteCallUIDialog_Mobile(f):
    f.write('def GoToUIDialog(uiName,targetUIName,params=None):\n')
    f.write('    """'+Language.G_Language[1343]+'"""\n')
    f.write('    root = GetElement(uiName,\'root\')\n')
    f.write('    Form1 = GetElement(uiName,\'Form_1\')\n')
    f.write('    layer = root.GetSceneInstance().GetLayer("UI")\n')
    f.write('    import importlib\n')
    f.write('    from   importlib import import_module\n')
    f.write('    try:\n')
    f.write('        importModule = importlib.import_module(targetUIName)\n')
    f.write('        importModule = importlib.reload(importModule)\n')
    f.write('        if hasattr(importModule,"Fun") == True:\n')
    f.write('            importModule.Fun.G_ExeDir = G_ExeDir\n')
    f.write('            importModule.Fun.G_ResDir = G_ResDir\n')
    f.write('            if hasattr(importModule,"EXUIControl") == True:\n')
    f.write('                importModule.EXUIControl.G_ExeDir = G_ExeDir\n')
    f.write('                importModule.EXUIControl.G_ResDir = G_ResDir\n')
    f.write('        if hasattr(importModule,targetUIName) == True:\n')
    f.write('            uiClass = getattr(importModule,targetUIName)\n')
    f.write('            newUI = uiClass()\n')
    f.write('            layer.AddGameNode(newUI)\n')
    f.write('            layer.DelGameNode(Form1.GetInstanceID())\n')
    f.write('    except Exception as ex:\n')
    f.write('        MessageBox(str(ex))\n')
    f.write("def CallUIDialog(targetUIName,topmost = 1,toolwindow = 1,grab_set = 1,wait_window = 1,animation='',params=None):\n")
    f.write('    """'+Language.G_Language[1297]+'"""\n')
    f.write('    GameLib.PopupUI(targetUIName)\n')

    f.write('def LoadUIDialog(uiName,elementName,targetUIName,params=None,ignoreSameUI=True):\n')
    f.write('    """'+Language.G_Language[1345]+'"""\n')
    f.write('    targetUI = GetElement(uiName,elementName)\n')
    f.write('    if targetUI:\n')
    f.write('        currUIDialog = GetUserData(uiName,elementName,"CurrUI")\n')
    f.write('        lastLoadTime = GetUserData(uiName,elementName,"LoadTime")\n')
    f.write('        if currUIDialog:\n')
    f.write('            targetUI.RemoveChild(currUIDialog)\n')
    f.write('        import importlib\n')
    f.write('        from   importlib import import_module\n')
    f.write('        try:\n')
    f.write('            targetUIName = targetUIName.replace(".py","")\n')
    f.write('            importModule = importlib.import_module(targetUIName)\n')
    f.write('            importModule = importlib.reload(importModule)\n')
    f.write('            if hasattr(importModule,"Fun") == True:\n')
    f.write('                importModule.Fun.G_ExeDir = G_ExeDir\n')
    f.write('                importModule.Fun.G_ResDir = G_ResDir\n')
    f.write('                if hasattr(importModule,"EXUIControl") == True:\n')
    f.write('                    importModule.EXUIControl.G_ExeDir = G_ExeDir\n')
    f.write('                    importModule.EXUIControl.G_ResDir = G_ResDir\n')
    f.write('            if hasattr(importModule,targetUIName) == True:\n')
    f.write('                uiClass = getattr(importModule,targetUIName)\n')
    f.write('                newUI = uiClass()\n')
    f.write('                newUI.OnLoad(targetUI.GetSceneInstance())\n')
    f.write('                x,y = targetUI.GetWXY()\n')
    f.write('                width = targetUI.GetWidth()\n')
    f.write('                height = targetUI.GetHeight()\n')
    f.write('                newUI.SetXY(x,y)\n')  
    f.write('                newUI.SetWidth(width)\n')  
    f.write('                newUI.SetHeight(height)\n')  
    f.write('                targetUI.AddChild(newUI)\n')
    f.write('        except Exception as ex:\n')
    f.write('            MessageBox(str(ex))\n')


def WriteCallUIDialog_HTML(f):
    f.write('def GoToUIDialog(uiName,targetUIName,params=None):\n')
    f.write('    """'+Language.G_Language[1343]+'"""\n')
    f.write('    global G_TargetUIName\n')
    f.write('    G_TargetUIName = targetUIName\n')
    
    f.write("def CallUIDialog(targetUIName,topmost = 1,toolwindow = 1,grab_set = 1,wait_window = 1,animation='',params=None):\n")
    f.write('    """'+Language.G_Language[1297]+'"""\n')

    f.write('def LoadUIDialog(uiName,elementName,targetUIName,params=None,ignoreSameUI=True):\n')
    f.write('    """'+Language.G_Language[1345]+'"""\n')

#取得当前界面的所有数据字典
def WriteGetUIDataDictionaryFunction(f):
    #f.write(Language.G_Language[1217]+'\n')
    f.write('def GetUIDataDictionary(uiName):\n')
    f.write('    """'+Language.G_Language[1217]+'"""\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_UIInputDataArray\n')
    f.write('    global G_UIElementVariableArray\n')
    f.write('    if uiName not in G_UIElementDictionary:\n')
    f.write('        if "UIClass" in G_UIInputDataArray.keys():\n')
    f.write('            if uiName == G_UIInputDataArray["UIClass"]:\n')
    f.write('                return G_UIInputDataArray\n')
    f.write('    else:\n')
    f.write('        G_UIInputDataArray.clear()\n')
    f.write('        for elementName in G_UIElementDictionary[uiName].keys():\n')
    f.write('            Widget = G_UIElementDictionary[uiName][elementName]\n')
    f.write('            widgetAliasName = elementName\n')
    f.write('            if uiName in G_UIElementAliasDictionary.keys():\n')
    f.write('                for aliasName in  G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('                    if G_UIElementAliasDictionary[uiName][aliasName] == elementName:\n')
    f.write('                        widgetAliasName = aliasName\n')
    f.write('                        break\n')
    f.write('            if elementName == "UIClass":\n')
    f.write('                G_UIInputDataArray[elementName] = uiName\n')
    f.write('            else:\n')
    f.write("                G_UIInputDataArray[widgetAliasName] = ''\n")
    f.write('            Widget = G_UIElementDictionary[uiName][elementName]\n')
    f.write('            if elementName.find(\'Label_\') >= 0:\n')
    f.write('                text = Widget.cget(\'text\')\n')
    f.write('                G_UIInputDataArray[widgetAliasName] = text\n')  
    f.write('            elif elementName.find(\'Text_\') >= 0:\n')
    f.write('                if elementName.find(\'Scroll\') >= 0:\n')
    f.write('                    continue\n')
    f.write('                if hasattr(Widget,"GetEntry") == True:\n')
    f.write('                    Widget = Widget.GetEntry()\n')
    f.write('                text = Widget.get(\'0.0\', tkinter.END)\n')
    f.write('                G_UIInputDataArray[widgetAliasName] = text\n')  
    f.write('            elif elementName.find(\'Entry_\') >= 0:\n')  
    f.write('                if elementName in  G_UIElementVariableArray[uiName]:\n')  
    f.write('                    text = G_UIElementVariableArray[uiName][elementName].get()\n')  
    f.write('                else:\n')  
    f.write('                    text = Widget.GetText()\n')  
    f.write('                G_UIInputDataArray[widgetAliasName] = text\n')  
    f.write('            elif elementName.find(\'RadioButton_\') >= 0 :\n') 
    f.write('                value = GetTKVariable(uiName,elementName)\n')  
    f.write('                G_UIInputDataArray[widgetAliasName] = value\n')  
    f.write('            elif elementName.find(\'CheckButton_\') >= 0 :\n') 
    f.write('                value = GetTKVariable(uiName,elementName)\n')  
    f.write('                G_UIInputDataArray[widgetAliasName] = value\n')  
    f.write('            elif elementName.find(\'Spinbox_\') >= 0:\n')
    f.write('                text = Widget.get()\n')  
    f.write('                G_UIInputDataArray[widgetAliasName] = text\n')  
    f.write('            elif elementName.find(\'ComboBox_\') >= 0:\n')
    f.write('                text = Widget.get()\n')  
    f.write('                G_UIInputDataArray[widgetAliasName] = text\n')  
    f.write('            elif elementName.find(\'Scale_\') >= 0:\n')
    f.write('                value = Widget.get()\n')  
    f.write('                G_UIInputDataArray[widgetAliasName] = value\n')  
    f.write('            elif elementName.find(\'Progress_\') >= 0 :\n') 
    f.write('                value = Widget["value"]\n')  
    f.write('                G_UIInputDataArray[widgetAliasName] = value\n')  
    f.write('            elif elementName.find(\'ListBox_\') >= 0:\n')
    f.write('                if elementName.find(\'Scroll\') >= 0:\n')
    f.write('                    continue\n')
    f.write('                currIndex = Widget.curselection()\n')
    f.write('                if len(currIndex) > 0 and currIndex[0] >= 0:\n')
    f.write('                    text = Widget.get(currIndex[0])\n')
    f.write('                    G_UIInputDataArray[widgetAliasName] = text\n')  
    f.write('    if uiName in G_UIElementVariableArray:\n')
    f.write('        for elementName in G_UIElementVariableArray[uiName].keys():\n')  
    f.write('            if elementName.find(\'Group_\') >= 0:\n')  
    f.write('                widgetAliasName = elementName\n')
    f.write('                if uiName in G_UIElementAliasDictionary.keys():\n')
    f.write('                    for aliasName in  G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('                        if G_UIElementAliasDictionary[uiName][aliasName] == elementName:\n')
    f.write('                            widgetAliasName = aliasName\n')
    f.write('                            break\n')
    f.write('                ElementIntValue = G_UIElementVariableArray[uiName][elementName].get()\n')  
    f.write('                G_UIInputDataArray[widgetAliasName] = ElementIntValue\n')  
    f.write('    return G_UIInputDataArray\n')  
#设置全屏
def WriteCallUIDialog(f):
    f.write('def DestoryChild(frame,destroy=True):\n')
    f.write('    global G_UIRootIDDictionary\n')
    f.write('    global G_UIRootSizeDictionary\n')
    f.write('    if frame:\n')
    f.write('        for child in frame.winfo_children():\n')
    f.write('            DestoryChild(child)\n')
    # f.write('            for className in G_UIRootIDDictionary.keys():\n')
    # f.write('                if G_UIRootIDDictionary[className] is child:\n')
    # f.write('                    DestroyUI(className,-1)\n')
    # f.write('                    G_UIRootIDDictionary.pop(className)\n')
    # f.write('                    break\n')
    f.write('            uiName,elementName = GetElementName(child,False)\n')
    f.write('            if uiName in G_UIElementDictionary.keys():\n')
    f.write('                if elementName in G_UIElementDictionary[uiName]:\n')
    f.write('                    G_UIElementDictionary[uiName].pop(elementName)\n')
    f.write('            if uiName in G_UIElementPlaceDictionary.keys():\n')
    f.write('                if elementName in G_UIElementPlaceDictionary[uiName]:\n')
    f.write('                    G_UIElementPlaceDictionary[uiName].pop(elementName)\n')
    f.write('            if uiName in G_UIElementAliasDictionary.keys():\n')
    f.write('                for aliasName in  G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('                    if G_UIElementAliasDictionary[uiName][aliasName] == elementName:\n')
    f.write('                        G_UIElementAliasDictionary[uiName].pop(aliasName)\n')
    f.write('                        break\n')
    f.write('            if uiName in G_UIElementRoundRectangleDictionary.keys():\n')
    f.write('                if elementName in G_UIElementRoundRectangleDictionary[uiName]:\n')
    f.write('                    G_UIElementRoundRectangleDictionary[uiName].pop(elementName)\n')
    f.write('            if destroy:\n')
    f.write('                child.destroy()\n')
    f.write('        for className in G_UIRootIDDictionary.keys():\n')
    f.write('            if G_UIRootIDDictionary[className] is frame:\n')
    f.write('                G_UIRootIDDictionary.pop(className)\n')
    f.write('                G_UIRootSizeDictionary.pop(className)\n')
    f.write('                G_UIElementDictionary.pop(className)\n')
    f.write('                G_UICommandDictionary.pop(className)\n')
    f.write('                G_UIElementAliasDictionary.pop(className)\n')
    f.write('                G_UIElementPlaceDictionary.pop(className)\n')
    f.write('                G_UIElementRoundRectangleDictionary.pop(className)\n')
    f.write('                G_UIGroupDictionary.pop(className)\n')
    f.write('                G_UIStyleDictionary.pop(className)\n')
    f.write('                G_CanvasSizeDictionary.pop(className)\n')
    f.write('                G_CanvasShapeDictionary.pop(className)\n')
    f.write('                G_CanvasParamDictionary.pop(className)\n')
    f.write('                G_CanvasFontDictionary.pop(className)\n')
    f.write('                G_CanvasImageDictionary.pop(className)\n')
    f.write('                G_CanvasEventDictionary.pop(className)\n')
    f.write('                G_CanvasPointDictionary.pop(className)\n')
    f.write('                G_UIElementIconDictionary.pop(className)\n')
    f.write('                break\n')
    f.write('def GoToUIDialog(uiName,targetUIName,params=None):\n')
    f.write('    """'+Language.G_Language[1343]+'"""\n')
    f.write("    global G_ExeDir\n")
    f.write("    global G_ResDir\n")
    # f.write("    import tkinter.messagebox\n")
    # f.write("    tkinter.messagebox.showinfo(G_ExeDir,G_ResDir)\n")
    f.write('    root = GetElement(uiName,\'root\')\n')
    f.write('    try:\n')
    f.write('        parentinfo = root.winfo_parent()\n')
    f.write('        while parentinfo:\n')
    f.write('            root = root._nametowidget(parentinfo)\n')
    f.write('            parentinfo = root.winfo_parent()\n')
    f.write('        for childName in root.children.keys():\n')
    f.write('            child = root.children[childName]\n')
    f.write('            DestoryChild(child,False)\n')
    f.write('            child.pack_forget()\n')
    f.write('    except:\n')
    f.write('        try:\n')
    f.write('            Form1 = GetElement(uiName,\'Form_1\')\n')
    f.write('            if Form1:\n')
    f.write('                Form1.pack_forget()\n')
    f.write('        except:\n')
    f.write('            pass\n')
    f.write('    import importlib\n')
    f.write('    from   importlib import import_module\n')
    f.write('    try:\n')
    f.write('        importModule = importlib.import_module("Compile_"+targetUIName)\n')
    f.write('        importModule = importlib.reload(importModule)\n')
    f.write('        if hasattr(importModule,"Fun") == True:\n')
    f.write('            importModule.Fun.G_ExeDir = G_ExeDir\n')
    f.write('            importModule.Fun.G_ResDir = G_ResDir\n')
    f.write('            if hasattr(importModule,"EXUIControl") == True:\n')
    f.write('                importModule.EXUIControl.G_ExeDir = G_ExeDir\n')
    f.write('                importModule.EXUIControl.G_ResDir = G_ResDir\n')
    f.write('        if hasattr(importModule,targetUIName) == True:\n')
    f.write('            uiClass = getattr(importModule,targetUIName)\n')
    f.write('            if params is None:\n')
    f.write('                MyDlg = uiClass(root)\n')
    f.write('            else:\n')
    f.write('                try:\n')
    f.write('                    MyDlg = uiClass(root,True,params)\n')
    f.write('                except Exception as ex:\n')
    f.write('                    MyDlg = uiClass(root,True)\n')
    f.write('            if hasattr(importModule,"Fun") == True:\n')
    f.write('                try :\n')
    f.write('                    user32 = ctypes.windll.user32\n')
    f.write('                    sw = user32.GetSystemMetrics(0)\n')
    f.write('                    sh = user32.GetSystemMetrics(1)\n')
    f.write('                    zw,zh = MyDlg.GetRootSize()\n')
    f.write('                    zx = int((sw-zw)/2) \n')
    f.write('                    zy = int((sh-zh)/2)\n')
    f.write("                    root.geometry('%dx%d+%d+%d'%(zw,zh,zx,zy))\n")
    f.write('                except ImportError:\n')
    f.write('                    pass\n')
    f.write('    except ModuleNotFoundError:\n')
    f.write('        try:\n')
    f.write('            importModule = importlib.import_module(targetUIName)\n')
    f.write('            importModule = importlib.reload(importModule)\n')
    f.write('            if hasattr(importModule,"Fun") == True:\n')
    f.write('                importModule.Fun.G_ExeDir = G_ExeDir\n')
    f.write('                importModule.Fun.G_ResDir = G_ResDir\n')
    f.write('                if hasattr(importModule,"EXUIControl") == True:\n')
    f.write('                    importModule.EXUIControl.G_ExeDir = G_ExeDir\n')
    f.write('                    importModule.EXUIControl.G_ResDir = G_ResDir\n')
    f.write('            if hasattr(importModule,targetUIName) == True:\n')
    f.write('                uiClass = getattr(importModule,targetUIName)\n')
    f.write('                if params is None:\n')
    f.write('                    MyDlg = uiClass(root)\n')
    f.write('                else:\n')
    f.write('                    try:\n')
    f.write('                        MyDlg = uiClass(root,True,params)\n')
    f.write('                    except Exception as ex:\n')
    f.write('                        MyDlg = uiClass(root,True)\n')
    f.write('                if hasattr(importModule,"Fun") == True:\n')
    f.write('                    try :\n')
    f.write('                        user32 = ctypes.windll.user32\n')
    f.write('                        sw = user32.GetSystemMetrics(0)\n')
    f.write('                        sh = user32.GetSystemMetrics(1)\n')
    f.write('                        zw,zh = MyDlg.GetRootSize()\n')
    f.write('                        zx = int((sw-zw)/2) \n')
    f.write('                        zy = int((sh-zh)/2)\n')
    f.write("                        root.geometry('%dx%d+%d+%d'%(zw,zh,zx,zy))\n")
    f.write('                    except ImportError:\n')
    f.write('                        pass\n')
    f.write('        except Exception as ex:\n')
    f.write('            MessageBox(str(ex))\n')
    f.write('    except Exception as ex:\n')
    f.write('        MessageBox(str(ex))\n')
    f.write("def PlayCallUIDialogAction(topLevel,uiInstance,animation='zoomin'):\n")
    f.write('    def FadeIn(topLevel,uiInstance,alpha):\n')
    f.write('        try :\n')
    f.write('            hwnd = windll.user32.GetParent(topLevel.winfo_id())\n')
    f.write('            _winlib = ctypes.windll.user32\n')
    f.write('            style = _winlib.GetWindowLongA( hwnd, 0xffffffec ) | 0x00080000\n')
    f.write('            _winlib.SetWindowLongA( hwnd, 0xffffffec, style )\n')
    f.write('            _winlib.SetLayeredWindowAttributes( hwnd, 0, alpha+1, 2 )\n')
    f.write('            alpha = alpha + 1\n')
    f.write('        except ImportError:\n')
    f.write('            pass\n')
    f.write('        if alpha < 255:\n')
    f.write('            topLevel.after(1,lambda:FadeIn(topLevel = topLevel,uiInstance = uiInstance,alpha = alpha))\n')
    f.write('        else:\n')
    f.write('            print("结束")\n')
    f.write('    def ZoomIn(topLevel,uiInstance,zoom,width,height):\n')
    f.write('        try :\n')
    f.write('            user32 = ctypes.windll.user32\n')
    f.write('            sw = user32.GetSystemMetrics(0)\n')
    f.write('            sh = user32.GetSystemMetrics(1)\n')
    f.write('            zw = int(width * zoom)\n')
    f.write('            zh = int(height * zoom)\n')
    f.write('            zx = int((sw-zw)/2) \n')
    f.write('            zy = int((sh-zh)/2)\n')
    f.write("            topLevel.geometry('%dx%d+%d+%d'%(zw,zh,zx,zy))\n")
    f.write('            zoom = zoom + 0.01\n')
    f.write('        except ImportError:\n')
    f.write('            pass\n')
    f.write('        if zoom < 1.0:\n')
    f.write('            topLevel.after(1,lambda:ZoomIn(topLevel = topLevel,uiInstance = uiInstance,zoom = zoom ,width=width,height=height))\n')
    f.write('        else:\n')
    f.write('            print("结束")\n')
    f.write('    animation = animation.lower()\n')
    f.write('    if animation == "fadein":\n')
    f.write('        try :\n')
    f.write('            hwnd = windll.user32.GetParent(topLevel.winfo_id())\n')
    f.write('            _winlib = ctypes.windll.user32\n')
    f.write('            style = _winlib.GetWindowLongA( hwnd, 0xffffffec ) | 0x00080000\n')
    f.write('            _winlib.SetWindowLongA( hwnd, 0xffffffec, style )\n')
    f.write('            _winlib.SetLayeredWindowAttributes( hwnd, 0, 0, 2 )\n')
    f.write('            topLevel.deiconify()\n')
    f.write('            topLevel.after(1,lambda:FadeIn(topLevel = topLevel,uiInstance = uiInstance,alpha = 0))\n')
    f.write('        except ImportError:\n')
    f.write('            pass\n')
    f.write('    elif animation == "zoomin":\n')
    f.write('        try :\n')
    f.write('            sw = windll.user32.GetSystemMetrics(0)\n')
    f.write('            sh = windll.user32.GetSystemMetrics(1)\n')
    f.write("            topLevel.geometry('%dx%d+%d+%d'%(0,0,int(sw/2),int(sh/2)))\n")
    f.write('            form1_width,form1_height = uiInstance.GetRootSize()\n')
    f.write('            topLevel.deiconify()\n')
    f.write('            topLevel.after(1,lambda:ZoomIn(topLevel = topLevel,uiInstance = uiInstance,zoom = 0.0,width=form1_width,height=form1_height))\n')
    f.write('        except ImportError:\n')
    f.write('            pass\n')
    f.write("def CallUIDialog(uiName,topmost = 1,toolwindow = 1,grab_set = 1,wait_window = 1,animation='',params=None):\n")
    f.write('    """'+Language.G_Language[1297]+'"""\n')
    f.write("    global G_ExeDir\n")
    f.write("    global G_ResDir\n")
    f.write("    global G_TopDialog\n")
    f.write('    """'+Language.G_Language[9365]+'"""\n')
    f.write("    if isinstance(wait_window,str) == True and params is None:\n")
    f.write('        params = animation\n')
    f.write('        animation = wait_window\n')
    f.write('        wait_window = 1\n')
    f.write("    import importlib\n")
    f.write('    from   importlib import import_module\n')
    f.write('    try:\n')
    f.write('        importModule = importlib.import_module("Compile_"+uiName)\n')
    f.write('        importModule = importlib.reload(importModule)\n')
    f.write('        if hasattr(importModule,"Fun") == True:\n')
    f.write('            importModule.Fun.G_ExeDir = G_ExeDir\n')
    f.write('            importModule.Fun.G_ResDir = G_ResDir\n')
    f.write('            if hasattr(importModule,"EXUIControl") == True:\n')
    f.write('                importModule.EXUIControl.G_ExeDir = G_ExeDir\n')
    f.write('                importModule.EXUIControl.G_ResDir = G_ResDir\n')
    f.write('        if hasattr(importModule,uiName) == True and hasattr(importModule,"Fun") == True :\n')
    f.write('            uiClass = getattr(importModule,uiName)\n')
    f.write('            funClass = getattr(importModule,"Fun")\n')
    f.write('            topLevel = tkinter.Toplevel()\n')
    f.write('            topLevel.withdraw()\n')
    f.write('            topLevel.attributes("-toolwindow", toolwindow)\n')
    f.write('            topLevel.wm_attributes("-topmost", topmost)\n')
    f.write('            G_TopDialog = topLevel\n')
    f.write('            if grab_set == 1:\n')
    f.write('                topLevel.grab_set()\n')
    f.write('            if params is None:\n')
    f.write('                uiInstance = uiClass(topLevel,True)\n')
    f.write('            else:\n')
    f.write('                try:\n')
    f.write('                    uiInstance = uiClass(topLevel,True,params)\n')
    f.write('                except Exception as ex:\n')
    f.write('                    uiInstance = uiClass(topLevel,True)\n')
    f.write('            if topLevel.winfo_exists() == False:\n')
    f.write('                return funClass.G_UIInputDataArray\n')
    f.write('            try:\n')
    f.write('                if topmost == 0:\n')
    f.write('                    topLevel.wm_attributes("-topmost", 0)\n')
    f.write('                if hasattr(uiInstance,"uiName") == True:\n')
    f.write('                    uiName = uiInstance.uiName\n')
    f.write('                def CloseWindow():\n')
    f.write('                    funClass.GetUIDataDictionary(uiName)\n')
    f.write('                    DestroyUI(uiName)\n')
    f.write('                    topLevel.destroy()\n')
    f.write("                topLevel.protocol('WM_DELETE_WINDOW', CloseWindow)\n")
    f.write("                if animation !='':\n")
    f.write('                    PlayCallUIDialogAction(topLevel,uiInstance,animation)\n')
    f.write("                else:\n")
    f.write('                    topLevel.deiconify()\n')
    f.write('                dialog_w,dialog_h = uiInstance.GetRootSize()\n')
    f.write('                CenterDlg(uiName,topLevel,dialog_w,dialog_h)\n')
    f.write('                if wait_window == 1:\n')
    f.write('                    tkinter.Tk.wait_window(topLevel)\n')
    f.write('                    G_TopDialog = None\n')
    f.write('            except Exception as ex:\n')
    f.write('                print(uiName+"被销毁，不再弹出窗口")\n')
    f.write('            return funClass.G_UIInputDataArray\n')
    f.write('    except ModuleNotFoundError:\n')
    f.write('        try:\n')
    f.write('            importModule = importlib.import_module(uiName)\n')
    f.write('            importModule = importlib.reload(importModule)\n')
    f.write('            if hasattr(importModule,"Fun") == True:\n')
    f.write('                importModule.Fun.G_ExeDir = G_ExeDir\n')
    f.write('                importModule.Fun.G_ResDir = G_ResDir\n')
    f.write('                if hasattr(importModule,"EXUIControl") == True:\n')
    f.write('                    importModule.EXUIControl.G_ExeDir = G_ExeDir\n')
    f.write('                    importModule.EXUIControl.G_ResDir = G_ResDir\n')
    f.write('            if hasattr(importModule,uiName) == True and hasattr(importModule,"Fun") == True :\n')
    f.write('                uiClass = getattr(importModule,uiName)\n')
    f.write('                funClass = getattr(importModule,"Fun")\n')
    f.write('                topLevel = tkinter.Toplevel()\n')
    f.write('                topLevel.withdraw()\n')
    f.write('                topLevel.attributes("-toolwindow", toolwindow)\n')
    f.write('                topLevel.wm_attributes("-topmost", topmost)\n')
    f.write('                G_TopDialog = topLevel\n')
    f.write('                if grab_set == 1:\n')
    f.write('                    topLevel.grab_set()\n')
    f.write('                if params is None:\n')
    f.write('                    uiInstance = uiClass(topLevel,True)\n')
    f.write('                else:\n')
    f.write('                    try:\n')
    f.write('                       uiInstance = uiClass(topLevel,True,params)\n')
    f.write('                    except Exception as ex:\n')
    f.write('                       uiInstance = uiClass(topLevel,True)\n')
    f.write('                if hasattr(uiInstance,"uiName") == True:\n')
    f.write('                    uiName = uiInstance.uiName\n')
    f.write('                if topLevel.winfo_exists() == False:\n')
    f.write('                    return funClass.G_UIInputDataArray\n')
    f.write('                try:\n')
    f.write('                    if topmost == 0:\n')
    f.write('                        topLevel.wm_attributes("-topmost", 0)\n')
    f.write('                    def CloseWindow():\n')
    f.write('                        funClass.GetUIDataDictionary(uiName)\n')
    f.write('                        DestroyUI(uiName)\n')
    f.write('                        topLevel.destroy()\n')
    f.write("                    topLevel.protocol('WM_DELETE_WINDOW',CloseWindow)\n")
    f.write("                    if animation !='':\n")
    f.write('                        PlayCallUIDialogAction(topLevel,uiInstance,animation)\n')
    f.write("                    else:\n")
    f.write('                        topLevel.deiconify()\n')
    f.write('                    dialog_w,dialog_h = uiInstance.GetRootSize()\n')
    f.write('                    CenterDlg(uiName,topLevel,dialog_w,dialog_h)\n')
    f.write('                    if wait_window == 1:\n')
    f.write('                        tkinter.Tk.wait_window(topLevel)\n')
    f.write('                        G_TopDialog = None\n')
    f.write('                except Exception as ex:\n')
    f.write('                    print(uiName+"被销毁，不再弹出窗口")\n')
    f.write('                return funClass.G_UIInputDataArray\n')
    f.write('        except Exception as ex:\n')
    f.write('            ErrorText = str(ex)\n')
    f.write('            if ErrorText.find("application has been destroyed") != -1:\n')
    f.write('                return None\n')
    f.write('            MessageBox(ErrorText)\n')
    f.write('    except Exception as ex:\n')
    f.write('        ErrorText = str(ex)\n')
    f.write('        if ErrorText.find("application has been destroyed") != -1:\n')
    f.write('            return None\n')
    f.write('        MessageBox(ErrorText)\n')
    f.write('    return None\n')
    f.write('def LoadUIDialog(uiName,elementName,targetUIName,params=None,ignoreSameUI=True):\n')
    f.write('    """'+Language.G_Language[1345]+'"""\n')
    f.write('    global G_ExeDir\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    def OnFrameConfigure(event,targetUIName):\n')
    f.write('        ReDrawCanvasRecord(targetUIName,True)\n')
    f.write('    currUIDialog = GetUserData(uiName,elementName,"CurrUI")\n')
    f.write('    lastLoadTime = GetUserData(uiName,elementName,"LoadTime")\n')
    f.write('    if currUIDialog is None:\n')
    f.write('        AddUserData(uiName,elementName,"CurrUI","string",targetUIName,0)\n')
    f.write('        AddUserData(uiName,elementName,"LoadTime","long",time.time())\n')
    f.write('    else:\n')
    f.write('        if currUIDialog == targetUIName and ignoreSameUI == True:\n')
    f.write('            print("'+Language.G_Language[3109]+'"+":"+targetUIName)\n')
    f.write('            return \n')
    # f.write('            currLoadTime = time.time()\n')
    # f.write('            if  (currLoadTime - lastLoadTime) < 1:\n')
    # f.write('                print("'+Language.G_Language[3109]+'"+":"+targetUIName)\n')
    # f.write('                return \n')
    f.write('        SetUserData(uiName,elementName,"CurrUI",targetUIName)\n')
    f.write('        SetUserData(uiName,elementName,"LoadTime",time.time())\n')
    f.write('    print("LoadUIDialog %s,%s => %s"%(uiName,elementName,targetUIName))\n')
    f.write('    Root = GetElement(uiName,\'root\')\n')
    f.write('    ParentFrame = GetElement(uiName,elementName)\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in  G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        realName = G_UIElementAliasDictionary[uiName][elementName]\n')
    f.write('        ParentFrame_Child = GetElement(uiName,realName+"_Child")\n')
    f.write('    else:\n')
    f.write('        ParentFrame_Child = GetElement(uiName,elementName+"_Child")\n')
    f.write('    if ParentFrame_Child:\n')
    f.write('        ParentFrame = ParentFrame_Child\n')
    f.write('    DestoryChild(ParentFrame)\n')
    f.write('    import importlib\n')
    f.write('    from   importlib import import_module\n')
    f.write('    try:\n')
    f.write('        UIPath, UIFile = os.path.split(targetUIName)\n')
    f.write('        if UIPath.find(":") < 0:\n')
    f.write('            UIPath = os.path.join(G_ExeDir,UIPath)\n')
    f.write('        UIName, extension = os.path.splitext(UIFile)\n')
    f.write('        import sys\n')
    f.write('        sys.path.append(UIPath)\n')
    f.write('        importModule = importlib.import_module(UIName)\n')
    f.write('        importModule = importlib.reload(importModule)\n')
    f.write('        if hasattr(importModule,"Fun") == True:\n')
    f.write('            importModule.Fun.G_ExeDir = G_ExeDir\n')
    f.write('            importModule.Fun.G_ResDir = G_ResDir\n')
    f.write('            if hasattr(importModule,"EXUIControl") == True:\n')
    f.write('                importModule.EXUIControl.G_ExeDir = G_ExeDir\n')
    f.write('                importModule.EXUIControl.G_ResDir = G_ResDir\n')
    f.write('        if hasattr(importModule,UIName) == True:\n')
    f.write('            uiClass = getattr(importModule,UIName)\n')
    f.write('            if params is None:\n')
    f.write('                uiDialog = uiClass(ParentFrame,False)\n')
    f.write('            else:\n')
    f.write('                try:\n')
    f.write('                    uiDialog = uiClass(ParentFrame,False,params)\n')
    f.write('                except Exception as ex:\n')
    f.write('                    uiDialog = uiClass(ParentFrame,False)\n')
    f.write('            UIName = uiDialog.uiName\n')
    f.write('            if ParentFrame_Child:\n')
    f.write('                uiDialogWidth = uiDialog.root.winfo_width()\n')
    f.write('                uiDialogHeight = uiDialog.root.winfo_height()\n')
    f.write('                uiDialogForm1 = None\n')
    f.write('                ChildWidgetList = uiDialog.root.children\n')
    f.write('                for widgetName in ChildWidgetList.keys():\n')
    f.write('                    uiDialogForm1  = ChildWidgetList[widgetName]\n')
    f.write('                    ChildHandle = ParentFrame.create_window(0,0, window=uiDialogForm1, anchor=tkinter.NW,tag="Form_1")\n')
    f.write('                    ParentFrame.itemconfig(ChildHandle,width=uiDialogWidth,height=uiDialogHeight)\n')
    f.write('            uiDialog.root = Root\n')
    # f.write('            FunLib = getattr(importModule,"Fun")\n')
    # f.write('            if FunLib:\n')
    # f.write('                FunLib.G_UIElementDictionary[UIName][\'root\'] = Root\n')
    f.write('            G_UIElementDictionary[UIName][\'root\'] = Root\n')
    f.write('            OnFrameConfigure(None,UIName)\n')
    f.write("            ParentFrame.bind('<Configure>',EventFunction_Adaptor(OnFrameConfigure,targetUIName = UIName))\n")
    f.write('            return uiDialog\n')
    f.write('    except ModuleNotFoundError:\n')
    f.write('        try:\n')
    f.write('            UIPath, UIFile = os.path.split(targetUIName)\n')
    f.write('            if UIPath.find(":") < 0:\n')
    f.write('                UIPath = os.path.join(G_ExeDir,UIPath)\n')
    f.write('            UIName, extension = os.path.splitext(UIFile)\n')
    f.write('            import sys\n')
    f.write('            sys.path.append(UIPath)\n')
    f.write('            importModule = importlib.import_module("Compile_"+UIName)\n')
    f.write('            importModule = importlib.reload(importModule)\n')
    f.write('            if hasattr(importModule,"Fun") == True:\n')
    f.write('                importModule.Fun.G_ExeDir = G_ExeDir\n')
    f.write('                importModule.Fun.G_ResDir = G_ResDir\n')
    f.write('                if hasattr(importModule,"EXUIControl") == True:\n')
    f.write('                    importModule.EXUIControl.G_ExeDir = G_ExeDir\n')
    f.write('                    importModule.EXUIControl.G_ResDir = G_ResDir\n')
    f.write('            if hasattr(importModule,UIName) == True:\n')
    f.write('                uiClass = getattr(importModule,UIName)\n')
    f.write('                if params is None:\n')
    f.write('                    uiDialog = uiClass(ParentFrame,False)\n')
    f.write('                else:\n')
    f.write('                    try:\n')
    f.write('                        uiDialog = uiClass(ParentFrame,False,params)\n')
    f.write('                    except Exception as ex:\n')
    f.write('                        uiDialog = uiClass(ParentFrame,False)\n')
    f.write('                UIName = uiDialog.uiName\n')
    f.write('                if ParentFrame_Child:\n')
    f.write('                    uiDialogWidth = uiDialog.root.winfo_width()\n')
    f.write('                    uiDialogHeight = uiDialog.root.winfo_height()\n')
    f.write('                    uiDialogForm1 = None\n')
    f.write('                    ChildWidgetList = uiDialog.root.children\n')
    f.write('                    for widgetName in ChildWidgetList.keys():\n')
    f.write('                        uiDialogForm1  = ChildWidgetList[widgetName]\n')
    f.write('                        ChildHandle = ParentFrame.create_window(0,0, window=uiDialogForm1, anchor=tkinter.NW,tag="Form_1")\n')
    f.write('                        ParentFrame.itemconfig(ChildHandle,width=uiDialogWidth,height=uiDialogHeight)\n')
    f.write('                uiDialog.root = Root\n')
    # f.write('                FunLib = getattr(importModule,"Fun")\n')
    # f.write('                if FunLib:\n')
    # f.write('                    FunLib.G_UIElementDictionary[UIName][\'root\'] = Root\n')
    f.write('                G_UIElementDictionary[UIName][\'root\'] = Root\n')
    f.write('                OnFrameConfigure(None,UIName)\n')
    f.write("                ParentFrame.bind('<Configure>',EventFunction_Adaptor(OnFrameConfigure,targetUIName = UIName))\n")
    f.write('                return uiDialog\n')
    # f.write('        except Exception as ex:\n')
    # f.write('            MessageBox(str(ex))\n')
    f.write('        except Exception as ex:\n')
    f.write("            except_type, except_value, except_traceback = sys.exc_info()\n")
    f.write("            except_value_str = str(except_value)\n")
    f.write("            except_stack_end = except_traceback.tb_frame\n")
    f.write("            except_stack_next = except_traceback.tb_next\n")
    f.write("            except_stack_lineno = except_traceback.tb_lineno\n")
    f.write("            while except_stack_next:\n")
    f.write("                except_stack_end = except_stack_next.tb_frame\n")
    f.write("                except_stack_lineno = except_stack_next.tb_lineno\n")
    f.write("                except_stack_next = except_stack_next.tb_next\n")
    f.write('            except_file = os.path.split(except_stack_end.f_code.co_filename)[1]\n')
    f.write('            MessageBox("'+Language.G_Language[9517]+'：%s\\n'+Language.G_Language[51]+'：%s\\n'+Language.G_Language[3322]+'：%s" % (except_value_str, except_file, except_stack_lineno),"'+Language.G_Language[9518]+'")\n')
    #f.write('            MessageBox(str(ex))\n')
    f.write('    except Exception as ex:\n')
    f.write("        except_type, except_value, except_traceback = sys.exc_info()\n")
    f.write("        except_value_str = str(except_value)\n")
    f.write("        except_stack_end = except_traceback.tb_frame\n")
    f.write("        except_stack_next = except_traceback.tb_next\n")
    f.write("        except_stack_lineno = except_traceback.tb_lineno\n")
    f.write("        while except_stack_next:\n")
    f.write("            except_stack_end = except_stack_next.tb_frame\n")
    f.write("            except_stack_lineno = except_stack_next.tb_lineno\n")
    f.write("            except_stack_next = except_stack_next.tb_next\n")
    f.write('        except_file = os.path.split(except_stack_end.f_code.co_filename)[1]\n')
    f.write('        MessageBox("'+Language.G_Language[9517]+'：%s\\n'+Language.G_Language[51]+'：%s\\n'+Language.G_Language[3322]+'：%s" % (except_value_str, except_file, except_stack_lineno),"'+Language.G_Language[9518]+'")\n')
    f.write('        MessageBox(str(ex))\n')
    f.write('def SetChildFrameScrollRegion(uiName,elementName,width,height):\n')
    f.write('    """'+Language.G_Language[9335]+'"""\n')
    f.write('    Frame_ChildName = elementName + "_Child"\n')
    f.write('    Frame_Child = GetElement(uiName,Frame_ChildName)\n')
    f.write('    UIChildren = Frame_Child.winfo_children()\n')
    f.write('    if len(UIChildren) > 0:\n')
    f.write('        Form_1 = UIChildren[0]\n')
    f.write('        Frame_ChildHandle = Frame_Child.create_window(0,0, window=Form_1, anchor=tkinter.NW,tag="Form_1")\n')
    f.write('        Frame_Child.itemconfig(Frame_ChildHandle,width=width,height=height)\n')
    f.write('        Frame_Child.config(scrollregion=(0,0,width,height))\n')
    # f.write('        def  Resize_Frame(event):\n')
    # f.write('            realWidth = width\n')
    # f.write('            if isinstance(realWidth,float) == True:\n')
    # f.write('                realWidth = int(width*event.width)\n')
    # f.write('            realHeight = height\n')
    # f.write('            if isinstance(realHeight,float) == True:\n')
    # f.write('                realHeight = int(height*event.height)\n')
    # f.write('            event.widget.config(scrollregion=(0,0,event,event))\n')
    # f.write('        Frame_Child.bind(\'<Configure>\',Resize_Frame)\n')
    f.write('def AddUIDialog(uiName,elementName,targetUIName,x,y,params=None):\n')
    f.write('    """在指定控件上加载一个界面"""\n')
    f.write('    global G_ExeDir\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    def OnFrameConfigure(event,targetUIName):\n')
    f.write('        ReDrawCanvasRecord(targetUIName,True)\n')
    f.write('    print("AddUIDialog %s,%s => %s"%(uiName,elementName,targetUIName))\n')
    f.write("    Root = GetElement(uiName,'root')\n")
    f.write('    ParentFrame = GetElement(uiName,elementName)\n')
    f.write('    ChildName = elementName+"_Child"\n')
    f.write('    HScrollName = elementName+"_HScrollbar"\n')
    f.write('    VScrollName = elementName+"_VScrollbar"\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in  G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        ChildName = G_UIElementAliasDictionary[uiName][elementName]+"_Child"\n')
    f.write('        HScrollName = G_UIElementAliasDictionary[uiName][elementName]+"_HScrollbar"\n')
    f.write('        VScrollName = G_UIElementAliasDictionary[uiName][elementName]+"_VScrollbar"\n')
    f.write('        ParentFrame_Child = GetElement(uiName,ChildName)\n')
    f.write('    else:\n')
    f.write('        ParentFrame_Child = GetElement(uiName,elementName+"_Child")\n')
    f.write('    if ParentFrame_Child:\n')
    f.write('        ParentFrame = ParentFrame_Child\n')
    f.write('    else:\n')
    f.write("        ParentFrame_Child = tkinter.Canvas(ParentFrame,bg=ParentFrame.cget('bg'))\n")
    f.write('        ParentFrame_Child.place(x=x,y=y,width=ParentFrame.winfo_width()-30,height=ParentFrame.winfo_height())\n')
    f.write('        Register(uiName,ChildName,ParentFrame_Child)\n')
    f.write('        AddUserData(uiName,ChildName,"scrollregion","list",[0,0,0,0],0)\n')
    f.write('        ParentFrame = ParentFrame_Child\n')
    f.write('        HScrollbar = GetElement(uiName,HScrollName)\n')
    f.write('        if HScrollbar:\n')
    f.write('            HScrollbar.config(command = ParentFrame.xview)\n')
    f.write('            ParentFrame.config(yscrollcommand=HScrollbar.set)\n')
    f.write('        VScrollbar = GetElement(uiName,VScrollName)\n')
    f.write('        if VScrollbar:\n')
    f.write('            VScrollbar.config(command = ParentFrame.yview)\n')
    f.write('            ParentFrame.config(yscrollcommand=VScrollbar.set)\n')
    f.write('    import importlib\n')
    f.write('    from   importlib import import_module\n')
    f.write('    try:\n')
    f.write('        UIPath, UIFile = os.path.split(targetUIName)\n')
    f.write('        if UIPath.find(":") < 0:\n')
    f.write('            UIPath = os.path.join(G_ExeDir,UIPath)\n')
    f.write('        UIName, extension = os.path.splitext(UIFile)\n')
    f.write('        import sys\n')
    f.write('        sys.path.append(UIPath)\n')
    f.write('        importModule = importlib.import_module(UIName)\n')
    f.write('        importModule = importlib.reload(importModule)\n')
    f.write('        if hasattr(importModule,"Fun") == True:\n')
    f.write('            importModule.Fun.G_ExeDir = G_ExeDir\n')
    f.write('            importModule.Fun.G_ResDir = G_ResDir\n')
    f.write('            if hasattr(importModule,"EXUIControl") == True:\n')
    f.write('                importModule.EXUIControl.G_ExeDir = G_ExeDir\n')
    f.write('                importModule.EXUIControl.G_ResDir = G_ResDir\n')
    f.write('        if hasattr(importModule,UIName) == True:\n')
    f.write('            uiClass = getattr(importModule,UIName)\n')
    f.write('            if params is None:\n')
    f.write('                uiDialog = uiClass(ParentFrame,False)\n')
    f.write('            else:\n')
    f.write('                try:\n')
    f.write('                    uiDialog = uiClass(ParentFrame,False,params)\n')
    f.write('                except Exception as ex:\n')
    f.write('                    uiDialog = uiClass(ParentFrame,False)\n')
    f.write('            UIName = uiDialog.uiName\n')
    f.write('            scrollregion_info = GetUserData(uiName,ChildName,"scrollregion")\n')
    f.write('            scrollregion_width = scrollregion_info[2]\n')
    f.write('            scrollregion_height = scrollregion_info[3]\n')
    f.write('            if ParentFrame_Child:\n')
    f.write('                if hasattr(uiDialog,"GetRootSize") == True:\n')
    f.write('                    uiDialogWidth,uiDialogHeight = uiDialog.GetRootSize()\n')
    f.write('                    ChildWidgetList = uiDialog.GetAllElement()\n')
    f.write("                    if 'Form_1' in ChildWidgetList.keys():\n")
    f.write("                        uiDialogForm1  = ChildWidgetList['Form_1']\n")
    f.write('                        ChildHandle = ParentFrame.create_window(x,y, window=uiDialogForm1, anchor=tkinter.NW,tag="Form_1")\n')
    f.write('                        ParentFrame.itemconfig(ChildHandle,width=uiDialogWidth,height=uiDialogHeight)\n')
    f.write('                if (x + uiDialogWidth) > scrollregion_width:\n')
    f.write('                    scrollregion_width = (x + uiDialogWidth) \n')
    f.write('                if (y + uiDialogHeight) > scrollregion_height:\n')
    f.write('                    scrollregion_height = (y + uiDialogHeight) \n')
    f.write('            uiDialog.root = Root\n')
    f.write("            G_UIElementDictionary[UIName]['root'] = Root\n")
    f.write('            OnFrameConfigure(None,UIName)\n')
    f.write("            ParentFrame.bind('<Configure>',EventFunction_Adaptor(OnFrameConfigure,targetUIName = UIName))\n")
    f.write('            ParentFrame.config(scrollregion=(0,0,scrollregion_width,scrollregion_height))\n')
    f.write('            SetUserData(uiName,ChildName,"scrollregion",[0,0,scrollregion_width,scrollregion_height])\n')
    f.write('            ParentFrame.update()\n')
    f.write('            return uiDialog\n')
    f.write('    except ModuleNotFoundError:\n')
    f.write('        try:\n')
    f.write('            UIPath, UIFile = os.path.split(targetUIName)\n')
    f.write('            if UIPath.find(":") < 0:\n')
    f.write('                UIPath = os.path.join(G_ExeDir,UIPath)\n')
    f.write('            UIName, extension = os.path.splitext(UIFile)\n')
    f.write('            import sys\n')
    f.write('            sys.path.append(UIPath)\n')
    f.write('            importModule = importlib.import_module("Compile_"+UIName)\n')
    f.write('            importModule = importlib.reload(importModule)\n')
    f.write('            if hasattr(importModule,"Fun") == True:\n')
    f.write('                importModule.Fun.G_ExeDir = G_ExeDir\n')
    f.write('                importModule.Fun.G_ResDir = G_ResDir\n')
    f.write('                if hasattr(importModule,"EXUIControl") == True:\n')
    f.write('                    importModule.EXUIControl.G_ExeDir = G_ExeDir\n')
    f.write('                    importModule.EXUIControl.G_ResDir = G_ResDir\n')
    f.write('            if hasattr(importModule,UIName) == True:\n')
    f.write('                uiClass = getattr(importModule,UIName)\n')
    f.write('                if params is None:\n')
    f.write('                    uiDialog = uiClass(ParentFrame,False)\n')
    f.write('                else:\n')
    f.write('                    try:\n')
    f.write('                        uiDialog = uiClass(ParentFrame,False,params)\n')
    f.write('                    except Exception as ex:\n')
    f.write('                        uiDialog = uiClass(ParentFrame,False)\n')
    f.write('                UIName = uiDialog.uiName\n')
    f.write('                scrollregion_info = GetUserData(uiName,ChildName,"scrollregion")\n')
    f.write('                scrollregion_width = scrollregion_info[2]\n')
    f.write('                scrollregion_height = scrollregion_info[3]\n')
    f.write('                if ParentFrame_Child:\n')
    f.write('                    if hasattr(uiDialog,"GetRootSize") == True:\n')
    f.write('                        uiDialogWidth,uiDialogHeight = uiDialog.GetRootSize()\n')
    f.write('                        ChildWidgetList = uiDialog.GetAllElement()\n')
    f.write("                        if 'Form_1' in ChildWidgetList.keys():\n")
    f.write("                            uiDialogForm1  = ChildWidgetList['Form_1']\n")
    f.write('                            ChildHandle = ParentFrame.create_window(x,y, window=uiDialogForm1, anchor=tkinter.NW,tag="Form_1")\n')
    f.write('                            ParentFrame.itemconfig(ChildHandle,width=uiDialogWidth,height=uiDialogHeight)\n')
    f.write('                    if (x + uiDialogWidth) > scrollregion_width:\n')
    f.write('                        scrollregion_width = (x + uiDialogWidth) \n')
    f.write('                    if (y + uiDialogHeight) > scrollregion_height:\n')
    f.write('                        scrollregion_height = (y + uiDialogHeight) \n')
    f.write('                uiDialog.root = Root\n')
    f.write("                G_UIElementDictionary[UIName]['root'] = Root\n")
    f.write('                OnFrameConfigure(None,UIName)\n')
    f.write("                ParentFrame.bind('<Configure>',EventFunction_Adaptor(OnFrameConfigure,targetUIName = UIName))\n")
    f.write('                ParentFrame.config(scrollregion=(0,0,scrollregion_width,scrollregion_height))\n')
    f.write('                SetUserData(uiName,ChildName,"scrollregion",[0,0,scrollregion_width,scrollregion_height])\n')
    f.write('                ParentFrame.update()\n')
    f.write('                return uiDialog\n')
    f.write('        except Exception as ex:\n')
    f.write('            except_type, except_value, except_traceback = sys.exc_info()\n')
    f.write('            except_value_str = str(except_value)\n')
    f.write('            except_stack_end = except_traceback.tb_frame\n')
    f.write('            except_stack_next = except_traceback.tb_next\n')
    f.write('            except_stack_lineno = except_traceback.tb_lineno\n')
    f.write('            while except_stack_next:\n')
    f.write('                except_stack_end = except_stack_next.tb_frame\n')
    f.write('                except_stack_lineno = except_stack_next.tb_lineno\n')
    f.write('                except_stack_next = except_stack_next.tb_next\n')
    f.write('            except_file = os.path.split(except_stack_end.f_code.co_filename)[1]\n')
    f.write('            MessageBox("错误信息：：%s\\n文件：%s\\n行号：%s" % (except_value_str, except_file, except_stack_lineno),"运行错误")\n')
    #f.write('            MessageBox(ex)\n')
    f.write('    except Exception as ex:\n')
    f.write('        except_type, except_value, except_traceback = sys.exc_info()\n')
    f.write('        except_value_str = str(except_value)\n')
    f.write('        except_stack_end = except_traceback.tb_frame\n')
    f.write('        except_stack_next = except_traceback.tb_next\n')
    f.write('        except_stack_lineno = except_traceback.tb_lineno\n')
    f.write('        while except_stack_next:\n')
    f.write('            except_stack_end = except_stack_next.tb_frame\n')
    f.write('            except_stack_lineno = except_stack_next.tb_lineno\n')
    f.write('            except_stack_next = except_stack_next.tb_next\n')
    f.write('        except_file = os.path.split(except_stack_end.f_code.co_filename)[1]\n')
    f.write('        MessageBox("错误信息：：%s\\n文件：%s\\n行号：%s" % (except_value_str, except_file, except_stack_lineno),"运行错误")\n')
    #f.write('        MessageBox(ex)\n')


#设置全屏
def WriteShowWindowFunction(f):
    f.write('def ShowWindow(uiName,WindowState):\n')
    f.write('    """'+Language.G_Language[1294]+'"""\n')
    f.write("    root = GetElement(uiName,'root')\n")
    f.write('    hwnd = windll.user32.GetParent(root.winfo_id())\n')  
    f.write('    win32gui.ShowWindow(hwnd,WindowState)\n')
    f.write('def SetWindowTitle(uiName,title=""):\n')
    f.write('    """'+Language.G_Language[1488]+'"""\n')
    f.write("    root = GetElement(uiName,'root')\n")
    f.write("    root.title(title)\n")
    f.write('def SetWindowIco(uiName,imageFile=""):\n')
    f.write('    """'+Language.G_Language[1489]+'"""\n')
    f.write("    imageFile_noExt,extension = os.path.splitext(imageFile)\n")
    f.write("    root = GetElement(uiName,'root')\n")
    f.write("    if extension == '.ico':\n")
    f.write("        root.iconbitmap(imageFile)\n")
    f.write("    else:\n")
    f.write("        import base64\n")
    f.write('        open_icon = open(imageFile,"rb")\n')
    f.write('        open_icon_base64 = base64.b64encode(open_icon.read())\n')
    f.write('        icoFileName = imageFile_noExt+".ico"\n')
    f.write('        tmp = open(icoFileName,"wb+")\n')
    f.write('        tmp.write(open_icon_base64)\n')
    f.write('        tmp.close()\n')
    f.write('        img = Image.open(icoFileName)\n')
    f.write('        img.save(icoFileName)\n')
    f.write('        root.iconbitmap(icoFileName)\n')
    f.write('        os.remove(icoFileName)\n')
    f.write('g_ToolBar_lastX = 0\n')
    f.write('g_ToolBar_lastY = 0\n')
    f.write('def SetToolBar(root,uiFileName):\n')
    f.write('    """'+Language.G_Language[1109]+'"""\n')
    f.write("    try:\n")
    f.write('        if uiFileName.find(".py") >= 0:\n')
    f.write("            pathName,fileName = os.path.split(uiFileName)\n")
    f.write("            sys.path.insert(0,pathName)\n")
    f.write("            importSplitArray = fileName.partition('.py')\n")
    f.write("            uiClass = importSplitArray[0]\n")
    f.write("        else:\n")
    f.write("            uiClass = uiFileName\n")
    f.write('        import importlib\n')
    f.write('        from   importlib import import_module\n')
    f.write('        importModule = importlib.import_module(uiClass)\n')
    f.write('        importModule = importlib.reload(importModule)\n')
    f.write('        newClass = getattr(importModule, uiClass)\n')
    f.write('        if newClass:\n')
    f.write('            def ButtonDown_ToolBar(event):\n')
    f.write('                global g_ToolBar_lastX\n')
    f.write('                global g_ToolBar_lastY\n')
    f.write('                g_ToolBar_lastX = event.x_root\n')
    f.write('                g_ToolBar_lastY = event.y_root\n')
    f.write('            def ButtonMotion_ToolBar(event):\n')
    f.write('                global g_ToolBar_lastX\n')
    f.write('                global g_ToolBar_lastY\n')
    f.write('                offsetX = event.x_root - g_ToolBar_lastX\n')
    f.write('                offsetY = event.y_root - g_ToolBar_lastY\n')
    f.write('                root_x = root.winfo_x()\n')
    f.write('                root_y = root.winfo_y()\n')
    f.write('                root_w = root.winfo_width()\n')
    f.write('                root_h = root.winfo_height()\n')
    f.write("                if offsetX != 0 or offsetY != 0:\n")
    f.write("                    root.geometry('%dx%d+%d+%d'%(root_w,root_h,root_x+offsetX,root_y+offsetY))\n")
    f.write('                g_ToolBar_lastX = event.x_root\n')
    f.write('                g_ToolBar_lastY = event.y_root\n')
    f.write('            def ButtonUp_ToolBar(event):\n')
    f.write('                pass\n')
    f.write('            newClassInstance = newClass(root,False)\n')
    f.write('            ChildWidgetList = newClassInstance.GetAllElement()\n')
    f.write('            for widgetName in ChildWidgetList.keys():\n')
    f.write("                if widgetName == 'UIClass':\n")
    f.write("                    continue\n")
    f.write("                if widgetName == 'root':\n")
    f.write("                    continue\n")
    f.write('                ChildWidget = ChildWidgetList[widgetName]\n')
    f.write("                if widgetName == 'Form_1':\n")
    f.write("                    ChildWidget.pack(side=tkinter.TOP,fill=tkinter.X)\n")
    f.write("                if hasattr(ChildWidget,'GetWidget') == True:\n")
    f.write("                    ChildWidget = ChildWidget.GetWidget()\n")
    f.write("                bindList = ChildWidget.bind()\n")
    f.write("                if widgetName.find('Entry_') >= 0:\n")
    f.write("                    continue\n")
    f.write("                if widgetName.find('Text_') >= 0:\n")
    f.write("                    continue\n")
    f.write("                if widgetName.find('Button_') >= 0:\n")
    f.write("                    continue\n")
    f.write("                if '<Button-1>' not in bindList and '<B1-Motion>' not in bindList and '<ButtonRelease-1>' not in bindList:\n")
    f.write("                    ChildWidget.bind('<Button-1>',ButtonDown_ToolBar)\n")
    f.write("                    ChildWidget.bind('<B1-Motion>',ButtonMotion_ToolBar)\n")
    f.write("                    ChildWidget.bind('<ButtonRelease-1>',ButtonUp_ToolBar)\n")
    f.write('    except Exception as ex:\n')
    f.write('        print(ex)\n')

#设置居中
def WriteCenterDlgFunction(f):
    #f.write(Language.G_Language[1218]+'\n')
    f.write('def CenterDlg(uiName,popupDlg,dw=0,dh=0,keepHide=False,popui_xy=\'Center\'):\n')
    f.write('    """'+Language.G_Language[1218]+'"""\n')
    f.write('    global g_TKScaling\n')
    f.write('    global G_LaunchDlg\n')
    f.write('    global G_UIRootStateDictionary\n')
    f.write('    if dw == 0:\n')
    f.write('        dw = popupDlg.winfo_width()\n')
    f.write('    if dh == 0:\n')
    f.write('        dh = popupDlg.winfo_height()\n')
    f.write('    root = GetElement(uiName,\'root\')\n')
    f.write('    if root != None and popupDlg != root:\n')
    f.write('        sw = root.winfo_width()\n')
    f.write('        sh = root.winfo_height()\n')
    f.write('        sx = root.winfo_x()\n')
    f.write('        sy = root.winfo_y()\n')
    f.write('        if popui_xy == \'Center\':\n')
    f.write('            x = int(sx+(sw-dw)/2)\n')
    f.write('            if x < 0:\n')
    f.write('                x = 0\n')
    f.write('            y = int(sy+(sh-dh)/2)\n')
    f.write('            if y < 0:\n')
    f.write('                y = 0\n')
    f.write('        else:\n')
    f.write('            x = popui_xy[0]\n')
    f.write('            y = popui_xy[1]\n')
    f.write('        popupDlg.geometry(\'%dx%d+%d+%d\'%(dw,dh,x,y))\n')
    f.write('        popupDlg.update()\n')
    f.write('        if keepHide == False:\n')
    f.write('            popupDlg.deiconify()\n')
    f.write("            G_UIRootStateDictionary[uiName] = 'deiconify'\n")
    f.write('    else:\n')
    f.write('        user32 = ctypes.windll.user32\n')
    f.write('        try:\n')
    f.write('            ctypes.windll.shcore.SetProcessDpiAwareness(1)\n')
    #f.write('            ScaleFactor=ctypes.windll.shcore.GetScaleFactorForDevice(0)\n')
    f.write('        except:\n')
    f.write('            ctypes.windll.user32.SetProcessDPIAware()\n')
    f.write('        sw = user32.GetSystemMetrics(0)\n')
    f.write('        sh = user32.GetSystemMetrics(1)\n')
    f.write('        sx = 0\n')
    f.write('        sy = 0\n')
    f.write('        if popui_xy == \'Center\':\n')
    f.write('            x = int(sx+(sw-dw)/2)\n')
    f.write('            if x < 0:\n')
    f.write('                x = 0\n')
    f.write('            y = int(sy+(sh-dh)/2)\n')
    f.write('            if y < 0:\n')
    f.write('                y = 0\n')
    f.write('        else:\n')
    f.write('            x = popui_xy[0]\n')
    f.write('            y = popui_xy[1]\n')
    f.write("        popupDlg.tk.call('tk', 'scaling',g_TKScaling)\n")
    f.write('        popupDlg.geometry(\'%dx%d+%d+%d\'%(dw,dh,x,y))\n')
    f.write('        popupDlg.update()\n')
    f.write('        if keepHide == False:\n')
    f.write('            popupDlg.deiconify()\n')
    f.write("            G_UIRootStateDictionary[uiName] = 'deiconify'\n")
    f.write('        from win32gui import GetParent, SetWindowPos, UpdateWindow, SetWindowLong, GetWindowLong, ReleaseCapture, SendMessage\n')
    f.write('        from win32con import NULL, SWP_NOSIZE, SWP_NOMOVE, SWP_NOZORDER, SWP_DRAWFRAME, GWL_STYLE, WS_CAPTION, WM_SYSCOMMAND, SC_MOVE, HTCAPTION, WS_THICKFRAME\n')
    f.write('        WindowHandle = ctypes.windll.user32.GetParent(popupDlg.winfo_id())\n')    
    f.write('        SetWindowPos(WindowHandle, NULL, x, y, dw, dh, SWP_DRAWFRAME|SWP_NOSIZE|SWP_NOZORDER)\n')
    f.write('        UpdateWindow(WindowHandle)\n')
    f.write('        if G_LaunchDlg is None:\n')
    f.write('            popupDlg.attributes(\'-topmost\', 1)\n')
    f.write('            popupDlg.attributes(\'-topmost\', 0)\n')
    f.write('            G_LaunchDlg = popupDlg\n')
    f.write('def SetUIDialogXYWH(uiName,x,y,width,height):\n')
    f.write('    """'+Language.G_Language[9504]+'"""\n')
    f.write("    root = GetElement(uiName,'root')\n")
    f.write("    if 'root' not in G_UIElementPlaceDictionary[uiName]:\n")
    f.write("        G_UIElementPlaceDictionary[uiName]['root'] = {}\n")
    f.write("    G_UIElementPlaceDictionary[uiName]['root']['x'] = x\n")
    f.write("    G_UIElementPlaceDictionary[uiName]['root']['y'] = y\n")
    f.write("    G_UIElementPlaceDictionary[uiName]['root']['width'] = width\n")
    f.write("    G_UIElementPlaceDictionary[uiName]['root']['height'] = height\n")
    f.write("    while root.master:\n")
    f.write("        root = root._nametowidget(root.winfo_parent())\n")
    f.write("    root.geometry('%dx%d+%d+%d'%(width,height,x,y))\n")
    f.write('    root.update()\n')
    f.write('def SetUIDialogXY(uiName,x,y):\n')
    f.write('    """'+Language.G_Language[9505]+'"""\n')
    f.write("    root = GetElement(uiName,'root')\n")
    f.write("    if 'root' not in G_UIElementPlaceDictionary[uiName]:\n")
    f.write("        G_UIElementPlaceDictionary[uiName]['root'] = {}\n")
    f.write("    G_UIElementPlaceDictionary[uiName]['root']['x'] = x\n")
    f.write("    G_UIElementPlaceDictionary[uiName]['root']['y'] = y\n")
    f.write("    while root.master:\n")
    f.write("        root = root._nametowidget(root.winfo_parent())\n")
    f.write("    root.geometry('%d+%d'%(x,y))\n")
    f.write('def SetUIDialogWH(uiName,width,height):\n')
    f.write('    """'+Language.G_Language[9506]+'"""\n')
    f.write("    root = GetElement(uiName,'root')\n")
    f.write("    if 'root' not in G_UIElementPlaceDictionary[uiName]:\n")
    f.write("        G_UIElementPlaceDictionary[uiName]['root'] = {}\n")
    f.write("    G_UIElementPlaceDictionary[uiName]['root']['width'] = width\n")
    f.write("    G_UIElementPlaceDictionary[uiName]['root']['height'] = height\n")
    f.write("    while root.master:\n")
    f.write("        root = root._nametowidget(root.winfo_parent())\n")
    f.write("    root.geometry('%dx%d'%(width,height))\n")
    f.write('    root.update()\n')
    f.write('def MaximizeUI(uiName):\n')
    f.write('    """'+Language.G_Language[1319]+'"""\n')
    f.write("    root = GetElement(uiName,'root')\n")
    f.write("    if 'root' not in G_UIElementPlaceDictionary[uiName]:\n")
    f.write("        G_UIElementPlaceDictionary[uiName]['root'] = {}\n")
    f.write("    G_UIElementPlaceDictionary[uiName]['root']['x'] = root.winfo_x()\n")
    f.write("    G_UIElementPlaceDictionary[uiName]['root']['y'] = root.winfo_y()\n")
    f.write("    G_UIElementPlaceDictionary[uiName]['root']['width'] = root.winfo_width()\n")
    f.write("    G_UIElementPlaceDictionary[uiName]['root']['height'] = root.winfo_height()\n")
    f.write("    user32 = ctypes.windll.user32\n")
    f.write("    sw = user32.GetSystemMetrics(0)\n")
    f.write("    sh = user32.GetSystemMetrics(1)\n")
    f.write("    while root.master:\n")
    f.write("        root = root._nametowidget(root.winfo_parent())\n")
    f.write("    root.geometry('%dx%d+%d+%d'%(sw,sh,0,0))\n")
    f.write('    root.update()\n')
    f.write("    ReDrawCanvasRecord(uiName,True)\n")
    f.write('def MinimizeUI(uiName):\n')
    f.write('    """'+Language.G_Language[1321]+'"""\n')
    
    f.write("    root = GetElement(uiName,'root')\n")
    f.write('    hwnd = windll.user32.GetParent(root.winfo_id())\n')  
    f.write('    win32gui.ShowWindow(hwnd,2)\n')
    f.write('def RestoreUI(uiName):\n')
    f.write('    """'+Language.G_Language[1320]+'"""\n')
    f.write("    global G_TKRoot\n")
    f.write("    global G_UIRootStateDictionary\n")
    f.write("    root = GetElement(uiName,'root')\n")
    f.write("    if 'root' in G_UIElementPlaceDictionary[uiName]:\n")
    f.write("        hwnd = windll.user32.GetParent(root.winfo_id())\n")
    f.write("        win32gui.ShowWindow(hwnd,1)\n")
    f.write("        root.geometry('%dx%d+%d+%d'%(G_UIElementPlaceDictionary[uiName]['root']['width'],G_UIElementPlaceDictionary[uiName]['root']['height'],G_UIElementPlaceDictionary[uiName]['root']['x'],G_UIElementPlaceDictionary[uiName]['root']['y']))\n")
    f.write("    else:\n")
    f.write("        hwnd = windll.user32.GetParent(root.winfo_id())\n")
    f.write("        state = 'normal'\n")
    f.write("        if uiName in G_UIRootStateDictionary.keys():\n")
    f.write("            state = G_UIRootStateDictionary[uiName]\n")
    f.write("        if state == \"iconic\":\n")
    f.write("            win32gui.ShowWindow(hwnd,2)\n")
    f.write("        elif state == \"zoomed\":\n")
    f.write("            win32gui.ShowWindow(hwnd,3)\n")
    f.write("        else:\n")
    f.write("            win32gui.ShowWindow(hwnd,1)\n")
    f.write("        root.update()\n")

    f.write('def HideUI(uiName):\n')
    f.write('    """'+Language.G_Language[1322]+'"""\n')
    
    f.write("    root = GetElement(uiName,'root')\n")
    f.write('    hwnd = windll.user32.GetParent(root.winfo_id())\n')  
    f.write('    win32gui.ShowWindow(hwnd,0)\n')

    f.write('def SetUIState(uiName,state):\n')
    f.write('    """'+Language.G_Language[1319]+'"""\n')
    f.write("    global G_UIRootStateDictionary\n")
    f.write('    G_UIRootStateDictionary[uiName] = state\n')
    
#设置居中
def WriteCenterDlgFunction_Mobile(f):
    f.write('def CenterDlg(uiName,popupDlg,dw=0,dh=0):\n')
    f.write('    """'+Language.G_Language[1218]+'"""\n')
    f.write('    pass\n')
    f.write('def MaximizeUI(uiName):\n')
    f.write('    """'+Language.G_Language[1319]+'"""\n')
    f.write('    pass\n')
    f.write('def MinimizeUI(uiName):\n')
    f.write('    """'+Language.G_Language[1321]+'"""\n')
    f.write('    pass\n')
    f.write('def RestoreUI(uiName):\n')
    f.write('    """'+Language.G_Language[1320]+'"""\n')
    f.write('    pass\n')
    f.write('def HideUI(uiName):\n')
    f.write('    """'+Language.G_Language[1322]+'"""\n')
    f.write('    pass\n')

#设置窗口圆角
def WriteSetRoundedRectangleFunction(f):
    f.write('def SetRoundedRectangle(uiName,elementName,WidthEllipse=20,HeightEllipse=20):\n')
    f.write('    """'+Language.G_Language[1219]+'"""\n')
    f.write('    global G_UIElementRoundRectangleDictionary\n')
    f.write('    if isinstance(elementName,int) == True:\n')
    f.write('        WidthEllipse = elementName\n')
    f.write('        HeightEllipse = WidthEllipse\n')
    f.write('        uiName,elementName = GetElementName(uiName)\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('    G_UIElementRoundRectangleDictionary[uiName][elementName] = [WidthEllipse,HeightEllipse]\n')
    
    f.write('def ShowRoundedRectangle(Control,WidthEllipse,HeightEllipse):\n')
    f.write('    """'+Language.G_Language[1220]+'"""\n')
    f.write('    if Control != None:\n')
    f.write('        if hasattr(Control,"GetWidget") == True:\n')
    f.write('            Control = Control.GetWidget()\n')
    f.write('        import win32gui\n')
    f.write('        control_width = Control.winfo_width()\n')
    f.write('        control_height = Control.winfo_height()\n')
    f.write('        if control_width > 1 and control_height > 1:\n')
    f.write('            HRGN = win32gui.CreateRoundRectRgn(0,0,control_width,control_height,WidthEllipse,HeightEllipse)\n')
    f.write('            win32gui.SetWindowRgn(Control.winfo_id(), HRGN,1)\n')
    f.write('        else:\n')
    f.write('            Control.after(10, lambda: ShowRoundedRectangle(Control,WidthEllipse,HeightEllipse))\n')

#设置窗口透明度
def WriteSetTransparencyFunction(f):
    #f.write(Language.G_Language[1238]+'\n')
    f.write('def SetTransparencyFunction(root,alpha):\n')
    f.write('    """'+Language.G_Language[1238]+'"""\n')
    f.write('    if root != None:\n')
    f.write('        try :\n')
    f.write('            hwnd = windll.user32.GetParent(root.winfo_id())\n')
    f.write('            _winlib = ctypes.windll.user32\n')
    f.write('            style = _winlib.GetWindowLongA( hwnd, 0xffffffec ) | 0x00080000\n')
    f.write('            _winlib.SetWindowLongA( hwnd, 0xffffffec, style )\n')
    f.write('            _winlib.SetLayeredWindowAttributes( hwnd, 0, alpha, 2 )\n')
    f.write('        except ImportError:\n')   
    f.write('            pass\n') 

#写入设置光标的函数
def WriteSetCursorFunction(f):
    f.write("def SetCursor(uiName,elementName,cursor='hand2'):\n")
    f.write('    """'+Language.G_Language[1490]+'"""\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        Control = GetElement(uiName,elementName)\n')
    f.write('        if Control is not None:\n')
    f.write('            if hasattr(Control,"GetEntry") == True:\n')
    f.write('                Control = Control.GetEntry()\n')
    f.write('            elif hasattr(Control,"GetWidget") == True:\n')
    f.write('                Control = Control.GetWidget()\n')
    f.write('            try:\n')
    f.write('                Control.config(cursor=cursor)\n')
    f.write('            except:\n')
    f.write('                pass\n')
    f.write('def HideCursor(uiName):\n')
    f.write('    """'+Language.G_Language[1491]+'"""\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        root = GetElement(uiName,"root")\n')
    f.write('        if root is not None:\n')
    f.write('            root.config(cursor="none")\n')
    f.write('def GetCursorPosition(uiName=\'\',elementName=\'root\'):\n')
    f.write('    """'+Language.G_Language[9805]+'"""\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_TKRoot\n')
    f.write('    if uiName in G_UIElementDictionary:\n')
    f.write('        Control = GetElement(uiName,elementName)\n')
    f.write('        if Control:\n')
    f.write('            return Control.winfo_pointerxy()\n')
    f.write('        else:\n')
    f.write('            Form_1 = GetElement(uiName,"Form_1")\n')
    f.write('            if Form_1 is not None:\n')
    f.write('                return Form_1.winfo_pointerxy()\n')
    f.write('    return G_TKRoot.winfo_pointerxy()\n')

#展开或关闭树型的所有节点
def WriteOpenOrCloseTreeView(f):
    #f.write(Language.G_Language[1237]+'\n')
    f.write('def ExpandAllTreeItem(targetTree,isOpen,parentItem = None):\n')
    f.write('    """'+Language.G_Language[1237]+'"""\n')
    f.write('    ParentItemArray = [parentItem]\n')
    f.write('    if parentItem == None:\n')
    f.write('        ParentItemArray = targetTree.get_children()\n')
    f.write('    for Item in ParentItemArray:\n')
    f.write('        targetTree.item(Item,open=isOpen)\n')
    f.write('        for childItem in targetTree.get_children(Item):\n')
    f.write('            targetTree.item(childItem,open=isOpen)\n')
    f.write('            ExpandAllTreeItem(targetTree,isOpen,childItem)\n')
#弹出对话框
def WriteMessageBoxFunction(f):
    #f.write(Language.G_Language[1221]+'\n')
    f.write('def MessageBox(text="",title="info",type="info",parent=None):\n')
    f.write('    """'+Language.G_Language[1221]+'"""\n')
    f.write('    global G_TopDialog\n')
    f.write('    global G_TKRoot\n')
    f.write('    if G_TopDialog:\n')
    f.write('        parent = G_TopDialog\n')
    f.write('    winhandle = None\n')
    f.write('    try:\n')
    f.write('        if parent:\n')
    f.write('            winhandle = parent.winfo_id()\n')
    f.write('        elif G_TKRoot:\n')
    f.write('            winhandle = G_TKRoot.winfo_id()\n')
    f.write('    except:\n')
    f.write('        pass\n')
    f.write('    if type == "error":\n')
    #f.write('        tkinter.messagebox.showerror(title,text)\n')
    f.write('        import win32api\n')
    f.write('        import win32con\n')
    f.write('        ICONERROR=16 #错误图标\n')
    f.write('        win32api.MessageBox(winhandle,text,title,win32con.MB_OK|ICONERROR)\n')
    f.write('    else:\n')
    f.write('        import win32api\n')
    f.write('        import win32con\n')
    f.write('        ICONQUESTION=32 #警告图标\n')
    f.write('        win32api.MessageBox(winhandle,text,title,win32con.MB_OK|ICONQUESTION) \n')

    f.write("def RunApplication(uiClass,deiconify=False,projName='',InitCheckFunc=None):\n")
    f.write('    """'+Language.G_Language[9519]+'"""\n')
    f.write('    try:\n')
    f.write('        global G_TKRoot\n')
    f.write('        G_TKRoot = tkinter.Tk()\n')
    f.write('        G_TKRoot.withdraw()\n')
    f.write("        if deiconify == True:\n")
    f.write('            if RunForm1_CallBack(projName,"InitCheck",InitCheckFunc) == False:\n')
    f.write('                sys.exit()\n')
    f.write('                return\n')
    f.write('            MyDlg = uiClass(G_TKRoot)\n')
    f.write("        else:\n")
    f.write('            MyDlg = uiClass(G_TKRoot)\n')
    f.write("        G_TKRoot.attributes('-topmost',1)\n")   
    f.write("        G_TKRoot.attributes('-topmost',0)\n")  
    f.write("        G_TKRoot.mainloop()\n")
    f.write("        sys.exit()\n")
    f.write("    except Exception as Ex:\n")
    f.write("        except_type, except_value, except_traceback = sys.exc_info()\n")
    f.write("        except_value_str = str(except_value)\n")
    f.write("        except_stack_end = except_traceback.tb_frame\n")
    f.write("        except_stack_next = except_traceback.tb_next\n")
    f.write("        except_stack_lineno = except_traceback.tb_lineno\n")
    f.write("        while except_stack_next:\n")
    f.write("            except_stack_end = except_stack_next.tb_frame\n")
    f.write("            except_stack_lineno = except_stack_next.tb_lineno\n")
    f.write("            except_stack_next = except_stack_next.tb_next\n")
    f.write('        except_file = os.path.split(except_stack_end.f_code.co_filename)[1]\n')
    f.write('        MessageBox("'+Language.G_Language[9517]+'：%s\\n'+Language.G_Language[51]+'：%s\\n'+Language.G_Language[3322]+'：%s" % (except_value_str, except_file, except_stack_lineno),"'+Language.G_Language[9518]+'")\n')
#弹出对话框
def WriteInputBoxFunction(f):
    #f.write(Language.G_Language[1222]+'\n')
    f.write("def InputBox(title='',prompt='',initialvalue='',parent=None):\n")
    f.write('    """'+Language.G_Language[1222]+'"""\n')
    f.write('    res = tkinter.simpledialog.askstring(title,prompt=prompt,initialvalue=initialvalue)\n')
    f.write('    return res\n')

    f.write("def InputDialog(width,lines=1,bgColor='#EFEFEF',titleText='',promptText='',defaultText='',callBackFunction=None):\n")
    f.write('    """'+Language.G_Language[9349]+'"""\n')
    f.write('    theInputDialog = tkinter.Toplevel()\n')
    f.write('    theInputDialog.attributes("-toolwindow", 1)\n')
    f.write('    theInputDialog.resizable(1,1)\n')
    f.write('    theInputDialog.wm_attributes("-topmost", 1)\n')
    f.write('    theInputDialog.title(titleText)\n')
    f.write("    height = 140\n")
    f.write('    if lines > 1:\n')
    f.write("       height = 110 + lines * 20\n")
    f.write('    user32 = ctypes.windll.user32\n')
    f.write('    sw = user32.GetSystemMetrics(0)\n')
    f.write('    sh = user32.GetSystemMetrics(1)\n')
    f.write('    zx = int((sw-width)/2) \n')
    f.write('    zy = int((sh-height)/2)\n')
    f.write("    geoinfo = str('%dx%d+%d+%d'%(width,height,zx,zy))\n")
    f.write('    theInputDialog.geometry(geoinfo)\n')
    f.write('    theForm = tkinter.Canvas(theInputDialog,bg = bgColor,width = width,height=height,highlightthickness=0,bd=0)\n')
    f.write("    theForm.pack(expand=1, fill='both')\n")
    f.write("    theDataLabel = tkinter.Label(theForm,anchor = tkinter.W,text=promptText,width = width,bg = bgColor,fg = '#000000',font = ('宋体',12),justify = tkinter.LEFT,height = 1)\n")
    f.write("    theDataLabel.place(x = 20,y = 10,width = width-40,height = 30)\n")
    f.write("    theYPos = 75\n")
    f.write('    if lines == 1:\n')
    f.write('        theEntryText = StringVar()\n')
    f.write("        theEntryText.set('')\n")
    f.write("        theEntry= tkinter.Entry(theForm,textvariable=theEntryText,bg='#FFFFFF',relief=tkinter.FLAT)\n")
    f.write('        theEntry.place(x = 20,y = 45,width = width-40,height = 30)\n')
    f.write('    else:\n')
    f.write('        theEntry= tkinter.Text(theForm,bg="#FFFFFF",relief=tkinter.FLAT)\n')
    f.write('        theEntry.place(x = 20,y = 45,width = width-40,height = lines * 20)\n')
    f.write("        theYPos = 45 + lines * 20\n")
    f.write("    def submitDialog():\n")
    f.write('        if lines == 1:\n')
    f.write("            inputText = theEntryText.get()\n")
    f.write("        else:\n")
    f.write("            inputText = theEntry.get('1.0',tkinter.END)\n")
    f.write("        if callBackFunction:\n")
    f.write("            callBackFunction(inputText)\n")
    f.write("        theInputDialog.destroy()\n")
    f.write("    def closeDialog():\n")
    f.write("        theInputDialog.destroy()\n")
    
    f.write("    centerX = int(width/2)\n")
    f.write("    theOKButton = tkinter.Button(theForm,anchor = tkinter.CENTER,text='"+Language.G_Language[69]+"',width = 100,height = 1,command=submitDialog)\n")
    f.write("    theOKButton.place(x = centerX - 110 ,y = theYPos + 10,width = 100,height = 30)\n")
    f.write("    theCancelButton = tkinter.Button(theForm,anchor = tkinter.CENTER,text='"+Language.G_Language[70]+"',width = 100,height = 1,command=closeDialog)\n")
    f.write("    theCancelButton.place(x = centerX + 10,y = theYPos + 10,width = 100,height = 30)\n")
    f.write("    tkinter.Tk.wait_window(theInputDialog)\n")
        

#弹出对话框
def WriteAskBoxFunction(f):
    #f.write(Language.G_Language[1223]+'\n')
    f.write('def AskBox(title,text,parent=None):\n')
    f.write('    """'+Language.G_Language[1223]+'"""\n')
    f.write('    global G_TopDialog\n')
    f.write('    global G_TKRoot\n')
    f.write('    if G_TopDialog:\n')
    f.write('        parent = G_TopDialog\n')
    #f.write('    res = tkinter.messagebox.askyesno(title,text,parent=parent)\n')
    f.write('    winhandle = None\n')
    f.write('    try:\n')
    f.write('        if parent:\n')
    f.write('            if isinstance(parent,str) == True:\n')
    f.write("                parent = GetElement(parent,'root')\n")
    f.write("                if parent :\n")
    f.write('                    winhandle = parent.winfo_id()\n')
    f.write('            else:\n')
    f.write('                winhandle = parent.winfo_id()\n')
    f.write('        elif G_TKRoot:\n')
    f.write('            winhandle = G_TKRoot.winfo_id()\n')
    f.write('    except:\n')
    f.write('        pass\n')
    f.write('    import win32api\n')
    f.write('    import win32con\n')
    f.write('    ICONQUESTION=32 #警告图标\n')
    f.write('    res =  win32api.MessageBox(winhandle,text,title,win32con.MB_YESNO|ICONQUESTION)\n')
    f.write('    if res == 6:\n')
    f.write('        return True\n')
    f.write('    return False\n')
    f.write('def AskCancelBox(title,text,parent=None):\n')
    f.write('    """'+Language.G_Language[9988]+'"""\n')
    f.write('    global G_TopDialog\n')
    f.write('    global G_TKRoot\n')
    f.write('    if G_TopDialog:\n')
    f.write('        parent = G_TopDialog\n')
    #f.write('    res = tkinter.messagebox.askyesno(title,text,parent=parent)\n')
    f.write('    winhandle = None\n')
    f.write('    try:\n')
    f.write('        if parent:\n')
    f.write('            if isinstance(parent,str) == True:\n')
    f.write("                parent = GetElement(parent,'root')\n")
    f.write("                if parent :\n")
    f.write('                    winhandle = parent.winfo_id()\n')
    f.write('            else:\n')
    f.write('                winhandle = parent.winfo_id()\n')
    f.write('        elif G_TKRoot:\n')
    f.write('            winhandle = G_TKRoot.winfo_id()\n')
    f.write('    except:\n')
    f.write('        pass\n')
    f.write('    import win32api\n')
    f.write('    import win32con\n')
    f.write('    ICONQUESTION=32 #警告图标\n')
    f.write('    res =  win32api.MessageBox(winhandle,text,title,win32con.MB_YESNOCANCEL|ICONQUESTION)\n')
    f.write('    if res == 6:\n')
    f.write('        return "Yes"\n')
    f.write('    elif res == 7:\n')
    f.write('        return "No"\n')
    f.write('    return "Cancel"\n')
#弹出对话框
def WriteWalkAllResFilesFunction(f):
    #f.write(Language.G_Language[1224]+'\n')
    f.write('def WalkAllResFiles(parentPath,alldirs=True,extName=None):\n')
    f.write('    """'+Language.G_Language[1224]+'"""\n')
    f.write('    ResultFilesArray = []\n')
    f.write('    if os.path.exists(parentPath) == True:\n')
    f.write('        for fileName in os.listdir(parentPath):\n')
    f.write("            if '__pycache__' not in fileName:\n")
    f.write("                if '.git' not in fileName:\n")
    f.write("                    newPath = os.path.join(parentPath,fileName)\n")
    f.write('                    newPath = newPath.replace("/","\\\\")\n')
    f.write("                    if os.path.isdir(newPath):\n")
    f.write("                        if extName == None:\n")
    f.write("                           ResultFilesArray.append(newPath)\n")
    f.write("                        if alldirs == True:\n")
    f.write("                            ResultFilesArray.extend(WalkAllResFiles(newPath,alldirs,extName))\n")
    f.write("                    else:\n")
    f.write("                        if extName == None:\n")
    f.write("                            ResultFilesArray.append(newPath)\n")
    f.write("                        else:\n")
    f.write("                            file_extension = os.path.splitext(fileName)[1].replace('.','')\n")
    f.write("                            file_extension_lower = file_extension.lower().strip()\n")
    f.write("                            if isinstance(extName,list) == True:\n")
    f.write("                                extName_lower = [s.lower() for s in extName]\n")
    f.write("                                if file_extension_lower in extName_lower:\n")
    f.write("                                    ResultFilesArray.append(newPath)\n")
    f.write("                            else:\n")
    f.write("                                file_extName_lower = extName.lower().strip()\n")
    f.write("                                if file_extension_lower == file_extName_lower:\n")
    f.write("                                    ResultFilesArray.append(newPath)\n")
    f.write("    return ResultFilesArray\n")

#文件操作处理
def WriteFileOperateFunction(f):
    f.write('def ImportResources(srcFile,coverMode=True):\n')
    f.write('    """'+Language.G_Language[2020]+'"""\n')
    f.write('    try:\n') 
    f.write('        srcPathName,srcFileName = os.path.split(srcFile)\n') 
    f.write('        dstFile = os.path.join(G_ResDir,srcFileName)\n') 
    f.write('        if os.path.normcase(srcFile) != os.path.normcase(dstFile):\n') 
    f.write('            if os.path.exists(dstFile) == True and coverMode == True:\n') 
    f.write('                os.remove(dstFile)\n') 
    f.write('            shutil.copyfile(srcFile,dstFile)\n')
    f.write('        return True\n') 
    f.write('    except Exception as ex:\n') 
    f.write('        print(ex)\n') 
    f.write('    return False\n') 
    f.write('def CopyFile(srcFile,dstFile,coverMode=True):\n')
    f.write('    """'+Language.G_Language[2002]+'"""\n')
    f.write('    try:\n') 
    f.write('        if os.path.exists(dstFile) == True and coverMode == True:\n') 
    f.write('            os.remove(dstFile)\n') 
    f.write('        def CreateParentDir(PathName):\n')
    f.write('            ParentPath,DirName = os.path.split(PathName)\n')
    f.write('            if os.path.exists(ParentPath) == False:\n')
    f.write('                CreateParentDir(ParentPath)\n')
    f.write('            os.mkdir(PathName)\n')
    f.write('        dstPathName,dstFileName = os.path.split(dstFile)\n')
    f.write('        if os.path.exists(dstPathName) == False:\n')
    f.write('            CreateParentDir(dstPathName)\n')
    f.write('        shutil.copyfile(srcFile,dstFile)\n')
    f.write('        return True\n') 
    f.write('    except Exception as ex:\n') 
    f.write('        print(ex)\n') 
    f.write('    return False\n') 
    f.write('def MoveFile(srcFile,dstFile,coverMode=True):\n')
    f.write('    """'+Language.G_Language[2003]+'"""\n')
    f.write('    try:\n') 
    f.write('        if os.path.exists(dstFile) == True and coverMode == True:\n') 
    f.write('            os.remove(dstFile)\n') 
    f.write('        shutil.move(srcFile,dstFile)\n')
    f.write('        return True\n') 
    f.write('    except Exception as ex:\n') 
    f.write('        print(ex)\n') 
    f.write('    return False\n') 
    f.write('def DeleteFile(dstFile):\n')
    f.write('    """'+Language.G_Language[2004]+'"""\n')
    f.write('    if os.path.exists(dstFile) == True:\n') 
    f.write('        os.remove(dstFile)\n')
    f.write('def GetFileMD5(srcFile):\n')
    f.write('    """'+Language.G_Language[2005]+'"""\n')
    f.write('    import hashlib\n')
    f.write('    try:\n')
    f.write('        if os.path.exists(srcFile) == True:\n') 
    f.write("            with open(srcFile, 'rb') as file:\n")
    f.write('                data = file.read()\n')
    f.write('                md5_hash = hashlib.md5(data).hexdigest()\n')
    f.write('                return md5_hash\n')
    f.write('    except Exception as ex:\n') 
    f.write('        print(ex)\n') 
    f.write('    return None\n')
    f.write('def CompareFileMD5(srcFile,dstFile):\n')
    f.write('    """'+Language.G_Language[2014]+'"""\n')
    f.write('    MD51 = GetFileMD5(srcFile)\n')
    f.write('    MD52 = GetFileMD5(dstFile) \n')
    f.write('    return MD51 != None and MD51 == MD52\n')
    f.write('def CreateDir(dstDir,coverMode=True):\n')
    f.write('    """'+Language.G_Language[2011]+'"""\n')
    f.write('    try:\n') 
    f.write('        if os.path.exists(dstDir) == True:\n') 
    f.write('            if coverMode == True:\n') 
    f.write('                shutil.rmtree(dstDir)\n') 
    f.write('            else:\n') 
    f.write('                return True\n') 
    f.write('        def CreateParentDir(PathName):\n')
    f.write('            ParentPath,DirName = os.path.split(PathName)\n')
    f.write('            if ParentPath and os.path.exists(ParentPath) == False:\n')
    f.write('                CreateParentDir(ParentPath)\n')
    f.write('            os.mkdir(PathName)\n')
    f.write('        CreateParentDir(dstDir)\n')
    f.write('        return True\n') 
    f.write('    except Exception as ex:\n') 
    f.write('        print(ex)\n') 
    f.write('    return False\n') 
    f.write('def CopyDir(srcDir,dstDir,coverMode=True):\n')
    f.write('    """'+Language.G_Language[2008]+'"""\n')
    f.write('    try:\n') 
    f.write('        if os.path.exists(dstDir) == True and coverMode == True:\n') 
    f.write('            shutil.rmtree(dstDir)\n') 
    f.write('        shutil.copytree(srcDir, dstDir)\n')
    f.write('        return True\n') 
    f.write('    except Exception as ex:\n') 
    f.write('        print(ex)\n') 
    f.write('    return False\n') 
    f.write('def MoveDir(srcDir,dstDir,coverMode=True):\n')
    f.write('    """'+Language.G_Language[2009]+'"""\n')
    f.write('    try:\n') 
    f.write('        if os.path.exists(dstDir) == True and coverMode == True:\n') 
    f.write('            shutil.rmtree(dstDir)\n') 
    f.write('        shutil.copytree(srcDir, dstDir)\n') 
    f.write('        shutil.rmtree(srcDir)\n') 
    f.write('        return True\n') 
    f.write('    except Exception as ex:\n') 
    f.write('        print(ex)\n') 
    f.write('    return False\n') 
    f.write('def DeleteDir(srcDir):\n')
    f.write('    """'+Language.G_Language[2010]+'"""\n')
    f.write('    return shutil.rmtree(srcDir)\n')
    f.write('def CheckIsDir(srcDir):\n')
    f.write('    """'+Language.G_Language[2012]+'"""\n')
    f.write('    return os.path.isdir(srcDir)\n')
    f.write('def CheckExist(srcDir):\n')
    f.write('    """'+Language.G_Language[2013]+'"""\n')
    f.write('    return os.path.exists(srcDir)\n')
    f.write('def GetFileExtension(srcFile):\n')
    f.write('    """'+Language.G_Language[2503]+'"""\n')
    f.write('    pathName,fileName = os.path.split(srcFile)\n')
    f.write('    shotname,extension = os.path.splitext(fileName)\n')
    f.write('    return extension\n')

#写入修改参数的函数
def WriteAddParamsFunction(f):
    #f.write(Language.G_Language[1225]+'\n')
    f.write('def EventFunction_Adaptor(fun,  **params):\n')
    f.write('    """'+Language.G_Language[1225]+'"""\n')
    f.write('    return lambda event, fun=fun, params=params: fun(event, **params)\n')
    f.write('def EventTwoFunction_Adaptor(fun1,fun2, **params):\n')
    f.write('    """'+Language.G_Language[1225]+'"""\n')
    f.write('    return lambda event, fun1=fun1,fun2=fun2, params=params: (fun1(event, **params),fun2(event, **params))\n')
    f.write('def CommandFunction_Adaptor(fun,uiName,widgetName):\n')
    f.write('    """'+Language.G_Language[1225]+'"""\n')
    f.write('    button = GetElement(uiName,widgetName)\n')
    f.write('    if button:\n')
    f.write('        button.focus_set()\n')
    f.write('    fun(uiName=uiName,widgetName=widgetName)\n')
    f.write('def SetValueChangedFunction(fun, uiName,widgetName):\n')
    f.write('    """'+Language.G_Language[1225]+'"""\n')
    f.write('    return lambda value,fun=fun: fun(uiName=uiName,widgetName=widgetName,value=value)\n')

    f.write('def ListViewHeadingFunction_Adaptor(fun,uiName,widgetName,columnname):\n')
    f.write('    """'+Language.G_Language[1225]+'"""\n')
    # f.write('    button = GetElement(uiName,widgetName)\n')
    # f.write('    if button:\n')
    # f.write('        button.focus_set()\n')
    f.write('    fun(uiName = uiName , widgetName = widgetName,columnname = columnname)\n')
    f.write('def MenuFunction_Adaptor(fun,  **params):\n')
    f.write('    """'+Language.G_Language[1225]+'"""\n')
    f.write('    return lambda event, fun=fun, params=params: fun(**params)\n')
    f.write('class   PyMeEvent():\n')
    f.write('    def __init__(self,x,y,tag=None):\n')
    f.write('        self.x = x\n')
    f.write('        self.y = y\n')
    f.write('        self.tag = tag\n')
    f.write('class   ChartEvent():\n')
    f.write('    def __init__(self,width,height,widget):\n')
    f.write('        self.width = width\n')
    f.write('        self.height = height\n')
    f.write('        self.widget = widget\n')
    f.write('class   ResetPrintClass():\n')
    f.write('    """'+Language.G_Language[8645]+'"""\n')
    f.write('    def __init__(self):\n')
    f.write('        self.str = ""\n')
    f.write('    def write(self,s):\n')
    f.write('        self.str += s\n')
    f.write('    def clear(self):\n')
    f.write('        self.str = ""\n')
    f.write('    def getString(self):\n')
    f.write('        return self.str\n')
    f.write("def GetParentCallFunc():\n")
    f.write('    """'+Language.G_Language[9400]+'"""\n')
    f.write("    stackFunctionInfo = inspect.currentframe().f_back\n")
    f.write("    while stackFunctionInfo is not None and '__name__' in stackFunctionInfo.f_globals:\n")
    f.write("        if stackFunctionInfo.f_code.co_filename != __file__: \n")
    f.write("            parent_func = stackFunctionInfo.f_globals['__name__'] + \".\" + stackFunctionInfo.f_code.co_name\n")
    f.write("            return [parent_func,list(stackFunctionInfo.f_locals.values())]\n")
    f.write("        stackFunctionInfo = stackFunctionInfo.f_back\n")
    f.write("    return [None,None]\n")
#写入拖放文件函数
def WriteDropFileFunction(f):
    f.write('def DropFileFunction_Callback(fun,files, **params):\n')
    f.write('    fileList = []\n')
    f.write('    for fileName in files:\n')
    f.write("        fileList.append(fileName.decode('gbk'))\n")
    f.write("    threading.Thread(target=fun,args=(fileList,params['uiName'],params['widgetName'])).start()\n")
    #f.write("    fun(**params,files=fileList)\n")
    f.write('def DropFileFunction_Adaptor(fun,  **params):\n')
    f.write('    return lambda files, fun=fun, params=params: DropFileFunction_Callback(fun,files, **params)\n')
    f.write('def SetControlAcceptDrop(uiName,elementName,functionCallback):\n')
    f.write('    """'+Language.G_Language[9201]+'"""\n')
    f.write('    Control = GetElement(uiName,elementName)\n')
    f.write('    if Control is None:\n')
    f.write('        return \n')
    f.write('    if hasattr(Control,"GetEntry") == True:\n')
    f.write('        Control = Control.GetEntry()\n')
    f.write('    elif hasattr(Control,"GetWidget") == True:\n')
    f.write('        Control = Control.GetWidget()\n')
    f.write('    import windnd\n')
    f.write('    windnd.hook_dropfiles(Control,func=DropFileFunction_Adaptor(functionCallback,uiName=uiName,widgetName=elementName))\n')

#写入修改参数的函数
def WriteSetControlPackFunction(f):
    #f.write(Language.G_Language[1241]+'\n')
    f.write('def SetControlPack(uiName,elementName,fill,side,padx,pady,expand,width=0,height=0):\n')
    f.write('    """'+Language.G_Language[1241]+'"""\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if hasattr(Control,"GetWidget") == True:\n')
    f.write('            Control = Control.GetWidget()\n')
    f.write('        Control.pack(fill = fill,side = side,padx = padx,pady = pady,expand = expand)\n')
    f.write('        if expand == 0:\n')
    f.write('            Control.pack_propagate(0)\n')
    f.write('            try:\n')
    f.write('               Control.configure(width=width)\n')
    f.write('               Control.configure(height=height)\n')
    f.write('            except:\n')
    f.write('               pass\n')
    f.write('        PackDictionary = {}\n')
    f.write('        PackDictionary["type"] = "pack"\n')
    f.write('        PackDictionary["fill"] = fill\n')
    f.write('        PackDictionary["side"] = side\n')
    f.write('        PackDictionary["padx"] = padx\n')
    f.write('        PackDictionary["pady"] = pady\n')
    f.write('        PackDictionary["expand"] = expand\n')
    f.write('        PackDictionary["visible"] = True\n')
    f.write('        G_UIElementPlaceDictionary[uiName][elementName]=PackDictionary\n')
#写入修改参数的函数
def WriteSetControlGridFunction(f):
    #f.write(Language.G_Language[1242]+'\n')
    f.write('def SetControlGrid(uiName,elementName,row,column,rowspan,columnspan):\n')
    f.write('    """'+Language.G_Language[1242]+'"""\n')
    
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if hasattr(Control,"GetWidget") == True:\n')
    f.write('            Control = Control.GetWidget()\n')
    f.write('        Control.grid(row = row,column = column,rowspan = rowspan,columnspan = columnspan)\n')
    f.write('        GridDictionary = {}\n')
    f.write('        GridDictionary["type"] = "grid"\n')
    f.write('        GridDictionary["row"] = row\n')
    f.write('        GridDictionary["column"] = column\n')
    f.write('        GridDictionary["rowspan"] = rowspan\n')
    f.write('        GridDictionary["columnspan"] = columnspan\n')
    f.write('        GridDictionary["visible"] = True\n')
    f.write('        G_UIElementPlaceDictionary[uiName][elementName]=GridDictionary\n')
#写入设置位置
def WriteSetControlPlaceFunction(f):
    #f.write(Language.G_Language[1226]+'\n')
    f.write('def SetControlPlace(uiName,elementName,x,y,w,h,anchorpoint=\'nw\',visible=True,modify=True):\n')
    f.write('    """'+Language.G_Language[1226]+'"""\n')
    f.write('    Control = GetElement(uiName,elementName)\n') 
    f.write('    OldControl = Control\n') 
    f.write('    if Control:\n') 
    f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('            elementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    f.write('        if hasattr(Control,"GetWidget") == True:\n')
    f.write('            Control = Control.GetWidget()\n')
    f.write('    def getXW(value):\n')
    f.write('        return value\n')
    f.write('    def getYH(value):\n')
    f.write('        return value\n')
    f.write('    if Control != None:\n')
    f.write('        ParentWidth,ParentHeight = GetUIRootSize(uiName)\n')
    f.write('        try:\n')
    f.write('            PlaceInfo = Control.place_info()\n')
    f.write('            if len(PlaceInfo) > 0:\n')
    f.write('                #避免拖动窗体时闪烁\n')
    f.write('                if ("relx" in PlaceInfo and float(PlaceInfo["relx"]) > 0) or ("rely" in PlaceInfo and float(PlaceInfo["rely"]) > 0) :\n')
    f.write('                    Control.place_forget()\n')
    f.write('        except Exception as ex:\n')
    #对于某些非界面组件也调用了，就直接返回
    #f.write('           print(ex)\n')
    f.write('           return\n')
    f.write('        if type(x) == type(1.0):\n')
    f.write('            if type(y) == type(1.0):\n')
    f.write('                if type(w) == type(1.0):\n')
    f.write('                    if type(h) == type(1.0):\n')
    f.write('                        if visible == True:\n')
    f.write('                            Control.place(relx=x,rely=y,relwidth=w,relheight=h)\n')
    f.write('                        if modify == True:\n')
    f.write('                            PlaceDictionary = {}\n')
    f.write('                            PlaceDictionary["type"] = "place"\n')
    f.write('                            PlaceDictionary["relx"] = x\n')
    f.write('                            PlaceDictionary["rely"] = y\n')
    f.write('                            PlaceDictionary["relwidth"] = w\n')
    f.write('                            PlaceDictionary["relheight"] = h\n')
    f.write('                            PlaceDictionary["visible"] = visible\n')
    f.write('                            PlaceDictionary["anchorpoint"] = anchorpoint\n')
    f.write('                            G_UIElementPlaceDictionary[uiName][elementName]=PlaceDictionary\n')
    f.write('                    else:\n')
    f.write('                        if visible == True:\n')
    f.write('                            Control.place(relx=x,rely=y,relwidth=w,height=getYH(h))\n')
    f.write('                        if modify == True:\n')
    f.write('                            PlaceDictionary = {}\n')
    f.write('                            PlaceDictionary["type"] = "place"\n')
    f.write('                            PlaceDictionary["relx"] = x\n')
    f.write('                            PlaceDictionary["rely"] = y\n')
    f.write('                            PlaceDictionary["relwidth"] = w\n')
    f.write('                            PlaceDictionary["height"] = getYH(h)\n')
    f.write('                            PlaceDictionary["visible"] = visible\n')
    f.write('                            PlaceDictionary["anchorpoint"] = anchorpoint\n')
    f.write('                            G_UIElementPlaceDictionary[uiName][elementName]=PlaceDictionary\n')
    f.write('                else:\n')
    f.write('                    if type(h) == type(1.0):\n')
    f.write('                        if visible == True:\n')
    f.write('                            Control.place(relx=x,rely=y,width=getXW(w),relheight=h)\n')
    f.write('                        if modify == True:\n')
    f.write('                            PlaceDictionary = {}\n')
    f.write('                            PlaceDictionary["type"] = "place"\n')
    f.write('                            PlaceDictionary["relx"] = x\n')
    f.write('                            PlaceDictionary["rely"] = y\n')
    f.write('                            PlaceDictionary["width"] = getXW(w)\n')
    f.write('                            PlaceDictionary["relheight"] = h\n')
    f.write('                            PlaceDictionary["visible"] = visible\n')
    f.write('                            PlaceDictionary["anchorpoint"] = anchorpoint\n')
    f.write('                            G_UIElementPlaceDictionary[uiName][elementName]=PlaceDictionary\n')
    f.write('                    else:\n')
    f.write('                        if visible == True:\n')
    f.write('                            Control.place(relx=x,rely=y,width=getXW(w),height=getYH(h))\n')
    f.write('                        if modify == True:\n')
    f.write('                            PlaceDictionary = {}\n')
    f.write('                            PlaceDictionary["type"] = "place"\n')
    f.write('                            PlaceDictionary["relx"] = x\n')
    f.write('                            PlaceDictionary["rely"] = y\n')
    f.write('                            PlaceDictionary["width"] = getXW(w)\n')
    f.write('                            PlaceDictionary["height"] = getYH(h)\n')
    f.write('                            PlaceDictionary["visible"] = visible\n')
    f.write('                            PlaceDictionary["anchorpoint"] = anchorpoint\n')
    f.write('                            G_UIElementPlaceDictionary[uiName][elementName]=PlaceDictionary\n')
    f.write('            else:\n')
    f.write('                if type(w) == type(1.0):\n')
    f.write('                    if type(h) == type(1.0):\n')
    f.write('                        if visible == True:\n')
    f.write('                            Control.place(relx=x,y=getYH(y),relwidth=w,relheight=h)\n')
    f.write('                        if modify == True:\n')
    f.write('                            PlaceDictionary = {}\n')
    f.write('                            PlaceDictionary["type"] = "place"\n')
    f.write('                            PlaceDictionary["relx"] = x\n')
    f.write('                            PlaceDictionary["y"] = getYH(y)\n')
    f.write('                            PlaceDictionary["relwidth"] = w\n')
    f.write('                            PlaceDictionary["relheight"] = h\n')
    f.write('                            PlaceDictionary["visible"] = visible\n')
    f.write('                            PlaceDictionary["anchorpoint"] = anchorpoint\n')
    f.write('                            G_UIElementPlaceDictionary[uiName][elementName]=PlaceDictionary\n')
    f.write('                    else:\n')
    f.write('                        if visible == True:\n')
    f.write('                            Control.place(relx=x,y=getYH(y),relwidth=w,height=getYH(h))\n')
    f.write('                        if modify == True:\n')
    f.write('                            PlaceDictionary = {}\n')
    f.write('                            PlaceDictionary["type"] = "place"\n')
    f.write('                            PlaceDictionary["relx"] = x\n')
    f.write('                            PlaceDictionary["y"] = getYH(y)\n')
    f.write('                            PlaceDictionary["relwidth"] = w\n')
    f.write('                            PlaceDictionary["height"] = getYH(h)\n')
    f.write('                            PlaceDictionary["visible"] = visible\n')
    f.write('                            PlaceDictionary["anchorpoint"] = anchorpoint\n')
    f.write('                            G_UIElementPlaceDictionary[uiName][elementName]=PlaceDictionary\n')
    f.write('                else:\n')
    f.write('                    if type(h) == type(1.0):\n')
    f.write('                        if visible == True:\n')
    f.write('                            Control.place(relx=x,y=getYH(y),width=w,relheight=h)\n')
    f.write('                        if modify == True:\n')
    f.write('                            PlaceDictionary = {}\n')
    f.write('                            PlaceDictionary["type"] = "place"\n')
    f.write('                            PlaceDictionary["relx"] = x\n')
    f.write('                            PlaceDictionary["y"] = getYH(y)\n')
    f.write('                            PlaceDictionary["relwidth"] = w\n')
    f.write('                            PlaceDictionary["relheight"] = h\n')
    f.write('                            PlaceDictionary["visible"] = visible\n')
    f.write('                            PlaceDictionary["anchorpoint"] = anchorpoint\n')
    f.write('                            G_UIElementPlaceDictionary[uiName][elementName]=PlaceDictionary\n')
    f.write('                    else:\n')
    f.write('                        if visible == True:\n')
    f.write('                            Control.place(relx=x,y=getYH(y),width=w,height=getYH(h))\n')
    f.write('                        if modify == True:\n')
    f.write('                            PlaceDictionary = {}\n')
    f.write('                            PlaceDictionary["type"] = "place"\n')
    f.write('                            PlaceDictionary["relx"] = x\n')
    f.write('                            PlaceDictionary["y"] = getYH(y)\n')
    f.write('                            PlaceDictionary["relwidth"] = w\n')
    f.write('                            PlaceDictionary["height"] = getYH(h)\n')
    f.write('                            PlaceDictionary["visible"] = visible\n')
    f.write('                            PlaceDictionary["anchorpoint"] = anchorpoint\n')
    f.write('                            G_UIElementPlaceDictionary[uiName][elementName]=PlaceDictionary\n')
    f.write('        else:\n')
    f.write('            if type(y) == type(1.0):\n')
    f.write('                if type(w) == type(1.0):\n')
    f.write('                    if type(h) == type(1.0):\n')
    f.write('                        if visible == True:\n')
    f.write('                            Control.place(x=getXW(x),rely=y,relwidth=w,relheight=h)\n')
    f.write('                        if modify == True:\n')
    f.write('                            PlaceDictionary = {}\n')
    f.write('                            PlaceDictionary["type"] = "place"\n')
    f.write('                            PlaceDictionary["x"] = getXW(x)\n')
    f.write('                            PlaceDictionary["rely"] = y\n')
    f.write('                            PlaceDictionary["relwidth"] = w\n')
    f.write('                            PlaceDictionary["relheight"] = h\n')
    f.write('                            PlaceDictionary["visible"] = visible\n')
    f.write('                            PlaceDictionary["anchorpoint"] = anchorpoint\n')
    f.write('                            G_UIElementPlaceDictionary[uiName][elementName]=PlaceDictionary\n')
    f.write('                    else:\n')
    f.write('                        if visible == True:\n')
    f.write('                            Control.place(x=getXW(x),rely=y,relwidth=w,height=getYH(h))\n')
    f.write('                        if modify == True:\n')
    f.write('                            PlaceDictionary = {}\n')
    f.write('                            PlaceDictionary["type"] = "place"\n')
    f.write('                            PlaceDictionary["x"] = getXW(x)\n')
    f.write('                            PlaceDictionary["rely"] = y\n')
    f.write('                            PlaceDictionary["relwidth"] = w\n')
    f.write('                            PlaceDictionary["height"] = getYH(h)\n')
    f.write('                            PlaceDictionary["visible"] = visible\n')
    f.write('                            PlaceDictionary["anchorpoint"] = anchorpoint\n')
    f.write('                            G_UIElementPlaceDictionary[uiName][elementName]=PlaceDictionary\n')
    f.write('                else:\n')
    f.write('                    if type(h) == type(1.0):\n')
    f.write('                        if visible == True:\n')
    f.write('                            Control.place(x=getXW(x),rely=y,width=getXW(w),relheight=h)\n')
    f.write('                        if modify == True:\n')
    f.write('                            PlaceDictionary = {}\n')
    f.write('                            PlaceDictionary["type"] = "place"\n')
    f.write('                            PlaceDictionary["x"] = getXW(x)\n')
    f.write('                            PlaceDictionary["rely"] = y\n')
    f.write('                            PlaceDictionary["width"] = getXW(w)\n')
    f.write('                            PlaceDictionary["relheight"] = h\n')
    f.write('                            PlaceDictionary["visible"] = visible\n')
    f.write('                            PlaceDictionary["anchorpoint"] = anchorpoint\n')
    f.write('                            G_UIElementPlaceDictionary[uiName][elementName]=PlaceDictionary\n')
    f.write('                    else:\n')
    f.write('                        if visible == True:\n')
    f.write('                            Control.place(x=getXW(x),rely=y,width=getXW(w),height=getYH(h))\n')
    f.write('                        if modify == True:\n')
    f.write('                            PlaceDictionary = {}\n')
    f.write('                            PlaceDictionary["type"] = "place"\n')
    f.write('                            PlaceDictionary["x"] = getXW(x)\n')
    f.write('                            PlaceDictionary["rely"] = y\n')
    f.write('                            PlaceDictionary["width"] = getXW(w)\n')
    f.write('                            PlaceDictionary["height"] = getYH(h)\n')
    f.write('                            PlaceDictionary["visible"] = visible\n')
    f.write('                            PlaceDictionary["anchorpoint"] = anchorpoint\n')
    f.write('                            G_UIElementPlaceDictionary[uiName][elementName]=PlaceDictionary\n')
    f.write('            else:\n')
    f.write('                if type(w) == type(1.0):\n')
    f.write('                    if type(h) == type(1.0):\n')
    f.write('                        if visible == True:\n')
    f.write('                            Control.place(x=getXW(x),y=getYH(y),relwidth=w,relheight=h)\n')
    f.write('                        if modify == True:\n')
    f.write('                            PlaceDictionary = {}\n')
    f.write('                            PlaceDictionary["type"] = "place"\n')
    f.write('                            PlaceDictionary["x"] = getXW(x)\n')
    f.write('                            PlaceDictionary["y"] = getYH(y)\n')
    f.write('                            PlaceDictionary["relwidth"] = w\n')
    f.write('                            PlaceDictionary["relheight"] = h\n')
    f.write('                            PlaceDictionary["visible"] = visible\n')
    f.write('                            PlaceDictionary["anchorpoint"] = anchorpoint\n')
    f.write('                            G_UIElementPlaceDictionary[uiName][elementName]=PlaceDictionary\n')
    f.write('                    else:\n')
    f.write('                        if visible == True:\n')
    f.write('                            Control.place(x=getXW(x),y=getYH(y),relwidth=w,height=getYH(h))\n')
    f.write('                        if modify == True:\n')
    f.write('                            PlaceDictionary = {}\n')
    f.write('                            PlaceDictionary["type"] = "place"\n')
    f.write('                            PlaceDictionary["x"] = getXW(x)\n')
    f.write('                            PlaceDictionary["y"] = getYH(y)\n')
    f.write('                            PlaceDictionary["relwidth"] = w\n')
    f.write('                            PlaceDictionary["height"] = getYH(h)\n')
    f.write('                            PlaceDictionary["visible"] = visible\n')
    f.write('                            PlaceDictionary["anchorpoint"] = anchorpoint\n')
    f.write('                            G_UIElementPlaceDictionary[uiName][elementName]=PlaceDictionary\n')
    f.write('                else:\n')
    f.write('                    if type(h) == type(1.0):\n')
    f.write('                        if visible == True:\n')
    f.write('                            Control.place(x=getXW(x),y=getYH(y),width=getXW(w),relheight=h)\n')
    f.write('                        if modify == True:\n')
    f.write('                            PlaceDictionary = {}\n')
    f.write('                            PlaceDictionary["type"] = "place"\n')
    f.write('                            PlaceDictionary["x"] = getXW(x)\n')
    f.write('                            PlaceDictionary["y"] = getYH(y)\n')
    f.write('                            PlaceDictionary["width"] = getXW(w)\n')
    f.write('                            PlaceDictionary["relheight"] = h\n')
    f.write('                            PlaceDictionary["visible"] = visible\n')
    f.write('                            PlaceDictionary["anchorpoint"] = anchorpoint\n')
    f.write('                            G_UIElementPlaceDictionary[uiName][elementName]=PlaceDictionary\n')
    f.write('                    else:\n')
    # f.write('                        Control.place(x=getXW(x),y=getYH(y),width=getXW(w),height=getYH(h))\n')
    f.write('                        PlaceDictionary = {}\n')
    f.write("                        if h == '' and w == '':\n")
    f.write('                            if visible == True:\n')
    f.write("                                Control.place(x=getXW(x),y=getYH(y))\n")
    f.write('                            if modify == True:\n')
    f.write("                                PlaceDictionary[\"width\"] = ''\n")
    f.write("                                PlaceDictionary[\"height\"] = ''\n")
    f.write("                        elif h == '':\n")
    f.write('                            if visible == True:\n')
    f.write("                                Control.place(x=getXW(x),y=getYH(y),width=getXW(w))\n")
    f.write('                            if modify == True:\n')
    f.write("                                PlaceDictionary[\"width\"] = getXW(w)\n")
    f.write("                                PlaceDictionary[\"height\"] = ''\n")
    f.write("                        elif w == '':\n")
    f.write('                            if visible == True:\n')
    f.write("                                Control.place(x=getXW(x),y=getYH(y),height=getYH(h))\n")
    f.write('                            if modify == True:\n')
    f.write("                                PlaceDictionary[\"width\"] = ''\n")
    f.write("                                PlaceDictionary[\"height\"] = getYH(h)\n")
    f.write("                        else:\n")
    f.write('                            if visible == True:\n')
    f.write("                                Control.place(x=getXW(x),y=getYH(y),width=getXW(w),height=getYH(h))\n")
    f.write('                            if modify == True:\n')
    f.write("                                PlaceDictionary[\"width\"] =  getXW(w)\n")
    f.write("                                PlaceDictionary[\"height\"] = getYH(h)\n")
    f.write('                        if modify == True:\n')
    f.write('                            PlaceDictionary["type"] = "place"\n')
    f.write('                            PlaceDictionary["x"] = getXW(x)\n')
    f.write('                            PlaceDictionary["y"] = getYH(y)\n')
    f.write('                            PlaceDictionary["visible"] = True\n')
    f.write('                            PlaceDictionary["anchorpoint"] = anchorpoint\n')
    f.write('                            G_UIElementPlaceDictionary[uiName][elementName]=PlaceDictionary\n')
    f.write('    if Control != None and visible == True:\n')
    f.write('        Control.update()\n')
    f.write('        if elementName.find("Frame_") >= 0 or elementName.find("LabelFrame_") >= 0 or elementName.find("PanedWindow_") >= 0:\n')
    f.write('            for childWidgetName in Control.children.keys():\n')
    f.write('                frameCanvas = Control.children[childWidgetName]\n')
    f.write('                for uiName in G_UIElementDictionary.keys():\n')
    f.write('                    if G_UIElementDictionary[uiName]["root"] is frameCanvas:\n')
    f.write('                        if "UIClass" in  G_UIElementDictionary[uiName].keys():\n')
    f.write('                            uiClass = GetElement(uiName,"UIClass")\n')
    f.write('                            if uiClass:\n')
    f.write('                                Form_1 = GetElement(uiName,"Form_1")\n')
    f.write('                                if Form_1:\n')
    f.write('                                    Form_1_Width = frameCanvas.winfo_width()\n')
    f.write('                                    Form_1_Height = frameCanvas.winfo_height()\n')
    f.write('                                    event = ChartEvent(Form_1_Width,Form_1_Height,Form_1)\n')
    f.write('                                    if hasattr(uiClass,"Configure") == True:\n')
    f.write('                                        uiClass.Configure(event)\n')
    f.write('    if elementName.find("LabelButton_") >= 0 or elementName.find("Entry") >= 0 or elementName.find("Text") >= 0:\n')
    f.write('        if hasattr(OldControl,"Configure") == True:\n')
    f.write('            event = ChartEvent(w,h,OldControl)\n')
    f.write('            OldControl.Configure(event)\n')
    f.write('    if elementName.find("Calendar_") >= 0 or elementName.find("DatePicker_") >= 0 or elementName.find("Navigation_") >= 0 or elementName.find("ListMenu_") >= 0 or elementName.find("SwitchPage_") >= 0 or elementName.find("ShowCase_") >= 0:\n')
    f.write('        if visible == False:\n')
    f.write('            if hasattr(OldControl,"Hide") == True:\n')
    f.write('                OldControl.Hide()\n')
    # f.write("def ResizeControlImage(uiName,elementName):\n")
    # f.write('    """'+Language.G_Language[1213]+'"""\n')
    # f.write('    global G_UIElementAliasDictionary\n')
    # f.write('    global G_UIElementDictionary\n')
    # f.write('    global G_UIElementVariableArray\n')
    # f.write('    global G_ResourcesFileList\n')
    # f.write('    Control = GetElement(uiName,elementName)\n') 
    # f.write('    if Control:\n') 
    # f.write('        Control_Width = Control.winfo_width()\n') 
    # f.write('        Control_Height = Control.winfo_height()\n') 
    # f.write('        realElementName = elementName\n') 
    # f.write('        if uiName in G_UIElementAliasDictionary.keys() and elementName in G_UIElementAliasDictionary[uiName].keys():\n')
    # f.write('            realElementName = G_UIElementAliasDictionary[uiName][elementName]\n') 
    # f.write('        if realElementName:\n')
    # f.write('            if uiName in G_UIElementUserDataArray:\n')
    # f.write('                if realElementName in G_UIElementUserDataArray[uiName]:\n')
    # f.write('                    for EBData in G_UIElementUserDataArray[uiName][realElementName]:\n')   
    # f.write('                        if EBData[0] == \'image\' and EBData[1] == \'imageInfo\':\n')
    # f.write('                            imagePath = EBData[2][1]\n')
    # f.write('                            autoSize = EBData[2][2]\n')
    # f.write('                            from   PIL import Image,ImageTk\n')
    # f.write('                            imagePath_Lower = imagePath.lower()\n')
    # f.write('                            if os.path.exists(imagePath) == False:\n')
    # f.write('                                if imagePath_Lower in G_ResourcesFileList:\n')
    # f.write('                                   imagePath = G_ResourcesFileList[imagePath_Lower]\n')
    # f.write('                                if os.path.exists(imagePath) == False:\n')
    # f.write('                                    return\n')
    # f.write('                            image=Image.open(imagePath).convert(\'RGBA\')\n')
    # f.write('                            if autoSize == True:\n')
    # f.write('                                image_Resize = image.resize((Control_Width, Control_Height),Image.LANCZOS)\n')
    # f.write('                            else:\n')
    # f.write('                                image_Resize = image\n')
    # f.write('                            EBData[2][0] = ImageTk.PhotoImage(image_Resize)\n')
    # f.write('                            if realElementName.find(\'Label_\') >= 0 or realElementName.find(\'Button_\') >= 0 :\n')
    # f.write('                                Control.configure(image = EBData[2][0])\n')
    # f.write('                            elif realElementName.find(\'Text_\') >= 0: \n')
    # f.write('                                Control.delete(\'0.0\',tkinter.END)\n')
    # f.write('                                Control.image_create(tkinter.END, image=newPTImage)\n')

    f.write('def GetControlPlace_AnchorPoint(uiName,elementName):\n')
    f.write('    if uiName not in G_UIElementPlaceDictionary:\n')
    f.write('        return\n')
    f.write('    RealElementName = elementName\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and RealElementName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        RealElementName = G_UIElementAliasDictionary[uiName][RealElementName]\n') 
    f.write('    anchorPoint = \'nw\'\n')
    f.write('    if RealElementName in  G_UIElementPlaceDictionary[uiName].keys():\n')
    f.write('        if "anchorpoint" in G_UIElementPlaceDictionary[uiName][RealElementName]:\n')
    f.write('            anchorPoint = G_UIElementPlaceDictionary[uiName][RealElementName]["anchorpoint"]\n')
    f.write('    return anchorPoint\n')

    f.write('def UpdateAllElementPlace(uiName,HScrollBarOffsetY=0,VScrollBarOffsetX=0):\n')
    f.write('    """'+Language.G_Language[1722]+'"""\n')
    f.write('    if uiName not in G_UIElementPlaceDictionary:\n')
    f.write('        return\n')
    f.write('    for elementName in G_UIElementPlaceDictionary[uiName]:\n')
    f.write('        if elementName == "Form_1":\n')
    f.write('            continue\n')
    f.write('        UpdateElementPlace(uiName,elementName,HScrollBarOffsetY,VScrollBarOffsetX)\n')
    f.write('def UpdateElementPlace(uiName,elementName,HScrollBarOffsetY=0,VScrollBarOffsetX=0):\n')
    f.write('    """'+Language.G_Language[1722]+'"""\n')
    f.write('    def getPercentXY(x,y,width,height,parentWidth,parentHeight,anchorpoint):\n')
    f.write("        if width =='' or height == '':\n")
    f.write("            return x,y\n")
    f.write("        if isinstance(x,float) == True:\n")
    f.write("            x = x * parentWidth\n")
    f.write("        if isinstance(y,float) == True:\n")
    f.write("            y = y * parentHeight\n")
    f.write("        anchorX = x / parentWidth\n")
    f.write("        anchorY = y / parentHeight\n")
    f.write("        return anchorX,anchorY\n")
    f.write('    if uiName not in G_UIElementPlaceDictionary:\n')
    f.write('        return\n')
    f.write('    if elementName in G_UIElementPlaceDictionary[uiName]:\n')
    f.write('        Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('        if hasattr(Control,"GetEntry") == True:\n')
    f.write('            Control = Control.GetEntry()\n')
    f.write('        elif hasattr(Control,"GetWidget") == True:\n')
    f.write('            Control = Control.GetWidget()\n')
    f.write('        ControlParentInfo = Control.winfo_parent()\n')
    f.write('        ControlParentWidget = Control._nametowidget(ControlParentInfo)\n')
    f.write('        ParentWidth = ControlParentWidget.winfo_width()\n')
    f.write('        ParentHeight = ControlParentWidget.winfo_height()\n')
    f.write('        if ParentWidth == 1 and ParentHeight == 1:\n')
    f.write('            return\n')
    f.write('        Visible = True\n')
    f.write('        if "visible" in G_UIElementPlaceDictionary[uiName][elementName]:\n')
    f.write('            Visible = G_UIElementPlaceDictionary[uiName][elementName]["visible"]\n')
    f.write('        PlaceType = "pack"\n')
    f.write('        if "type" in G_UIElementPlaceDictionary[uiName][elementName]:\n')
    f.write('            PlaceType = G_UIElementPlaceDictionary[uiName][elementName]["type"]\n')
    f.write('        if Visible == True:\n')
    f.write('            if PlaceType == "place":\n')
    f.write('                x = 0\n')
    f.write('                if "x" in G_UIElementPlaceDictionary[uiName][elementName]:\n')
    f.write('                    x = G_UIElementPlaceDictionary[uiName][elementName]["x"]\n')
    f.write('                elif "relx" in G_UIElementPlaceDictionary[uiName][elementName]:\n')
    f.write('                    x = G_UIElementPlaceDictionary[uiName][elementName]["relx"]\n')
    f.write('                y = 0\n')
    f.write('                if "y" in G_UIElementPlaceDictionary[uiName][elementName]:\n')
    f.write('                    y = G_UIElementPlaceDictionary[uiName][elementName]["y"]\n')
    f.write('                elif "rely" in G_UIElementPlaceDictionary[uiName][elementName]:\n')
    f.write('                    y = G_UIElementPlaceDictionary[uiName][elementName]["rely"]\n')
    f.write('                w = 0\n')
    f.write('                if "width" in G_UIElementPlaceDictionary[uiName][elementName]:\n')
    f.write('                    w = G_UIElementPlaceDictionary[uiName][elementName]["width"]\n')
    f.write('                elif "relwidth" in G_UIElementPlaceDictionary[uiName][elementName]:\n')
    f.write('                    w = G_UIElementPlaceDictionary[uiName][elementName]["relwidth"]\n')
    f.write('                h = 0\n')
    f.write('                if "height" in G_UIElementPlaceDictionary[uiName][elementName]:\n')
    f.write('                    h = G_UIElementPlaceDictionary[uiName][elementName]["height"]\n')
    f.write('                elif "relheight" in G_UIElementPlaceDictionary[uiName][elementName]:\n')
    f.write('                    h = G_UIElementPlaceDictionary[uiName][elementName]["relheight"]\n')
    f.write('                if "anchorpoint" in G_UIElementPlaceDictionary[uiName][elementName]:\n')
    f.write('                    anchorpoint = G_UIElementPlaceDictionary[uiName][elementName]["anchorpoint"]\n')
    f.write('                    ax,ay = getPercentXY(x,y,w,h,ParentWidth,ParentHeight,anchorpoint)\n')
    f.write('                    if anchorpoint == "n":\n')
    f.write('                        if isinstance(x,float) == True:\n')
    f.write('                            if isinstance(w,float) == True:\n')
    f.write('                                x = (ax * ParentWidth - w * ParentWidth * 0.5)/ParentWidth\n')
    f.write('                            else:\n')
    f.write('                                x = (ax * ParentWidth - w * 0.5)/ParentWidth\n')
    f.write('                        else:\n')
    f.write('                            if isinstance(w,float) == True:\n')
    f.write('                                x = int(ax * ParentWidth - w * ParentWidth * 0.5)\n')
    f.write('                            else:\n')
    f.write('                                x = int(ax * ParentWidth - w * 0.5)\n')
    f.write('                        #x = int(ax * ParentWidth - w * 0.5)\n')
    f.write('                    elif anchorpoint == "ne":\n')
    f.write('                        if isinstance(x,float) == True:\n')
    f.write('                            if isinstance(w,float) == True:\n')
    f.write('                                x = (ax * ParentWidth - w * ParentWidth)/ParentWidth\n')
    f.write('                            else:\n')
    f.write('                                x = (ax * ParentWidth - w)/ParentWidth\n')
    f.write('                        else:\n')
    f.write('                            if isinstance(w,float) == True:\n')
    f.write('                                x = int(ax * ParentWidth  - w * ParentWidth)\n')
    f.write('                            else:\n')
    f.write('                                x = int(ax * ParentWidth  - w)\n')
    f.write('                        #x = int(ax * ParentWidth - w)\n')
    f.write('                    elif anchorpoint == "w":\n')
    f.write('                        if isinstance(y,float) == True:\n')
    f.write('                            if isinstance(h,float) == True:\n')
    f.write('                                y = (ay * ParentHeight - h * ParentHeight * 0.5)/ParentHeight\n')
    f.write('                            else:\n')
    f.write('                                y = (ay * ParentHeight - h * 0.5)/ParentHeight\n')
    f.write('                        else:\n')
    f.write('                            if isinstance(h,float) == True:\n')
    f.write('                                y = int(ay * ParentHeight - h * ParentHeight * 0.5)\n')
    f.write('                            else:\n')
    f.write('                                y = int(ay * ParentHeight - h * 0.5)\n')
    f.write('                        #y = int(ay * ParentHeight - h * 0.5)\n')
    f.write('                    elif anchorpoint == "center":\n')
    f.write('                        if isinstance(x,float) == True:\n')
    f.write('                            if isinstance(w,float) == True:\n')
    f.write('                                x = (ax * ParentWidth - w * ParentWidth * 0.5)/ParentWidth\n')
    f.write('                            else:\n')
    f.write('                                x = (ax * ParentWidth - w * 0.5)/ParentWidth\n')
    f.write('                        else:\n')
    f.write('                            if isinstance(w,float) == True:\n')
    f.write('                                x = int(ax * ParentWidth - w * ParentWidth * 0.5)\n')
    f.write('                            else:\n')
    f.write('                                x = int(ax * ParentWidth - w * 0.5)\n')
    f.write('                        if isinstance(y,float) == True:    \n')
    f.write('                            if isinstance(h,float) == True:\n')
    f.write('                                y = (ay * ParentHeight - h * ParentHeight * 0.5)/ParentHeight\n')
    f.write('                            else:\n')
    f.write('                                y = (ay * ParentHeight - h * 0.5)/ParentHeight\n')
    f.write('                        else:\n')
    f.write('                            if isinstance(h,float) == True:\n')
    f.write('                                y = int(ay * ParentHeight - h * ParentHeight * 0.5)\n')
    f.write('                            else:\n')
    f.write('                                y = int(ay * ParentHeight - h * 0.5)\n')
    f.write('                        #x = int(ax * ParentWidth - w * 0.5)\n')
    f.write('                        #y = int(ay * ParentHeight - h * 0.5)\n')
    f.write('                    elif anchorpoint == "e":\n')
    f.write('                        if isinstance(x,float) == True:\n')
    f.write('                            if isinstance(w,float) == True:\n')
    f.write('                                x = (ax * ParentWidth - w * ParentWidth)/ParentWidth\n')
    f.write('                            else:\n')
    f.write('                                x = (ax * ParentWidth - w)/ParentWidth\n')
    f.write('                        else:\n')
    f.write('                            if isinstance(w,float) == True:\n')
    f.write('                                x = int(ax * ParentWidth - w * ParentWidth)\n')
    f.write('                            else:\n')
    f.write('                                x = int(ax * ParentWidth - w)\n')
    f.write('                        if isinstance(y,float) == True:\n')
    f.write('                            if isinstance(h,float) == True:\n')
    f.write('                                y = (ay * ParentHeight - h * ParentHeight * 0.5)/ParentHeight\n')
    f.write('                            else:\n')
    f.write('                                y = (ay * ParentHeight - h * 0.5)/ParentHeight\n')
    f.write('                        else:\n')
    f.write('                            if isinstance(h,float) == True:\n')
    f.write('                                y = int(ay * ParentHeight - h * ParentHeight * 0.5)\n')
    f.write('                            else:\n')
    f.write('                                y = int(ay * ParentHeight - h * 0.5)\n')
    f.write('                        #x = int(ax * ParentWidth - w)\n')
    f.write('                        #y = int(ay * ParentHeight - h * 0.5)\n')
    f.write('                    elif anchorpoint == "sw":\n')
    f.write('                        if isinstance(y,float) == True:\n')
    f.write('                            if isinstance(h,float) == True:\n')
    f.write('                                y = (ay * ParentHeight - h * ParentHeight )/ParentHeight\n')
    f.write('                            else:\n')
    f.write('                                y = (ay * ParentHeight - h )/ParentHeight\n')
    f.write('                        else:\n')
    f.write('                            if isinstance(h,float) == True:\n')
    f.write('                                y = int(ay * ParentHeight - h * ParentHeight )\n')
    f.write('                            else:\n')
    f.write('                                y = int(ay * ParentHeight - h )\n')
    f.write('                        #y = int(ay * ParentHeight - h)\n')
    f.write('                    elif anchorpoint == "s":\n')
    f.write('                        if isinstance(x,float) == True:\n')
    f.write('                            if isinstance(w,float) == True:\n')
    f.write('                                x = (ax * ParentWidth - w * ParentWidth * 0.5)/ParentWidth\n')
    f.write('                            else:\n')
    f.write('                                x = (ax * ParentWidth - w * 0.5)/ParentWidth\n')
    f.write('                        else:\n')
    f.write('                            if isinstance(w,float) == True:\n')
    f.write('                                x = int(ax * ParentWidth - w * ParentWidth * 0.5)\n')
    f.write('                            else:\n')
    f.write('                                x = int(ax * ParentWidth - w * 0.5)\n')
    f.write('                        if isinstance(y,float) == True:\n')
    f.write('                            if isinstance(h,float) == True:\n')
    f.write('                                y = int(ay * ParentHeight - h * ParentHeight )/ParentHeight\n')
    f.write('                            else:\n')
    f.write('                                y = int(ay * ParentHeight - h )\n')
    f.write('                        else:\n')
    f.write('                            if isinstance(h,float) == True:\n')
    f.write('                                y = int(ay * ParentHeight - h * ParentHeight )\n')
    f.write('                            else:\n')
    f.write('                                y = int(ay * ParentHeight - h )\n')
    f.write('                        # x = int(ax * ParentWidth - w * 0.5)\n')
    f.write('                        # y = int(ay * ParentHeight - h)\n')
    f.write('                    elif anchorpoint == "se":\n')
    f.write('                        if isinstance(x,float) == True:\n')
    f.write('                            if isinstance(w,float) == True:\n')
    f.write('                                x = (ax * ParentWidth - w * ParentWidth)/ParentWidth\n')
    f.write('                            else:\n')
    f.write('                                x = (ax * ParentWidth - w)/ParentWidth\n')
    f.write('                        else:\n')
    f.write('                            if isinstance(w,float) == True:\n')
    f.write('                                x = int(ax * ParentWidth - w * ParentWidth)\n')
    f.write('                            else:\n')
    f.write('                                x = int(ax * ParentWidth - w)\n')
    f.write('                        if isinstance(y,float) == True:\n')
    f.write('                            if isinstance(h,float) == True:\n')
    f.write('                                y = (ay * ParentHeight - h * ParentHeight )/ParentHeight\n')
    f.write('                            else:\n')
    f.write('                                y = (ay * ParentHeight - h )/ParentHeight\n')
    f.write('                        else:\n')
    f.write('                            if isinstance(h,float) == True:\n')
    f.write('                                y = int(ay * ParentHeight - h * ParentHeight )\n')
    f.write('                            else:\n')
    f.write('                                y = int(ay * ParentHeight - h )\n')
    f.write('                        #x = int(ax * ParentWidth - w)\n')
    f.write('                        #y = int(ay * ParentHeight - h)\n')
    f.write('                for aliasName in  G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('                    if G_UIElementAliasDictionary[uiName][aliasName] == elementName:\n')
    f.write("                        SetControlPlace(uiName,aliasName,x,y,w,h,'nw',True,False)\n")
    f.write('                        break\n')
    f.write('            else:\n')
    f.write('                x = Control.winfo_x()\n')
    f.write('                y = Control.winfo_y()\n')
    f.write('                w = Control.winfo_width()\n')
    f.write('                h = Control.winfo_height()\n')
    f.write('            Width_PX = w\n')
    f.write('            if isinstance(w,float) == True:\n')
    f.write('               Width_PX = int(w * ParentWidth)\n')
    f.write('            Height_PX = h\n')
    f.write('            if isinstance(h,float) == True:\n')
    f.write('               Height_PX = int(h * ParentHeight)\n')
    f.write('            HScrollbarName = elementName + "_HScrollbar"\n')
    f.write('            HScrollbar= GetElement(uiName,HScrollbarName)\n')
    f.write('            if HScrollbar:\n')
    f.write('                HScrollbar.place(x = 0,y = Height_PX-20+HScrollBarOffsetY,width = Width_PX,height = 20)\n')
    f.write('            VScrollbarName = elementName + "_VScrollbar"\n')
    f.write('            VScrollbar= GetElement(uiName,VScrollbarName)\n')
    f.write('            if VScrollbar:\n')
    f.write('                VScrollbar.place(x = Width_PX-20+VScrollBarOffsetX,y = 0,width = 20,height = Height_PX)\n')
    f.write('            VScrollbarName = elementName + "_Scrollbar"\n')
    f.write('            VScrollbar= GetElement(uiName,VScrollbarName)\n')
    f.write('            if VScrollbar:\n')
    f.write('                VScrollbar.place(x = Width_PX-20+VScrollBarOffsetX,y = 0,width = 20,height = Height_PX)\n')
    f.write('            ChildCanvasName = elementName + "_Child"\n')
    f.write('            ChildCanvas = GetElement(uiName,ChildCanvasName)\n')
    f.write('            if ChildCanvas:\n')
    f.write('                ChildHandleName = elementName + "_ChildHandle"\n')
    f.write('                ChildHandle = GetElement(uiName,ChildHandleName)\n')
    f.write('                if ChildHandle:\n')   
    f.write('                    ChildCanvas.itemconfig(ChildHandle,width=ParentWidth,height=ParentHeight)\n')       
    f.write('                    ChildCanvas.config(scrollregion=(0,0,ParentWidth,ParentHeight))\n')          
    f.write('            if uiName in G_UIElementUserDataArray:\n')
    f.write('                if elementName in G_UIElementUserDataArray[uiName]:\n')
    f.write('                    for EBData in G_UIElementUserDataArray[uiName][elementName]:\n')   
    f.write('                        if EBData[0] == \'image\' and EBData[1] == \'imageInfo\':\n')
    f.write('                            oldImagePT = EBData[2][0]\n')
    f.write('                            if oldImagePT.width() == 1 and oldImagePT.height() == 1:\n')
    f.write('                                imagePath = EBData[2][1]\n')
    f.write('                                autoSize = EBData[2][2]\n')
    f.write('                                from   PIL import Image,ImageTk\n')
    f.write('                                imagePath_Lower = imagePath.lower()\n')
    f.write('                                if os.path.exists(imagePath) == False:\n')
    f.write('                                    if imagePath_Lower in G_ResourcesFileList:\n')
    f.write('                                        imagePath = G_ResourcesFileList[imagePath_Lower]\n')
    f.write('                                    if os.path.exists(imagePath) == False:\n')
    f.write('                                        continue\n')
    f.write('                                image=Image.open(imagePath).convert(\'RGBA\')\n')
    f.write('                                if autoSize == True:\n')
    f.write('                                    image_Resize = image.resize((Width_PX, Height_PX),Image.LANCZOS)\n')
    f.write('                                else:\n')
    f.write('                                    image_Resize = image\n')
    f.write('                                EBData[2][0] = ImageTk.PhotoImage(image_Resize)\n')
    f.write('                                if elementName.find(\'Label_\') >= 0 or elementName.find(\'Button_\') >= 0 :\n')
    f.write('                                    Control.configure(image = EBData[2][0])\n')
    f.write('                                elif elementName.find(\'Text_\') >= 0: \n')
    f.write('                                    Control.delete(\'0.0\',tkinter.END)\n')
    f.write('                                    Control.image_create(tkinter.END, image=EBData[2][0])\n')
    f.write('def SetUIRootSize(uiName,width,height,scale=1.0):\n')
    f.write('    global G_UIRootSizeDictionary\n')
    f.write('    global G_RootSize\n')
    f.write('    global G_UIScale\n')
    f.write('    if uiName in G_UIRootSizeDictionary:\n')
    f.write('        G_UIRootSizeDictionary[uiName]["width"] = width\n')
    f.write('        G_UIRootSizeDictionary[uiName]["height"] = height\n')
    f.write('        G_UIRootSizeDictionary[uiName]["scale"] = scale\n')
    f.write('        if "init" not in G_UIRootSizeDictionary[uiName].keys():\n')
    f.write('            G_UIRootSizeDictionary[uiName]["init"] = [width,height]\n')
    f.write('    else:\n')
    f.write('       G_RootSize = [width,height]\n')
    f.write('       G_UIScale = scale\n')
    f.write('def GetUIRootSize(uiName,init=False):\n')
    f.write('    global G_UIRootSizeDictionary\n')
    f.write('    global G_RootSize\n')
    f.write('    if uiName in G_UIRootSizeDictionary:\n')
    f.write('        if init == True and "init" in G_UIRootSizeDictionary[uiName]:\n')
    f.write('            return G_UIRootSizeDictionary[uiName]["init"][0],G_UIRootSizeDictionary[uiName]["init"][1]\n')
    f.write('        if "width" in G_UIRootSizeDictionary[uiName].keys() and "height" in G_UIRootSizeDictionary[uiName].keys():\n')
    f.write('            return G_UIRootSizeDictionary[uiName]["width"],G_UIRootSizeDictionary[uiName]["height"]\n')
    f.write('    return G_RootSize\n')

    f.write('def ResizeRoot(uiName,root,event):\n')
    f.write('    if isinstance(root,tkinter.Frame) == True or isinstance(root,tkinter.LabelFrame) == True or isinstance(root,tkinter.ttk.Frame) == True:\n')
    f.write('        oldWidth  = root.winfo_width()\n')
    f.write('        oldHeight = root.winfo_height()\n')
    f.write('        if oldWidth== event.width and oldHeight== event.height:\n')
    f.write('            return \n')
    f.write('        event.width = oldWidth\n')
    f.write('        event.height = oldHeight\n')
    f.write('        Form_1 = GetElement(uiName,\'Form_1\')\n')
    f.write('        if Form_1:\n')
    f.write('            Form_1.configure(width = event.width)\n')
    f.write('            Form_1.configure(height = event.height)\n')
    f.write('        HScrollBarOffsetY = 0\n')
    f.write('        VScrollBarOffsetX = 0\n')
    f.write('        if isinstance(root,tkinter.LabelFrame) == True:\n')
    f.write('            HScrollBarOffsetY = -30\n')
    f.write('        UpdateAllElementPlace(uiName,HScrollBarOffsetY,VScrollBarOffsetX)\n')
    # f.write('    for elementName in G_UIElementPlaceDictionary[uiName]:\n')
    # f.write('        PlaceDictionary = G_UIElementPlaceDictionary[uiName][elementName]\n')
    # f.write('        if "anchorpoint" in PlaceDictionary:\n')
    # f.write('            anchorpoint = PlaceDictionary["anchorpoint"]\n')
    # f.write('            if anchorpoint != "nw":\n')
    # f.write('                x = 0\n')
    # f.write('                if "relx" in PlaceDictionary:\n')
    # f.write('                    x = PlaceDictionary["relx"]\n')
    # f.write('                else:\n')
    # f.write('                    x = PlaceDictionary["x"]\n')
    # f.write('                y = 0\n')
    # f.write('                if "rely" in PlaceDictionary:\n')
    # f.write('                    y = PlaceDictionary["rely"]\n')
    # f.write('                else:\n')
    # f.write('                    y = PlaceDictionary["y"]\n')
    # f.write('                w = 0\n')
    # f.write('                if "relwidth" in PlaceDictionary:\n')
    # f.write('                    w = PlaceDictionary["relwidth"]\n')
    # f.write('                else:\n')
    # f.write('                    w = PlaceDictionary["width"]\n')
    # f.write('                h = 0\n')
    # f.write('                if "relheight" in PlaceDictionary:\n')
    # f.write('                    h = PlaceDictionary["relheight"]\n')
    # f.write('                else:\n')
    # f.write('                    h = PlaceDictionary["height"]\n')
    # f.write('                SetControlPlace(uiName,elementName,x,y,w,h,anchorpoint)\n')
    f.write('    SetUIRootSize(uiName,event.width,event.height)\n')
#写入修改参数的函数
def WriteSetElementLayerFunction(f):
    #f.write(Language.G_Language[1241]+'\n')
    f.write("def SetElementLayer(uiName,elementName,direction='lift'):\n")
    f.write('    """'+Language.G_Language[1869]+'"""\n')
    f.write("    global G_UIElementLayerDictionary\n")
    f.write('    if uiName in G_UIElementDictionary.keys():\n')
    f.write('        G_UIElementLayerDictionary[uiName][elementName] = direction\n')
#SIN函数图表
def WriteBuildChartFunction(f):
    #f.write('#'+Language.G_Language[711]+'\n')
    f.write('def BuildChart(chartName,uiName,parentWidget,elementName):\n')
    f.write('    """'+Language.G_Language[710]+'"""\n')
    f.write('    f = Figure(figsize=(5, 4), dpi=100)\n')
    f.write('    theChart = FigureCanvasTkAgg(f, master=parentWidget)\n')
    f.write('    theChart.draw()\n')
    f.write('    AddUserData(uiName,elementName,\'ChartName\',\'string\',chartName,0)\n')
    f.write('    AddUserData(uiName,elementName,\'ChartFigure\',\'figure\',f,0)\n')
    f.write('    AddUserData(uiName,elementName,\'ChartReady\',\'int\',0,0)\n')
    f.write('    AddUserData(uiName,elementName,\'ChartCanvas\',\'canvas\',theChart,0)\n')
    f.write('    return theChart.get_tk_widget()\n')
    f.write('def UpdateChart(uiName,elementName,width = 0,height = 0):\n')
    f.write('    """'+Language.G_Language[759]+'"""\n')
    f.write('    theChart = GetUserData(uiName,elementName,\'ChartCanvas\')\n')
    f.write('    if theChart:\n')
    f.write("        theChartCanvas = theChart.get_tk_widget()\n")
    f.write("        w = width\n")
    f.write("        if w == 0:\n")
    f.write("            w = theChartCanvas.winfo_width()\n")
    f.write("        h = height\n")
    f.write("        if h == 0:\n")
    f.write("            h = theChartCanvas.winfo_height()\n")
    f.write("        event = ChartEvent(w,h,theChartCanvas)\n")
    f.write("        theChart.resize(event)\n")
    f.write("        theChartCanvas.update()\n")
    f.write("        SetUserData(uiName,elementName,'ChartReady',1)\n")
    # f.write('    canvas = GetUserData(uiName,elementName,\'ChartCanvas\').get_tk_widget()\n')
    # f.write('    def refresh():\n')
    # f.write('        canvas.place(x = 0,y=0,width=1,height=1)\n')
    # f.write('        canvas.update()\n')
    # f.write('        canvas.place(x = G_UIElementPlaceDictionary[uiName][elementName]["x"],y=G_UIElementPlaceDictionary[uiName][elementName]["y"],width=G_UIElementPlaceDictionary[uiName][elementName]["width"],height=G_UIElementPlaceDictionary[uiName][elementName]["height"])\n')
    # f.write('        canvas.update()\n')
    # f.write('    if elementName in G_UIElementPlaceDictionary[uiName]:\n')
    # f.write('        canvas.after(10,refresh)\n')
    f.write("def UpdateChartData(uiName,elementName,x,y,subplotName='subplot111'):\n")
    f.write('    """'+Language.G_Language[762]+'"""\n')
    f.write('    theChart = GetUserData(uiName,elementName,\'ChartCanvas\')\n')
    f.write('    if theChart:\n')
    f.write("        a = GetUserData(uiName,elementName,subplotName)\n")
    f.write("        a.cla()\n")
    f.write("        a.plot(x, y)\n")
    f.write("        theChartCanvas = theChart.get_tk_widget()\n")
    f.write("        w = theChartCanvas.winfo_width()\n")
    f.write("        h = theChartCanvas.winfo_height()\n")
    f.write("        event = ChartEvent(w,h,theChartCanvas)\n")
    f.write("        theChart.resize(event)\n")
    f.write("def SetClickXYFunction(uiName,elementName,callBackFunction):\n")
    f.write('    """'+Language.G_Language[764]+'"""\n')
    f.write('    theChart = GetUserData(uiName,elementName,\'ChartCanvas\')\n')
    f.write('    if theChart:\n')
    f.write('        def mouse_event(event):\n')
    f.write("            a = GetUserData(uiName,elementName,'subplot111')\n")
    f.write("            if a:\n")
    #f.write("            a.axhline(event.ydata)\n")
    #f.write("            a.axvline(event.xdata)\n")
    #f.write("            print('ClickXY:%d,%d'%(event.xdata,event.ydata))\n")
    f.write("               callBackFunction(event,uiName,elementName,event.xdata,event.ydata)\n")
    f.write("    theChart.mpl_connect('button_press_event', mouse_event)\n")
#SIN函数图表
def WriteBuildChartFunctions_Mobile(f):
    #f.write('#'+Language.G_Language[711]+'\n')
    f.write('def BuildChart(chartName,uiName,parentWidget,elementName):\n')
    f.write('    """'+Language.G_Language[711]+'"""\n')
    
    f.write('    chart = GameLib.GUI_Label(parentWidget)\n')
    f.write('    chart.SetBGColor(255,255,255)\n')
    f.write('    chart.SetStyle("flat")\n')
    f.write('    f = Figure(figsize=(5, 4), dpi=100)\n')
    f.write('    chartCanvas = FigureCanvasAgg(f)\n')
    f.write('    AddUserData(uiName,elementName,\'ChartName\',\'string\',chartName,0)\n')
    f.write('    AddUserData(uiName,elementName,\'ChartFigure\',\'figure\',f,0)\n')
    f.write('    AddUserData(uiName,elementName,\'ChartCanvas\',\'canvas\',chartCanvas,0)\n')
    f.write('    return chart\n')
    f.write('def UpdateChart(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[759]+'"""\n')
    f.write('    pass\n')
    f.write("def UpdateChartData(uiName,elementName,x,y,subplotName='subplot111'):\n")
    f.write('    """'+Language.G_Language[762]+'"""\n')
    f.write('    pass\n')
    f.write("def SetClickXYFunction(uiName,elementName,callBackFunction):\n")
    f.write('    """'+Language.G_Language[764]+'"""\n')
    f.write('    pass\n')

    
#写入画板动作
def WriteDoCanvasRecordFunction(f,useAggdraw = True):
    #f.write(Language.G_Language[1234]+'\n')
    f.write("def DoCanvasRecord(drawCanvas,shapeType,x,y,x2,y2,fillcolor,outlinecolor,fillwidth,dash1=0,dash2=0,newImage=None,text='',textFont = None,textColor='',shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1234]+'"""\n')
    f.write('    if  drawCanvas != None:\n')
    f.write("        if shapeType == 'line' or shapeType == 'pen'  :\n")
    if useAggdraw:

        f.write('            if  dash1 > 0 :\n')
        f.write('                drawCanvas.create_line(x, y, x2, y2, fill=fillcolor,dash=(dash1,dash2),width = fillwidth,tag=shapeTag)\n')
        f.write('            else:\n')
        f.write("                uiName,drawCanvasName = GetElementName(drawCanvas)\n")
        f.write("                if shapeTag in G_CanvasParamDictionary[uiName][drawCanvasName].keys():\n")
        f.write("                    if G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag][5]:\n")
        f.write('                        left = x\n')
        f.write('                        right = x2\n')
        f.write('                        if x2 < x:\n')
        f.write('                            left = x2\n')
        f.write('                            right = x\n')
        f.write('                        top = y\n')
        f.write('                        bottom = y2\n')        
        f.write('                        if y2 < y:\n')
        f.write('                            top = y2\n')
        f.write('                            bottom = y\n')
        f.write('                        width = right - left + 2 * fillwidth\n')
        f.write('                        height = bottom - top + 2 * fillwidth\n')
        f.write('                        startx = x-left+fillwidth\n')
        f.write('                        starty =  y-top+fillwidth\n')
        f.write('                        endx = x2-left+fillwidth\n')
        f.write('                        endy = y2-top+fillwidth\n')
        f.write("                        img = Image.new('RGBA', (width, height), '#00000000')\n")
        f.write("                        draw = aggdraw.Draw(img)\n")
        f.write("                        p = aggdraw.Pen(fillcolor,fillwidth)\n")
        f.write("                        draw.line((x-left+fillwidth,y-top+fillwidth,x2-left+fillwidth,y2-top+fillwidth), p)\n")
        f.write("                        draw.flush()\n")
        f.write("                        newImage = ImageTk.PhotoImage(img)\n")
        f.write("                        G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag][5] = newImage\n")
        f.write("                        drawCanvas.create_image(left-fillwidth, top-fillwidth,image=newImage,anchor='nw',tag=shapeTag)\n")
        f.write("                    else:\n")
        f.write("                        drawCanvas.create_line(x, y, x2, y2, fill=fillcolor,width = fillwidth,tag=shapeTag)\n")
        f.write("                else:\n")
        f.write("                    drawCanvas.create_line(x, y, x2, y2, fill=fillcolor,width = fillwidth,tag=shapeTag)\n")
    else:
        f.write('            if  dash1 > 0 :\n')
        f.write('                drawCanvas.create_line(x, y, x2, y2, fill=fillcolor,dash=(dash1,dash2),width = fillwidth,tag=shapeTag)\n')
        f.write('            else:\n')
        f.write('                drawCanvas.create_line(x, y, x2, y2,fill=fillcolor, width = fillwidth,tag=shapeTag)\n')

    f.write("        elif shapeType == 'arrow':\n")
    f.write('            if  dash1 > 0 :\n')
    f.write("                drawCanvas.create_line(x, y, x2, y2, arrow=tkinter.LAST,fill=fillcolor,dash=(dash1,dash2),width = fillwidth,tag=shapeTag)\n")
    f.write('            else:\n')
    f.write("                drawCanvas.create_line(x, y, x2, y2,arrow=tkinter.LAST,fill=fillcolor, width = fillwidth,tag=shapeTag)\n")
    f.write("        elif shapeType.find('triangle') == 0:\n")
    f.write("            width = x2 - x\n")
    f.write("            height = y2 - y\n")
    f.write("            direction = 'up'\n")
    f.write("            if shapeType.find('_left')>0:\n")
    f.write("                direction = 'left'\n")
    f.write("            elif shapeType.find('_right')>0:\n")
    f.write("                direction = 'right'\n")
    f.write("            elif shapeType.find('_down')>0:\n")
    f.write("                direction = 'down'\n")
    f.write("            if direction == 'left':\n")
    f.write("                points = [\n")
    f.write("                    x,\n")
    f.write("                    y + int(height/2),\n")
    f.write("                    x + width,\n")
    f.write("                    y ,\n")
    f.write("                    x + width,\n")
    f.write("                    y + height,\n")
    f.write("                    x,\n")
    f.write("                    y + int(height/2),]\n")
    f.write("            elif direction == 'right':\n")
    f.write("                points = [\n")
    f.write("                    x,\n")
    f.write("                    y,\n")
    f.write("                    x + width,\n")
    f.write("                    y + int(height/2) ,\n")
    f.write("                    x,\n")
    f.write("                    y + height,\n")
    f.write("                    x,\n")
    f.write("                    y,]\n")
    f.write("            elif direction == 'down':\n")
    f.write("                points = [\n")
    f.write("                    x,\n")
    f.write("                    y,\n")
    f.write("                    x + width,\n")
    f.write("                    y,\n")
    f.write("                    x + int(width/2),\n")
    f.write("                    y + height,\n")
    f.write("                    x,\n")
    f.write("                    y,]\n")
    f.write("            else:\n")
    f.write("                points = [\n")
    f.write("                    x,\n")
    f.write("                    y + height,\n")
    f.write("                    x + int(width/2),\n")
    f.write("                    y ,\n")
    f.write("                    x + width,\n")
    f.write("                    y + height,\n")
    f.write("                    x,\n")
    f.write("                    y + height,]\n")
    f.write('            if  fillcolor == \'None\':\n')
    f.write('                if  dash1 > 0 :\n')
    f.write('                    drawCanvas.create_polygon(\n')
    f.write('                        points,\n')
    f.write('                        outline=outlinecolor, \n')
    f.write('                        width= fillwidth,\n')
    f.write('                        dash=(dash1,dash2),\n')
    f.write('                        tag=shapeTag)\n')
    f.write('                else :\n')
    f.write('                    drawCanvas.create_polygon(\n')
    f.write('                        points,\n')
    f.write('                        outline=outlinecolor, \n')
    f.write('                        width= fillwidth,\n')
    f.write('                        tag=shapeTag)\n')
    f.write('            else:\n')
    f.write('                if  dash1 > 0 :\n')
    f.write('                    drawCanvas.create_polygon(\n')
    f.write('                        points,\n')
    f.write('                        fill=fillcolor,\n')
    f.write('                        outline=outlinecolor, \n')
    f.write('                        width= fillwidth,\n')
    f.write('                        dash=(dash1,dash2),\n')
    f.write('                        tag=shapeTag)\n')
    f.write('                else :\n')
    f.write('                    drawCanvas.create_polygon(\n')
    f.write('                        points,\n')
    f.write('                        fill=fillcolor,\n')
    f.write('                        outline=outlinecolor, \n')
    f.write('                        width= fillwidth,\n')
    f.write('                        tag=shapeTag)\n')
    f.write("        elif shapeType == 'diamond':\n")
    f.write("            width = x2 - x\n")
    f.write("            height = y2 - y\n")
    f.write("            points = [\n")
    f.write("                x,\n")
    f.write("                y + int(height/2),\n")
    f.write("                x + int(width/2),\n")
    f.write("                y ,\n")
    f.write("                x + width,\n")
    f.write("                y + int(height/2),\n")
    f.write("                x + int(width/2),\n")
    f.write("                y + height,]\n")
    f.write('            if  fillcolor == \'None\':\n')
    f.write('                if  dash1 > 0 :\n')
    f.write('                    drawCanvas.create_polygon(\n')
    f.write('                        points,\n')
    f.write('                        outline=outlinecolor, \n')
    f.write('                        width= fillwidth,\n')
    f.write('                        dash=(dash1,dash2),\n')
    f.write('                        tag=shapeTag)\n')
    f.write('                else :\n')
    f.write('                    drawCanvas.create_polygon(\n')
    f.write('                        points,\n')
    f.write('                        outline=outlinecolor, \n')
    f.write('                        width= fillwidth,\n')
    f.write('                        tag=shapeTag)\n')
    f.write('            else:\n')
    f.write('                if  dash1 > 0 :\n')
    f.write('                    drawCanvas.create_polygon(\n')
    f.write('                        points,\n')
    f.write('                        fill=fillcolor,\n')
    f.write('                        outline=outlinecolor, \n')
    f.write('                        width= fillwidth,\n')
    f.write('                        dash=(dash1,dash2),\n')
    f.write('                        tag=shapeTag)\n')
    f.write('                else :\n')
    f.write('                    drawCanvas.create_polygon(\n')
    f.write('                        points,\n')
    f.write('                        fill=fillcolor,\n')
    f.write('                        outline=outlinecolor, \n')
    f.write('                        width= fillwidth,\n')
    f.write('                        tag=shapeTag)\n')
    f.write("        elif shapeType == 'rect':\n")
    f.write('            if  fillcolor == \'None\':\n')
    f.write('                if  dash1 > 0 :\n')
    f.write('                    drawCanvas.create_rectangle(x, y, x2, y2, outline=outlinecolor,dash=(dash1,dash2),width = fillwidth,tag=shapeTag)\n')
    f.write('                else:\n')
    f.write('                    drawCanvas.create_rectangle(x, y, x2, y2,outline=outlinecolor, width = fillwidth,tag=shapeTag)\n')
    f.write('            else:\n')
    f.write('                if  dash1 > 0 :\n')
    f.write('                    drawCanvas.create_rectangle(x, y, x2, y2, fill=fillcolor,outline=outlinecolor,dash=(dash1,dash2),width = fillwidth,tag=shapeTag)\n')
    f.write('                else:\n')
    f.write('                    drawCanvas.create_rectangle(x, y, x2, y2,fill=fillcolor,outline=outlinecolor, width = fillwidth,tag=shapeTag)\n')
    f.write("        elif shapeType == 'roundrect':\n")
    f.write('            width = x2 - x\n')
    f.write('            height = y2 - y\n')
    f.write('            if newImage:\n')
    f.write('                roundRadius = int(newImage)\n')
    f.write('            else:\n')
    f.write('                roundRadius = int(0.2 * height)\n')
    f.write('            if roundRadius == 0:\n')
    f.write('                if  dash1 > 0 :\n')
    f.write('                    drawCanvas.create_rectangle(x, y, x2, y2, fill=fillcolor,outline=outlinecolor,dash=(dash1,dash2),width = fillwidth,tag=shapeTag)\n')
    f.write('                else:\n')
    f.write('                    drawCanvas.create_rectangle(x, y, x + width,y + height,fill=fillcolor, outline=outlinecolor,width = fillwidth,tag=shapeTag)\n')
    f.write('            else:\n')
    f.write('                drawCanvas.create_rectangle(x+roundRadius,y+roundRadius,x+width-roundRadius, y+height-roundRadius,fill=fillcolor, width = 0,tag=shapeTag)\n')
    f.write('                drawCanvas.create_rectangle(x+roundRadius,y,x+width-roundRadius,y+roundRadius,fill=fillcolor, width=0,tag=shapeTag)\n')
    f.write('                drawCanvas.create_rectangle(x+roundRadius,y+height-roundRadius,x+width-roundRadius,y+height,fill=fillcolor, width=0,tag=shapeTag)\n')
    f.write('                drawCanvas.create_rectangle(x,y+roundRadius,x+roundRadius,y+height-roundRadius,fill=fillcolor,width=0,tag=shapeTag)\n')
    f.write('                drawCanvas.create_rectangle(x+width-roundRadius,y+roundRadius,x+width,y+height-roundRadius,fill=fillcolor,width=0,tag=shapeTag)\n')
    f.write('            OutLineTag = shapeTag+"_outline"\n')
    f.write('            if fillwidth > 0:\n')
    f.write('                if  dash1 > 0:\n')
    f.write('                    drawCanvas.create_line(x+roundRadius,y,x+width-roundRadius,y,fill=outlinecolor,dash=(dash1,dash2),tag=OutLineTag,width=fillwidth)\n')
    f.write('                    drawCanvas.create_line(x+roundRadius,y+height,x+width-roundRadius,y+height,fill=outlinecolor,dash=(dash1,dash2),tag=OutLineTag,width=fillwidth)\n')
    f.write('                    drawCanvas.create_line(x,y+roundRadius,x,y+height-roundRadius,fill=outlinecolor,tag=OutLineTag,dash=(dash1,dash2),width=fillwidth)\n')
    f.write('                    drawCanvas.create_line(x+width,y+roundRadius,x+width,y+height-roundRadius,fill=outlinecolor,dash=(dash1,dash2),tag=OutLineTag,width=fillwidth)\n')
    f.write('                else:\n')
    f.write('                    drawCanvas.create_line(x+roundRadius,y,x+width-roundRadius,y,fill=outlinecolor,tag=OutLineTag,width=fillwidth)\n')
    f.write('                    drawCanvas.create_line(x+roundRadius,y+height,x+width-roundRadius,y+height,fill=outlinecolor,tag=OutLineTag,width=fillwidth)\n')
    f.write('                    drawCanvas.create_line(x,y+roundRadius,x,y+height-roundRadius,fill=outlinecolor,tag=OutLineTag,width=fillwidth)\n')
    f.write('                    drawCanvas.create_line(x+width,y+roundRadius,x+width,y+height-roundRadius,fill=outlinecolor,tag=OutLineTag,width=fillwidth)\n')
    f.write('            drawCanvas.create_arc(x,y,x+2*roundRadius,y+2*roundRadius,start=180,extent=-90,fill=fillcolor,outline=fillcolor,width=0,tag=shapeTag)\n')
    f.write('            drawCanvas.create_arc(x+width-2*roundRadius,y,x+width,y+2*roundRadius,extent=90,fill=fillcolor,outline=fillcolor,width=0,tag=shapeTag)\n')
    f.write('            drawCanvas.create_arc(x+width-2*roundRadius,y+height-2*roundRadius,x+width,y+height,extent=-90,fill=fillcolor,outline=fillcolor,width=0,tag=shapeTag)\n')
    f.write('            drawCanvas.create_arc(x,y+height-2*roundRadius,x+2*roundRadius,y+height,start=180,extent=90,fill=fillcolor,outline=fillcolor,width=0,tag=shapeTag)\n')
    f.write('            OutArcTag = shapeTag+"_arc"\n')
    f.write('            if fillwidth > 0:\n')
    f.write('                if  dash1 > 0:\n')
    f.write('                    drawCanvas.create_arc(x,y,x+2*roundRadius,y+2*roundRadius,start=180,extent=-90,outline=outlinecolor,dash=(dash1,dash2),width=fillwidth, style=\'arc\',tag=OutArcTag)\n')
    f.write('                    drawCanvas.create_arc(x+width-2*roundRadius,y,x+width,y+2*roundRadius,extent=90,outline=outlinecolor,dash=(dash1,dash2),width=fillwidth, style=\'arc\',tag=OutArcTag)\n')
    f.write('                    drawCanvas.create_arc(x+width-2*roundRadius,y+height-2*roundRadius,x+width,y+height,extent=-90,outline=outlinecolor,dash=(dash1,dash2),width=fillwidth, style=\'arc\',tag=OutArcTag)\n')
    f.write('                    drawCanvas.create_arc(x,y+height-2*roundRadius,x+2*roundRadius,y+height,start=180,extent=90,outline=outlinecolor,dash=(dash1,dash2),width=fillwidth, style=\'arc\',tag=OutArcTag)\n')
    f.write('                else:\n')
    f.write('                    drawCanvas.create_arc(x,y,x+2*roundRadius,y+2*roundRadius,start=180,extent=-90,outline=outlinecolor,width=fillwidth, style=\'arc\',tag=OutArcTag)\n')
    f.write('                    drawCanvas.create_arc(x+width-2*roundRadius,y,x+width,y+2*roundRadius,extent=90,outline=outlinecolor,width=fillwidth, style=\'arc\',tag=OutArcTag)\n')
    f.write('                    drawCanvas.create_arc(x+width-2*roundRadius,y+height-2*roundRadius,x+width,y+height,extent=-90,outline=outlinecolor,width=fillwidth, style=\'arc\',tag=OutArcTag)\n')
    f.write('                    drawCanvas.create_arc(x,y+height-2*roundRadius,x+2*roundRadius,y+height,start=180,extent=90,outline=outlinecolor,width=fillwidth, style=\'arc\',tag=OutArcTag)\n')
    f.write("        elif shapeType == 'circle':\n")
    if useAggdraw:
        f.write('            if  fillcolor == \'None\':\n')
        f.write('                if  dash1 > 0 :\n')
        f.write('                    drawCanvas.create_oval(x, y, x2, y2, outline=outlinecolor,dash=(dash1,dash2),width = fillwidth,tag=shapeTag)\n')
        f.write('                else:\n')
        f.write('                    width = x2 - x + 2 * fillwidth\n')
        f.write('                    height = y2 - y + 2 * fillwidth\n')
        f.write("                    img = Image.new('RGBA', (width, height), '#00000000')\n")
        f.write("                    draw = aggdraw.Draw(img)\n")
        f.write("                    p = aggdraw.Pen(outlinecolor,fillwidth)\n")
        f.write("                    draw.ellipse((fillwidth,fillwidth,width-fillwidth,height-fillwidth), p)\n")
        f.write("                    draw.flush()\n")
        f.write("                    newImage = ImageTk.PhotoImage(img)\n")
        f.write("                    uiName,drawCanvasName = GetElementName(drawCanvas)\n")
        f.write("                    G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag][5] = newImage\n")
        f.write("                    drawCanvas.create_image(x-fillwidth, y-fillwidth,image=newImage,anchor='nw',tag=shapeTag)\n")
        f.write('            else:\n')
        f.write('                if  dash1 > 0 :\n')
        f.write('                    width = x2 - x + 2 * fillwidth\n')
        f.write('                    height = y2 - y + 2 * fillwidth\n')
        f.write("                    img = Image.new('RGBA', (width, height), '#00000000')\n")
        f.write("                    draw = aggdraw.Draw(img)\n")
        f.write("                    p = aggdraw.Pen(outlinecolor,0)\n")
        f.write("                    b = aggdraw.Brush(fillcolor)\n")
        f.write("                    draw.ellipse((fillwidth,fillwidth,width-fillwidth,height-fillwidth), p, b)\n")
        f.write("                    draw.flush()\n")
        f.write("                    newImage = ImageTk.PhotoImage(img)\n")
        f.write("                    uiName,drawCanvasName = GetElementName(drawCanvas)\n")
        f.write("                    G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag][5] = newImage\n")
        f.write("                    drawCanvas.create_image(x-fillwidth, y-fillwidth,image=newImage,anchor='nw',tag=shapeTag)\n")
        f.write('                    drawCanvas.create_oval(x, y, x2, y2, outline=outlinecolor,dash=(dash1,dash2),width = fillwidth,tag=shapeTag)\n')
        f.write('                else:\n')
        f.write('                    width = x2 - x + 2 * fillwidth\n')
        f.write('                    height = y2 - y + 2 * fillwidth\n')
        f.write("                    img = Image.new('RGBA', (width, height), '#00000000')\n")
        f.write("                    draw = aggdraw.Draw(img)\n")
        f.write("                    p = aggdraw.Pen(outlinecolor,fillwidth)\n")
        f.write("                    b = aggdraw.Brush(fillcolor)\n")
        f.write("                    draw.ellipse((fillwidth,fillwidth,width-fillwidth,height-fillwidth), p, b)\n")
        f.write("                    draw.flush()\n")
        f.write("                    newImage = ImageTk.PhotoImage(img)\n")
        f.write("                    uiName,drawCanvasName = GetElementName(drawCanvas)\n")
        f.write("                    G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag][5] = newImage\n")
        f.write("                    drawCanvas.create_image(x-fillwidth, y-fillwidth,image=newImage,anchor='nw',tag=shapeTag)\n")
    else:
        f.write('            if  fillcolor == \'None\':\n')
        f.write('                if  dash1 > 0 :\n')
        f.write('                    drawCanvas.create_oval(x, y, x2, y2, outline=outlinecolor,dash=(dash1,dash2),width = fillwidth,tag=shapeTag)\n')
        f.write('                else:\n')
        f.write('                    drawCanvas.create_oval(x, y, x2, y2,outline=outlinecolor, width = fillwidth,tag=shapeTag)\n')
        f.write('            else:\n')
        f.write('                if  dash1 > 0 :\n')
        f.write('                    drawCanvas.create_oval(x, y, x2, y2, fill=fillcolor,outline=outlinecolor,dash=(dash1,dash2),width = fillwidth,tag=shapeTag)\n')
        f.write('                else:\n')
        f.write('                    drawCanvas.create_oval(x, y, x2, y2,fill=fillcolor,outline=outlinecolor, width = fillwidth,tag=shapeTag)\n')


    f.write("        elif shapeType == 'cylinder':\n")  
    f.write("            width = x2 - x\n")
    f.write("            height = y2 - y\n")
    f.write("            OvalHeight = height * 0.2\n")
    f.write("            OvalHeight_Half = height * 0.1\n")
    f.write('            OutLineTag = shapeTag+"_outline"\n')
    f.write('            if  dash1 > 0 :\n')
    f.write('                drawCanvas.create_oval(x,y2-OvalHeight,x2,y2,fill=fillcolor,outline=outlinecolor,dash=(dash1,dash2),width = fillwidth,tag=shapeTag)\n')
    f.write('                drawCanvas.create_rectangle(x,y+OvalHeight_Half,x2,y2-OvalHeight_Half,fill=fillcolor,width=0,tag=shapeTag)\n')
    f.write('                drawCanvas.create_oval(x,y,x2,y+OvalHeight,fill=fillcolor,outline=outlinecolor,dash=(dash1,dash2),width = fillwidth,tag=shapeTag)\n')
    f.write('                drawCanvas.create_line(x,y+OvalHeight_Half,x,y2-OvalHeight_Half,fill=outlinecolor,dash=(dash1,dash2),width = fillwidth,tag=OutLineTag)\n')
    f.write('                drawCanvas.create_line(x2,y+OvalHeight_Half,x2,y2-OvalHeight_Half,fill=outlinecolor,dash=(dash1,dash2),width = fillwidth,tag=OutLineTag)\n')
    f.write('            else:\n')
    f.write('                drawCanvas.create_oval(x,y2-OvalHeight,x2,y2,fill=fillcolor,outline=outlinecolor,width = fillwidth,tag=shapeTag)\n')
    f.write('                drawCanvas.create_rectangle(x,y+OvalHeight_Half,x2,y2-OvalHeight_Half,fill=fillcolor,width=0,tag=shapeTag)\n')
    f.write('                drawCanvas.create_oval(x,y,x2,y+OvalHeight,fill=fillcolor,outline=outlinecolor,width = fillwidth,tag=shapeTag)\n')
    f.write('                drawCanvas.create_line(x,y+OvalHeight_Half,x,y2-OvalHeight_Half,fill=outlinecolor,width = fillwidth,tag=OutLineTag)\n')
    f.write('                drawCanvas.create_line(x2,y+OvalHeight_Half,x2,y2-OvalHeight_Half,fill=outlinecolor,width = fillwidth,tag=OutLineTag)\n')
    f.write("        elif shapeType == 'star':\n")
    f.write('            center_x = (x + x2)/2\n')
    f.write('            center_y = (y + y2)/2\n')
    f.write('            rx = (x2 - x)/2\n')
    f.write('            ry = (y2 - y)/2\n')
    f.write('            points = [\n')
    f.write('                center_x - int(rx * math.sin(2 * math.pi / 5)),\n')
    f.write('                center_y - int(ry * math.cos(2 * math.pi / 5)),\n')
    f.write('                center_x + int(rx * math.sin(2 * math.pi / 5)),\n')
    f.write('                center_y - int(ry * math.cos(2 * math.pi / 5)),\n')
    f.write('                center_x - int(rx * math.sin(math.pi / 5)),\n')
    f.write('                center_y + int(ry * math.cos(math.pi / 5)),\n')
    f.write('                center_x,\n')
    f.write('                center_y - ry,\n')
    f.write('                center_x + int(rx * math.sin(math.pi / 5)),\n')
    f.write('                center_y + int(ry * math.cos(math.pi / 5)),\n')
    f.write('                ]\n')
    f.write('            if  dash1 > 0 :\n')
    f.write('                drawCanvas.create_polygon(\n')
    f.write('                    points,\n')
    f.write('                    fill=fillcolor,\n')
    f.write('                    outline=outlinecolor, \n')
    f.write('                    width= fillwidth,\n')
    f.write('                    dash=(dash1,dash2),\n')
    f.write('                    tag=shapeTag)\n')
    f.write('            else :\n')
    f.write('                drawCanvas.create_polygon(\n')
    f.write('                    points,\n')
    f.write('                    fill=fillcolor,\n')
    f.write('                    outline=outlinecolor, \n')
    f.write('                    width= fillwidth,\n')
    f.write('                    tag=shapeTag)\n')
    f.write("        elif shapeType == 'eraser':\n")
    f.write('            drawCanvas.create_rectangle(x, y, x2, y2,fill=fillcolor, width = 0,tag=shapeTag) \n')
    f.write("        elif shapeType == 'grid':\n")
    f.write('            rows = int((y2 - y)/dash2)+1\n')
    f.write('            cows = int((x2 - x)/dash1)+1\n')
    f.write('            for i in range(rows):\n')
    f.write('                for j in range(cows):\n')
    f.write('                    if (i+j)%2 == 0:\n')
    f.write('                        tx = x + j*dash1\n')
    f.write('                        ty = y + i*dash2\n')
    f.write('                        drawCanvas.create_rectangle(tx, ty, tx+dash1, ty+dash2,fill=fillcolor, width = 0,tag=shapeTag) \n')
    f.write("        elif shapeType == 'text':\n")
    f.write("            drawCanvas.create_text(x, y,fill=fillcolor,text=text,font = textFont,anchor='nw',tag=shapeTag)\n")
    f.write("        elif shapeType == 'button':\n")
    f.write('            center_x = (x + x2)/2\n')
    f.write('            center_y = (y + y2)/2\n')
    f.write('            if newImage:\n')
    f.write("                drawCanvas.create_image(x, y,image=newImage,anchor='nw',tag=shapeTag)\n")
    f.write('            else:\n')
    f.write("                oval_rx = 20\n")
    f.write('                OutLineTag = shapeTag+"_outline"\n')
    f.write('                half_width = int((fillwidth+1)/2)\n')
    f.write("                if  dash1 > 0 :\n")
    f.write("                    drawCanvas.create_oval(x,y,x+2*oval_rx,y2,fill=fillcolor,outline=outlinecolor,dash=(dash1,dash2),width = fillwidth,tag=shapeTag)\n")
    f.write("                    drawCanvas.create_oval(x2-2*oval_rx,y,x2,y2,fill=fillcolor,outline=outlinecolor,dash=(dash1,dash2),width = fillwidth,tag=shapeTag)\n")
    f.write("                    drawCanvas.create_rectangle(x+oval_rx, y, x2-oval_rx, y2+1,fill=fillcolor,outline=outlinecolor,dash=(dash1,dash2), width = fillwidth,tag=shapeTag)\n")
    f.write("                    drawCanvas.create_line(x+oval_rx, y+half_width, x+oval_rx, y2-half_width,fill=fillcolor,width = fillwidth,tag=shapeTag)\n")
    f.write("                    drawCanvas.create_line(x2-oval_rx, y+half_width, x2-oval_rx, y2-half_width,fill=fillcolor,width = fillwidth,tag=shapeTag)\n")
    f.write("                else:\n")
    f.write("                    drawCanvas.create_oval(x,y,x+2*oval_rx,y2,fill=fillcolor,outline=outlinecolor,width = fillwidth,tag=shapeTag)\n")
    f.write("                    drawCanvas.create_oval(x2-2*oval_rx,y,x2,y2,fill=fillcolor,outline=outlinecolor,width = fillwidth,tag=shapeTag)\n")
    #f.write("                    drawCanvas.create_rectangle(x+oval_rx, y, x2-oval_rx, y2+1,fill=fillcolor,outline=outlinecolor, width = fillwidth,tag=shapeTag)\n")
    #f.write("                    drawCanvas.create_line(x+oval_rx, y+half_width, x+oval_rx, y2-half_width,fill=fillcolor,width = fillwidth,tag=OutLineTag)\n")
    #f.write("                    drawCanvas.create_line(x2-oval_rx, y+half_width, x2-oval_rx, y2-half_width,fill=fillcolor,width = fillwidth,tag=OutLineTag)\n")

    f.write("                    drawCanvas.create_rectangle(x+oval_rx+1, y + half_width, x2-oval_rx-1, y2+1-half_width,fill=fillcolor,outline=outlinecolor, width = 0,tag=shapeTag)\n")
    f.write("                    drawCanvas.create_line(x+oval_rx, y, x2-oval_rx, y,fill=outlinecolor,width = fillwidth,tag=OutLineTag)\n")
    f.write("                    drawCanvas.create_line(x+oval_rx, y2, x2-oval_rx, y2,fill=outlinecolor,width = fillwidth,tag=OutLineTag)\n")    

    f.write('            if len(text) > 0:\n')
    f.write("                drawCanvas.create_text(center_x, center_y,fill=textColor,text=text,font = textFont,anchor='center',tag=shapeTag+\"_text\")\n")
    f.write("        elif shapeType == 'image':\n")
    f.write("            if type(newImage) == type([]):\n")
    f.write("                drawCanvas.create_image(x, y,image=newImage[0][0],anchor='nw',tag=shapeTag)\n")
    f.write("            else:\n")
    f.write("                drawCanvas.create_image(x, y,image=newImage,anchor='nw',tag=shapeTag)\n")
    f.write("        elif shapeType == 'switch':\n")
    f.write("            SwitchWidth = x2 - x\n")
    f.write("            SwitchHeight = y2 - y\n")
    f.write("            Switch_radius = int(SwitchHeight/2)\n")
    f.write("            fillcolor = '#777777'\n")
    f.write("            drawCanvas.create_oval(x, y, x+SwitchHeight, y+SwitchHeight-1,fill=fillcolor,outline=outlinecolor,width=0, tag=shapeTag)\n")
    f.write("            drawCanvas.create_oval(x+(SwitchWidth-SwitchHeight), y, x+SwitchWidth,y+ SwitchHeight-1,fill=fillcolor,outline=outlinecolor,width=0, tag=shapeTag)\n")
    f.write("            drawCanvas.create_rectangle(x+Switch_radius,y,x+(SwitchWidth-Switch_radius),y+SwitchHeight,fill=fillcolor,outline=outlinecolor,width=0, tag=shapeTag)\n")
    f.write("            drawCanvas.create_oval(x+2, y+2, x+(SwitchHeight-3), y+(SwitchHeight-3),fill=outlinecolor,width=0,tag=shapeTag)\n")
    f.write('            drawCanvas.create_text(x+(SwitchWidth-int(1.0*SwitchHeight)), y+int(SwitchHeight/2), text="Off",font = ("System",int(SwitchHeight/2)),anchor=\'center\',fill=outlinecolor,width=0,tag=shapeTag)\n') 
    f.write("        elif shapeType == 'listmenu':\n")
    f.write('            if  dash1 > 0 :\n')
    f.write("                drawCanvas.create_rectangle(x, y, x2, y2,fill='#FFFFFF', outline=outlinecolor,dash=(dash1,dash2),width = fillwidth,tag=shapeTag)\n")
    f.write('            else:\n')
    f.write("                drawCanvas.create_rectangle(x, y, x2, y2,fill='#FFFFFF', outline=outlinecolor,width = fillwidth,tag=shapeTag)\n")
    f.write('            MenuInfo = newImage\n')
    f.write("            SubMenus = MenuInfo['SubMenus']\n")
    f.write('            ListMenuWidth = x2 - x\n')
    f.write('            ListMenuHeight = y2 - y\n')
    f.write('            SubMenuTitleHeight = 24\n')
    f.write('            SubMenuTitleSpacingX = 2\n')
    f.write('            SubMenuTitleSpacingY = 5\n')
    f.write('            SubMenuItemHeight = 22\n')
    f.write('            SubMenuItemSpacingX = 2\n')
    f.write('            SubMenuItemSpacingY = 4\n')
    f.write('            centerX = x + int(ListMenuWidth/2)\n')
    f.write('            SubMeshX = x + SubMenuTitleSpacingX\n')
    f.write('            SubMenuTitleHeight_Half = int(SubMenuTitleHeight/2)\n')
    f.write('            IconX = x+int(0.25 * ListMenuWidth)\n')
    f.write('            ListMenuTop = y + SubMenuTitleSpacingY\n')
    f.write('            for subMenu in SubMenus:\n')
    f.write('                titleText = subMenu[0]\n')
    f.write('                bgImgFile = subMenu[1]\n')
    f.write('                itemList = subMenu[2]\n')
    f.write('                subMeshTag = shapeTag + "_"+titleText\n')
    f.write("                drawCanvas.create_oval(SubMeshX, ListMenuTop, SubMeshX + SubMenuTitleHeight, ListMenuTop+SubMenuTitleHeight-1,fill=fillcolor,outline=outlinecolor,width=0, tag=subMeshTag)\n")
    f.write("                drawCanvas.create_oval(x2-SubMenuTitleHeight, ListMenuTop, x2,ListMenuTop+ SubMenuTitleHeight-1,fill=fillcolor,outline=outlinecolor,width=0, tag=subMeshTag)\n")
    f.write("                drawCanvas.create_rectangle(x+SubMenuTitleHeight_Half,ListMenuTop,x2-SubMenuTitleHeight_Half,ListMenuTop+SubMenuTitleHeight,fill=fillcolor,outline=outlinecolor,width=0, tag=subMeshTag)\n")
    f.write('                centerY = ListMenuTop + int(SubMenuTitleHeight/2)\n')
    f.write("                drawCanvas.create_text(centerX ,centerY,text=titleText,anchor=tkinter.CENTER,font=('Arial',14,'bold'),fill = outlinecolor,tag=subMeshTag) \n")
    f.write('                ListMenuTop = ListMenuTop + (SubMenuTitleHeight + SubMenuTitleSpacingY)\n')
    f.write('                if subMenu[3] == True:\n')
    f.write('                    for itemInfo in itemList:\n')
    f.write('                        titleText = itemInfo[0]\n')
    f.write('                        centerY = ListMenuTop + int(SubMenuItemHeight/2)\n')
    f.write("                        drawCanvas.create_oval(IconX-5, centerY-5, IconX+5, centerY+5,fill=fillcolor,outline=outlinecolor,width=0, tag=shapeTag)\n")
    f.write("                        drawCanvas.create_text(centerX ,centerY,text=titleText,anchor=tkinter.CENTER,font=('Arial',10,'bold'),fill = outlinecolor,tag=shapeTag) \n")
    f.write('                        ListMenuTop = ListMenuTop + (SubMenuItemHeight + SubMenuItemSpacingY)\n')
    f.write("        elif shapeType == 'table':\n")
    f.write('            if  dash1 > 0 :\n')
    f.write("                drawCanvas.create_rectangle(x, y, x2, y2,fill='#FFFFFF', outline=outlinecolor,dash=(dash1,dash2),width = fillwidth,tag=shapeTag)\n")
    f.write('            else:\n')
    f.write("                drawCanvas.create_rectangle(x, y, x2, y2,fill='#FFFFFF', outline=outlinecolor,width = fillwidth,tag=shapeTag)\n")
    f.write('            TableWidth = x2 - x\n')
    f.write('            TableHeight = y2 - y\n')
    f.write('            if TableHeight > 0:\n')
    f.write("                TableTopY = y\n")
    f.write('                TableInfo = newImage\n')
    f.write("                RowCount = len(TableInfo['rows'])\n")
    f.write("                CowInfo = TableInfo['cows']\n")
    f.write("                TableRowHeight = TableHeight\n")
    f.write("                if RowCount > 0:\n")
    f.write("                    TableRowHeight = TableHeight / RowCount\n")
    f.write('                RowTopY = TableTopY\n')
    f.write('                RowIndex = 0\n')
    f.write("                for rowInfoLine in TableInfo['rows']:\n")
    f.write('                    left = 0\n')
    f.write('                    CowIndex = 0\n')
    f.write('                    for rowInfo in rowInfoLine:\n')
    f.write('                        x1 = x + int(left * TableWidth) \n')
    f.write('                        y1 = int(RowTopY)\n')
    f.write('                        x2 = x + int((left + CowInfo[CowIndex])* TableWidth) \n')
    f.write('                        y2 = int(RowTopY + TableRowHeight)\n')
    f.write("                        CellText = rowInfo[0]\n")
    f.write("                        StyleIndex = rowInfo[1]\n")
    f.write("                        StyleInfo = TableInfo['style'][StyleIndex]\n")
    f.write('                        FillColor = StyleInfo[0]\n')
    f.write("                        if FillColor == '':\n")
    f.write("                            FillColor = '#FFFFFF'\n")
    f.write("                        FontIndex = StyleInfo[1]\n")
    f.write('                        TextAnchor = StyleInfo[2]\n')
    f.write('                        TextColor = StyleInfo[3]\n')
    f.write("                        if TextColor == '':\n")
    f.write("                            TextColor = '#000000'\n")
    f.write("                        BorderWidth = StyleInfo[4]\n")
    f.write('                        OutLineColor = StyleInfo[5]\n')
    f.write("                        if OutLineColor == '':\n")
    f.write("                            OutLineColor = '#000000'\n")
    f.write("                        drawCanvas.create_rectangle(x1,y1,x2,y2,fill = FillColor,outline = OutLineColor,width = BorderWidth,tag = 'drawing_shape')\n")
    f.write('                        #显示文字\n')
    f.write("                        if CellText != '':\n")
    f.write('                            if CellText.find("┇") >= 0:\n')
    f.write("                                drawCanvas.create_line(x1,y1,x2,y2,fill = OutLineColor,width = BorderWidth,tag = 'drawing_shape')\n")
    f.write("                                TextSplitArray = CellText.split('┇')\n")
    f.write('                                Text1 = TextSplitArray[0]\n')
    f.write('                                Text2 = TextSplitArray[1]\n')
    f.write("                                CellWidth  = x2 - x1\n")
    f.write('                                CellHeight = y2 - y1\n')
    f.write("                                cell_cx1 = x1 + int(CellWidth * 0.67)\n")
    f.write('                                cell_cy1 = y1 + int(CellHeight * 0.33)\n')
    f.write("                                TextAnchor1 = 'center'\n")
    f.write("                                cell_cx2 = x2 - int(CellWidth * 0.67)\n")
    f.write('                                cell_cy2 = y2 - int(CellHeight * 0.33)\n')
    f.write("                                TextAnchor2 = 'center'\n")
    f.write("                                if FontIndex >= 0:\n")
    f.write("                                    FontInfo = TableInfo['font'][FontIndex]\n")
    f.write("                                    fontName = FontInfo[0]\n")
    f.write("                                    fontSize = FontInfo[1]\n")
    f.write("                                    drawCanvas.create_text(cell_cx1,cell_cy1,fill=TextColor,text=Text1, font=(fontName,fontSize),anchor=TextAnchor1,tag='drawing_shape')\n")
    f.write("                                    drawCanvas.create_text(cell_cx2,cell_cy2,fill=TextColor,text=Text2, font=(fontName,fontSize),anchor=TextAnchor2,tag='drawing_shape')\n")
    f.write("                                else:\n")
    f.write("                                    drawCanvas.create_text(cell_cx1,cell_cy1,fill=TextColor,text=Text1, anchor=TextAnchor1,tag='drawing_shape')\n")
    f.write("                                    drawCanvas.create_text(cell_cx2,cell_cy2,fill=TextColor,text=Text2, anchor=TextAnchor2,tag='drawing_shape')\n")
    f.write('                            else:\n')
    f.write("                                cell_cx = int((x1 + x2)/2)\n")
    f.write('                                cell_cy = int((y1 + y2)/2)\n')
    f.write("                                #['WN','N','EN','W','CENTER','E','WS','S','ES','XY']\n")
    f.write("                                TextAnchor = TextAnchor.lower()\n")
    f.write("                                if TextAnchor == 'n' or TextAnchor == 'wn' or TextAnchor == 'en'  or TextAnchor == 'nw' or TextAnchor == 'ne':\n")
    f.write("                                    cell_cy = int(y1)\n")
    f.write("                                elif TextAnchor == 's' or TextAnchor == 'ws' or TextAnchor == 'es' or TextAnchor == 'sw' or TextAnchor == 'se':\n")
    f.write("                                    cell_cy = int(y2)\n")
    f.write("                                if TextAnchor == 'w' or TextAnchor == 'wn' or TextAnchor == 'ws' or TextAnchor == 'nw' or TextAnchor == 'sw':\n")
    f.write("                                    cell_cx = int(x1)\n")
    f.write("                                elif TextAnchor == 'e' or TextAnchor == 'en' or TextAnchor == 'es' or TextAnchor == 'ne' or TextAnchor == 'se':\n")
    f.write("                                    cell_cx = int(x2)\n")
    f.write("                                if FontIndex >= 0:\n")
    f.write("                                    FontInfo = TableInfo['font'][FontIndex]\n")
    f.write("                                    fontName = FontInfo[0]\n")
    f.write("                                    fontSize = FontInfo[1]\n")
    f.write("                                    drawCanvas.create_text(cell_cx,cell_cy,fill=TextColor,text=CellText, font=(fontName,fontSize),anchor=TextAnchor,tag='drawing_shape')\n")
    f.write("                                else:\n")
    f.write("                                    drawCanvas.create_text(cell_cx,cell_cy,fill=TextColor,text=CellText, anchor=TextAnchor,tag='drawing_shape')\n")
    f.write('                        left = left + CowInfo[CowIndex]\n')
    f.write('                        CowIndex = CowIndex + 1\n')
    f.write('                    RowTopY = RowTopY + TableRowHeight\n')
    f.write('                    RowIndex = RowIndex + 1\n')
    f.write("                for mergeCell in TableInfo['merge']:\n")
    f.write("                    BeginRow = mergeCell[0][0]\n")
    f.write("                    BeginCow = mergeCell[0][1]\n")
    f.write("                    EndRow = mergeCell[1][0]\n")
    f.write("                    EndCow = mergeCell[1][1]\n")
    f.write("                    CellText = mergeCell[2]\n")
    f.write("                    StyleIndex = mergeCell[3]\n")
    f.write("                    StyleInfo = TableInfo['style'][StyleIndex]\n")
    f.write("                    FillColor = StyleInfo[0]\n")
    f.write("                    if FillColor == '':\n")
    f.write("                        FillColor = '#FFFFFF'\n")
    f.write("                    FontIndex = StyleInfo[1]\n")
    f.write("                    TextAnchor = StyleInfo[2]\n")
    f.write("                    TextColor = StyleInfo[3]\n")
    f.write("                    if TextColor == '':\n")
    f.write("                        TextColor = '#000000'\n")
    f.write("                    BorderWidth = StyleInfo[4]\n")
    f.write("                    BorderColor = StyleInfo[5]\n")
    f.write("                    if BorderColor == '':\n")
    f.write("                        BorderColor = '#000000'\n")
    f.write("                    Left = x + TableWidth\n")
    f.write("                    Right = x \n")
    f.write("                    Top = TableTopY + TableHeight\n")
    f.write("                    Bottom = TableTopY\n")
    f.write("                    RowTopY = TableTopY\n")
    f.write("                    RowIndex = 0\n")
    f.write("                    for rowInfoLine in TableInfo['rows']:\n")
    f.write("                        left = 0\n")
    f.write("                        CowIndex = 0\n")
    f.write("                        for rowInfo in rowInfoLine:\n")
    f.write("                            x1 = x + int(left * TableWidth)\n")
    f.write("                            y1 = int(RowTopY)\n")
    f.write("                            x2 = x + int((left + CowInfo[CowIndex])* TableWidth)\n")
    f.write("                            y2 = int(RowTopY + TableRowHeight)\n")
    f.write("                            if checkPtInRect(CowIndex,RowIndex,BeginCow,EndCow,BeginRow,EndRow) == True:\n")
    f.write("                                if x1 < Left:\n")
    f.write("                                    Left = x1\n")
    f.write("                                if y1 < Top:\n")
    f.write("                                    Top = y1\n")
    f.write("                                if x2 > Right:\n")
    f.write("                                    Right = x2\n")
    f.write("                                if y2 > Bottom:\n")
    f.write("                                    Bottom = y2\n")
    f.write("                            left = left + CowInfo[CowIndex]\n")
    f.write("                            CowIndex = CowIndex + 1\n")
    f.write("                        RowTopY = RowTopY + TableRowHeight\n")
    f.write("                        RowIndex = RowIndex + 1\n")
    f.write("                    if Right >= Left and Bottom >= Top:\n")
    f.write("                        drawCanvas.create_rectangle(Left,Top,Right,Bottom,fill = FillColor,outline = BorderColor,width = BorderWidth,tag = 'drawing_shape')\n")
    f.write("                        #显示文字\n")
    f.write("                        if CellText != '':\n")
    f.write("                            if CellText.find('┇') >= 0:\n")
    f.write("                                drawCanvas.create_line(Left,Top,Right,Bottom,fill = BorderColor,width = BorderWidth,tag = 'drawing_shape')\n")
    f.write("                                TextSplitArray = CellText.split('┇')\n")
    f.write("                                Text1 = TextSplitArray[0]\n")
    f.write("                                Text2 = TextSplitArray[1]\n")
    f.write("                                CellWidth  = Right - Left\n")
    f.write("                                CellHeight = Bottom - Top\n")
    f.write("                                cell_cx1 = Left + int(CellWidth * 0.67)\n")
    f.write("                                cell_cy1 = Top + int(CellHeight * 0.33)\n")
    f.write("                                TextAnchor1 = 'center'\n")
    f.write("                                cell_cx2 = Left + int(CellWidth * 0.33)\n")
    f.write("                                cell_cy2 = Top + int(CellHeight * 0.67)\n")
    f.write("                                TextAnchor2 = 'center'\n")
    f.write("                                if FontIndex >= 0:\n")
    f.write("                                    FontInfo = TableInfo['font'][FontIndex]\n")
    f.write("                                    fontName = FontInfo[0]\n")
    f.write("                                    fontSize = FontInfo[1]\n")
    f.write("                                    drawCanvas.create_text(cell_cx1,cell_cy1,fill=TextColor,text=Text1, font=(fontName,fontSize),anchor=TextAnchor1,tag='drawing_shape')\n")
    f.write("                                    drawCanvas.create_text(cell_cx2,cell_cy2,fill=TextColor,text=Text2, font=(fontName,fontSize),anchor=TextAnchor2,tag='drawing_shape')\n")
    f.write("                                else:\n")
    f.write("                                    drawCanvas.create_text(cell_cx1,cell_cy1,fill=TextColor,text=Text1, anchor=TextAnchor1,tag='drawing_shape')\n")
    f.write("                                    drawCanvas.create_text(cell_cx2,cell_cy2,fill=TextColor,text=Text2, anchor=TextAnchor2,tag='drawing_shape')\n")
    f.write("                            else:\n")
    f.write("                                cell_cx = int((Left + Right)/2)\n")
    f.write("                                cell_cy = int((Top + Bottom)/2)\n")
    f.write("                                #['WN','N','EN','W','CENTER','E','WS','S','ES','XY']\n")
    f.write("                                if TextAnchor == 'n' or TextAnchor == 'wn' or TextAnchor == 'en'  or TextAnchor == 'nw' or TextAnchor == 'ne':\n")
    f.write("                                    cell_cy = int(Top)\n")
    f.write("                                elif TextAnchor == 's' or TextAnchor == 'ws' or TextAnchor == 'es' or TextAnchor == 'sw' or TextAnchor == 'se':\n")
    f.write("                                    cell_cy = int(Bottom)\n")
    f.write("                                if TextAnchor == 'w' or TextAnchor == 'wn' or TextAnchor == 'ws' or TextAnchor == 'nw' or TextAnchor == 'sw':\n")
    f.write("                                    cell_cx = int(Left)\n")
    f.write("                                elif TextAnchor == 'e' or TextAnchor == 'en' or TextAnchor == 'es' or TextAnchor == 'ne' or TextAnchor == 'se':\n")
    f.write("                                    cell_cx = int(Right)\n")
    f.write("                                if FontIndex >= 0:\n")
    f.write("                                    FontInfo = TableInfo['font'][FontIndex]\n")
    f.write("                                    fontName = FontInfo[0]\n")
    f.write("                                    fontSize = FontInfo[1]\n")
    f.write("                                    drawCanvas.create_text(cell_cx,cell_cy,fill=TextColor,text=CellText, font=(fontName,fontSize),anchor=TextAnchor,tag='drawing_shape')\n")
    f.write("                                else:\n")
    f.write("                                    drawCanvas.create_text(cell_cx,cell_cy,fill=TextColor,text=CellText, anchor=TextAnchor,tag='drawing_shape')\n")



    f.write("def DrawLine(uiName,drawCanvasName,x1,y1,x2,y2,color,width=1,dash=(0,0),shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1450]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write("    if shapeTag == '':\n")
    f.write("        Index = 0\n")
    f.write("        for ShepTagName in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n")
    f.write("            if ShepTagName.find('line_') == 0:\n")
    f.write("                NameSplitArray = ShepTagName.partition('line_')\n")
    f.write("                if NameSplitArray[2].isdigit() == True:\n")
    f.write("                    Number = int(NameSplitArray[2])\n")
    f.write("                    if Number > Index:\n")
    f.write("                        Index = Number\n")
    f.write("        Index = Index + 1\n")
    f.write('        shapeTag = str("line_%d"%Index)\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'line\',x1,y1,x2,y2,color,color,width,dash[0],dash[1]]\n')
    f.write("    if drawCanvasName not in G_CanvasParamDictionary[uiName]:\n")
    f.write("        G_CanvasParamDictionary[uiName][drawCanvasName] = {}\n")
    f.write("    G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=[color,color,width,dash[0],dash[1],None,'',None,'']\n")
    f.write("    DoCanvasRecord(drawCanvas,'line',x1,y1,x2,y2,color,color,width,dash1=dash[0],dash2=dash[1],newImage=None,text='',textFont = None,textColor='',shapeTag=shapeTag)\n")
    f.write("    return shapeTag\n")
    f.write("def DrawArrow(uiName,drawCanvasName,x1,y1,x2,y2,color,width=1,dash=(0,0),shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1451]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write("    if shapeTag == '':\n")
    f.write("        Index = 0\n")
    f.write("        for ShepTagName in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n")
    f.write("            if ShepTagName.find('arrow_') == 0:\n")
    f.write("                NameSplitArray = ShepTagName.partition('arrow_')\n")
    f.write("                if NameSplitArray[2].isdigit() == True:\n")
    f.write("                    Number = int(NameSplitArray[2])\n")
    f.write("                    if Number > Index:\n")
    f.write("                        Index = Number\n")
    f.write("        Index = Index + 1\n")
    f.write('        shapeTag = str("arrow_%d"%Index)\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'arrow\',x1,y1,x2,y2,color,color,width,dash[0],dash[1]]\n')
    f.write("    if drawCanvasName not in G_CanvasParamDictionary[uiName]:\n")
    f.write("        G_CanvasParamDictionary[uiName][drawCanvasName] = {}\n")
    f.write("    G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=[color,color,width,dash[0],dash[1],None,'',None,'']\n")
    f.write("    DoCanvasRecord(drawCanvas,'arrow',x1,y1,x2,y2,color,color,width,dash1=dash[0],dash2=dash[1],newImage=None,text='',textFont = None,textColor='',shapeTag=shapeTag)\n")
    f.write("    return shapeTag\n")

    f.write("def DrawTriangle(uiName,drawCanvasName,direction,x1,y1,x2,y2,color,outlinecolor='#FFFFFF',outlinewidth=0,dash=(0,0),shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1453]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write('    TriangleType = "triangle_up"\n')
    f.write('    if direction == "down":\n')
    f.write('        TriangleType = "triangle_down"\n')
    f.write('    if direction == "left":\n')
    f.write('        TriangleType = "triangle_left"\n')
    f.write('    if direction == "right":\n')
    f.write('        TriangleType = "triangle_right"\n')
    f.write("    if shapeTag == '':\n")
    f.write("        Index = 0\n")
    f.write("        for ShepTagName in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n")
    f.write("            if ShepTagName.find('triangle_') == 0:\n")
    f.write("                NameSplitArray = ShepTagName.partition('triangle_')\n")
    f.write("                if NameSplitArray[2].isdigit() == True:\n")
    f.write("                    Number = int(NameSplitArray[2])\n")
    f.write("                    if Number > Index:\n")
    f.write("                        Index = Number\n")
    f.write("        Index = Index + 1\n")
    f.write('        shapeTag = str("triangle_%d"%Index)\n')
    f.write('    G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[TriangleType,x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash[0],dash[1]]\n')
    f.write("    if drawCanvasName not in G_CanvasParamDictionary[uiName]:\n")
    f.write("        G_CanvasParamDictionary[uiName][drawCanvasName] = {}\n")
    f.write("    G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=[color,outlinecolor,outlinewidth,dash[0],dash[1],None,'',None,'']\n")
    f.write("    DoCanvasRecord(drawCanvas,TriangleType,x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash1=dash[0],dash2=dash[1],newImage=None,text='',textFont = None,textColor='',shapeTag=shapeTag)\n")
    f.write("    return shapeTag\n")
    f.write("def DrawRectangle(uiName,drawCanvasName,x1,y1,x2,y2,color,outlinecolor='#FFFFFF',outlinewidth=0,dash=(0,0),shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1452]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write("    if shapeTag == '':\n")
    f.write("        Index = 0\n")
    f.write("        for ShepTagName in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n")
    f.write("            if ShepTagName.find('rect_') == 0:\n")
    f.write("                NameSplitArray = ShepTagName.partition('rect_')\n")
    f.write("                if NameSplitArray[2].isdigit() == True:\n")
    f.write("                    Number = int(NameSplitArray[2])\n")
    f.write("                    if Number > Index:\n")
    f.write("                        Index = Number\n")
    f.write("        Index = Index + 1\n")
    f.write('        shapeTag = str("rect_%d"%Index)\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'rect\',x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash[0],dash[1]]\n')
    f.write("    if drawCanvasName not in G_CanvasParamDictionary[uiName]:\n")
    f.write("        G_CanvasParamDictionary[uiName][drawCanvasName] = {}\n")
    f.write("    G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=[color,outlinecolor,outlinewidth,dash[0],dash[1],None,'',None,'']\n")
    f.write("    DoCanvasRecord(drawCanvas,'rect',x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash1=dash[0],dash2=dash[1],newImage=None,text='',textFont = None,textColor='',shapeTag=shapeTag)\n")
    f.write("    return shapeTag\n")

    f.write("def DrawRoundedRectangle(uiName,drawCanvasName,x1,y1,x2,y2,color,outlinecolor='#FFFFFF',outlinewidth=0,dash=(0,0),roundRadius=10,shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1462]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write("    if shapeTag == '':\n")
    f.write("        Index = 0\n")
    f.write("        for ShepTagName in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n")
    f.write("            if ShepTagName.find('roundrect_') == 0:\n")
    f.write("                NameSplitArray = ShepTagName.partition('roundrect_')\n")
    f.write("                if NameSplitArray[2].isdigit() == True:\n")
    f.write("                    Number = int(NameSplitArray[2])\n")
    f.write("                    if Number > Index:\n")
    f.write("                        Index = Number\n")
    f.write("        Index = Index + 1\n")
    f.write('        shapeTag = str("roundrect_%d"%Index)\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'roundrect\',x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash[0],dash[1]]\n')
    f.write("    if drawCanvasName not in G_CanvasParamDictionary[uiName]:\n")
    f.write("        G_CanvasParamDictionary[uiName][drawCanvasName] = {}\n")
    f.write("    G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=[color,outlinecolor,outlinewidth,dash[0],dash[1],None,'',None,'']\n")
    f.write("    DoCanvasRecord(drawCanvas,'roundrect',x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash1=dash[0],dash2=dash[1],newImage=roundRadius,text='',textFont = None,textColor='',shapeTag=shapeTag)\n")
    f.write("    return shapeTag\n")

    f.write("def DrawCircle(uiName,drawCanvasName,x1,y1,x2,y2,color,outlinecolor='#FFFFFF',outlinewidth=0,dash=(0,0),shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1454]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write("    if shapeTag == '':\n")
    f.write("        Index = 0\n")
    f.write("        for ShepTagName in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n")
    f.write("            if ShepTagName.find('circle_') == 0:\n")
    f.write("                NameSplitArray = ShepTagName.partition('circle_')\n")
    f.write("                if NameSplitArray[2].isdigit() == True:\n")
    f.write("                    Number = int(NameSplitArray[2])\n")
    f.write("                    if Number > Index:\n")
    f.write("                        Index = Number\n")
    f.write("        Index = Index + 1\n")
    f.write('        shapeTag = str("circle_%d"%Index)\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'circle\',x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash[0],dash[1]]\n')
    f.write("    if drawCanvasName not in G_CanvasParamDictionary[uiName]:\n")
    f.write("        G_CanvasParamDictionary[uiName][drawCanvasName] = {}\n")
    f.write("    G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=[color,outlinecolor,outlinewidth,dash[0],dash[1],None,'',None,'']\n")
    f.write("    DoCanvasRecord(drawCanvas,'circle',x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash1=dash[0],dash2=dash[1],newImage=None,text='',textFont = None,textColor='',shapeTag=shapeTag)\n")
    f.write("    return shapeTag\n")
    f.write("def DrawDiamond(uiName,drawCanvasName,x1,y1,x2,y2,color,outlinecolor='#FFFFFF',outlinewidth=0,dash=(0,0),shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1455]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write("    if shapeTag == '':\n")
    f.write("        Index = 0\n")
    f.write("        for ShepTagName in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n")
    f.write("            if ShepTagName.find('diamond_') == 0:\n")
    f.write("                NameSplitArray = ShepTagName.partition('diamond_')\n")
    f.write("                if NameSplitArray[2].isdigit() == True:\n")
    f.write("                    Number = int(NameSplitArray[2])\n")
    f.write("                    if Number > Index:\n")
    f.write("                        Index = Number\n")
    f.write("        Index = Index + 1\n")
    f.write('        shapeTag = str("diamond_%d"%Index)\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'diamond\',x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash[0],dash[1]]\n')
    f.write("    if drawCanvasName not in G_CanvasParamDictionary[uiName]:\n")
    f.write("        G_CanvasParamDictionary[uiName][drawCanvasName] = {}\n")
    f.write("    G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=[color,outlinecolor,outlinewidth,dash[0],dash[1],None,'',None,'']\n")
    f.write("    DoCanvasRecord(drawCanvas,'diamond',x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash1=dash[0],dash2=dash[1],newImage=None,text='',textFont = None,textColor='',shapeTag=shapeTag)\n")
    f.write("    return shapeTag\n")
    f.write("def DrawCylinder(uiName,drawCanvasName,x1,y1,x2,y2,color,outlinecolor='#FFFFFF',outlinewidth=0,dash=(0,0),shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1456]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write("    if shapeTag == '':\n")
    f.write("        Index = 0\n")
    f.write("        for ShepTagName in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n")
    f.write("            if ShepTagName.find('cylinder_') == 0:\n")
    f.write("                NameSplitArray = ShepTagName.partition('cylinder_')\n")
    f.write("                if NameSplitArray[2].isdigit() == True:\n")
    f.write("                    Number = int(NameSplitArray[2])\n")
    f.write("                    if Number > Index:\n")
    f.write("                        Index = Number\n")
    f.write("        Index = Index + 1\n")
    f.write('        shapeTag = str("cylinder_%d"%Index)\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'cylinder\',x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash[0],dash[1]]\n')
    f.write("    if drawCanvasName not in G_CanvasParamDictionary[uiName]:\n")
    f.write("        G_CanvasParamDictionary[uiName][drawCanvasName] = {}\n")
    f.write("    G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=[color,outlinecolor,outlinewidth,dash[0],dash[1],None,'',None,'']\n")
    f.write("    DoCanvasRecord(drawCanvas,'cylinder',x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash1=dash[0],dash2=dash[1],newImage=None,text='',textFont = None,textColor='',shapeTag=shapeTag)\n")
    f.write("    return shapeTag\n")
    f.write("def DrawStar(uiName,drawCanvasName,x1,y1,x2,y2,color,outlinecolor='#FFFFFF',outlinewidth=0,dash=(0,0),shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1457]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write("    if shapeTag == '':\n")
    f.write("        Index = 0\n")
    f.write("        for ShepTagName in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n")
    f.write("            if ShepTagName.find('star_') == 0:\n")
    f.write("                NameSplitArray = ShepTagName.partition('star_')\n")
    f.write("                if NameSplitArray[2].isdigit() == True:\n")
    f.write("                    Number = int(NameSplitArray[2])\n")
    f.write("                    if Number > Index:\n")
    f.write("                        Index = Number\n")
    f.write("        Index = Index + 1\n")
    f.write('        shapeTag = str("star_%d"%Index)\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'star\',x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash[0],dash[1]]\n')
    f.write("    if drawCanvasName not in G_CanvasParamDictionary[uiName]:\n")
    f.write("        G_CanvasParamDictionary[uiName][drawCanvasName] = {}\n")
    f.write("    G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=[color,outlinecolor,outlinewidth,dash[0],dash[1],None,'',None,'']\n")
    f.write("    DoCanvasRecord(drawCanvas,'star',x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash1=dash[0],dash2=dash[1],newImage=None,text='',textFont = None,textColor='',shapeTag=shapeTag)\n")
    f.write("    return shapeTag\n")
    f.write("def DrawText(uiName,drawCanvasName,x,y,text,textFont=None,color='#FFFFFF',anchor='nw',shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1458]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write("    if shapeTag == '':\n")
    f.write("        Index = 0\n")
    f.write("        for ShepTagName in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n")
    f.write("            if ShepTagName.find('text_') == 0:\n")
    f.write("                NameSplitArray = ShepTagName.partition('text_')\n")
    f.write("                if NameSplitArray[2].isdigit() == True:\n")
    f.write("                    Number = int(NameSplitArray[2])\n")
    f.write("                    if Number > Index:\n")
    f.write("                        Index = Number\n")
    f.write("        Index = Index + 1\n")
    f.write('        shapeTag = str("text_%d"%Index)\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'text\',x,y,x,y,text,textFont,color]\n')
    f.write("    if drawCanvasName not in G_CanvasParamDictionary[uiName]:\n")
    f.write("        G_CanvasParamDictionary[uiName][drawCanvasName] = {}\n")
    f.write("    G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=[color,color,0,0,0,None,text,textFont,color]\n")
    f.write("    drawCanvas.create_text(x, y,fill=color,text=text,font = textFont,anchor=anchor,tag=shapeTag)\n")
    f.write("    return shapeTag\n")
    f.write("def DrawImage(uiName,drawCanvasName,x1,y1,x2,y2,imagefile,shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1459]+'"""\n')
    f.write('    global G_ResDir\n')
    f.write('    global G_ResourcesFileList\n')
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write('    newImage = None\n')
    f.write('    hasGIFAnimation = False\n')
    f.write('    w = x2 - x1\n')
    f.write('    h = y2 - y1\n')
    f.write('    if uiName and uiName in G_CanvasImageDictionary:\n')
    f.write('        if drawCanvasName and drawCanvasName in G_CanvasImageDictionary[uiName]:\n')
    f.write('            for ImageInfo in G_CanvasImageDictionary[uiName][drawCanvasName]:\n')
    f.write('                if ImageInfo[0] == imagefile and ImageInfo[2] == w and ImageInfo[3] == h :\n')
    f.write('                    newImage = ImageInfo[1]\n')
    f.write('                    break\n')
    f.write('    else:\n')
    f.write('        return\n')
    f.write("    if shapeTag == '':\n")
    f.write("        Index = 0\n")
    f.write("        for ShepTagName in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n")
    f.write("            if ShepTagName.find('image_') == 0:\n")
    f.write("                NameSplitArray = ShepTagName.partition('image_')\n")
    f.write("                if NameSplitArray[2].isdigit() == True:\n")
    f.write("                    Number = int(NameSplitArray[2])\n")
    f.write("                    if Number > Index:\n")
    f.write("                        Index = Number\n")
    f.write("        Index = Index + 1\n")
    f.write('        shapeTag = str("image_%d"%Index)\n')
    f.write('    if newImage == None:\n')
    f.write('        resourPath = imagefile\n')
    f.write('        imagefile_Lower = imagefile.lower()\n')
    f.write('        if imagefile_Lower in G_ResourcesFileList:\n')
    f.write('            resourPath = G_ResourcesFileList[imagefile_Lower]\n')
    f.write('        if type(resourPath) == type(""):\n')
    f.write('            if os.path.exists(resourPath) == True:\n')
    f.write('                try:\n')
    f.write("                    if imagefile.find('.gif') >= 0:\n")
    f.write("                        GifData = Image.open(resourPath)\n")
    f.write("                        seq = []\n")
    f.write("                        try:\n")
    f.write("                            while 1:\n")
    f.write("                                imageRGBA = GifData.copy().convert('RGBA')\n")
    f.write("                                resizeImage = imageRGBA.resize((w, h),Image.LANCZOS)\n")
    f.write("                                newImage = ImageTk.PhotoImage(resizeImage)\n")
    f.write("                                seq.append(newImage)\n")
    f.write("                                GifData.seek(len(seq))\n")
    f.write("                        except EOFError:\n")
    f.write("                            pass\n")
    f.write("                        delay = 100\n")
    f.write("                        try:\n")
    f.write("                            delay = GifData.info['duration']\n")
    f.write("                        except KeyError:\n")
    f.write("                            delay = 100\n")
    f.write("                        if delay == 0:\n")
    f.write("                            delay = 100\n")
    f.write("                        newImage = [seq,delay,0]\n")
    f.write("                        hasGIFAnimation = True\n")
    f.write("                    else:\n")
    f.write("                        imageRGBA = Image.open(resourPath).convert('RGBA')\n")
    f.write('                        resizeImage = imageRGBA.resize((w, h),Image.LANCZOS)\n')
    f.write('                        newImage = ImageTk.PhotoImage(resizeImage)\n')
    f.write('                    if drawCanvasName not in G_CanvasImageDictionary[uiName]:\n')
    f.write('                        G_CanvasImageDictionary[uiName][drawCanvasName] = []\n')
    f.write('                    G_CanvasImageDictionary[uiName][drawCanvasName].append([imagefile,newImage,w,h])\n')
    f.write('                except:\n')
    f.write('                    return \n')
    f.write('        elif type(imagefile) == type(Image):\n')
    f.write('            imageRGBA = imagefile\n')
    f.write('            resizeImage = imageRGBA.resize((w, h),Image.LANCZOS)\n')
    f.write('            newImage = ImageTk.PhotoImage(resizeImage)\n')
    f.write('            if drawCanvasName not in G_CanvasImageDictionary[uiName]:\n')
    f.write('                G_CanvasImageDictionary[uiName][drawCanvasName] = []\n')
    f.write('            G_CanvasImageDictionary[uiName][drawCanvasName].append([imagefile,newImage,w,h])\n')
    f.write('    if newImage:\n')
    f.write('        if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('            G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'image\',x1,y1,x2,y2,newImage,imagefile]\n')
    f.write("        if drawCanvasName not in G_CanvasParamDictionary[uiName]:\n")
    f.write("            G_CanvasParamDictionary[uiName][drawCanvasName] = {}\n")
    f.write("        G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=['#FFFFFF','#FFFFFF',0,0,0,newImage,'',None,'#FFFFFF']\n")
    f.write("        DoCanvasRecord(drawCanvas,'image',x1,y1,x2,y2,\'#FFFFFF\',\'#FFFFFF\',0,dash1=0,dash2=0,newImage=newImage,text='',textFont = None,textColor='',shapeTag=shapeTag)\n")
    f.write("        if hasGIFAnimation == True:\n")
    f.write("            drawCanvas.after(100,lambda: updateGIFFrame(uiName,drawCanvasName))\n")
    f.write("def DrawButton(uiName,drawCanvasName,x1,y1,x2,y2,text='',textcolor='#000000',textFont = None,fillcolor='#FFFFFF',outlinecolor='#FFFFFF',outlinewidth=0,dash=(0,0),shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1461]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    center_x = (x1 + x2)/2\n')
    f.write('    center_y = (y1 + y2)/2\n')
    f.write("    oval_rx = 20\n")
    f.write("    dash1=dash[0],dash2=dash[1]\n")
    f.write('    OutLineTag = shapeTag+"_outline"\n')
    f.write('    half_width = int((outlinewidth+1)/2)\n')
    f.write("    if shapeTag == '':\n")
    f.write("        Index = 0\n")
    f.write("        for ShepTagName in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n")
    f.write("            if ShepTagName.find('button_') == 0:\n")
    f.write("                NameSplitArray = ShepTagName.partition('button_')\n")
    f.write("                if NameSplitArray[2].isdigit() == True:\n")
    f.write("                    Number = int(NameSplitArray[2])\n")
    f.write("                    if Number > Index:\n")
    f.write("                        Index = Number\n")
    f.write("        Index = Index + 1\n")
    f.write('        shapeTag = str("button_%d"%Index)\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'button\',x1,y1,x2,y2,text,textcolor,textFont,fillcolor,outlinecolor,outlinewidth,dash[0],dash[1],None]\n')
    f.write("    if drawCanvasName not in G_CanvasParamDictionary[uiName]:\n")
    f.write("        G_CanvasParamDictionary[uiName][drawCanvasName] = {}\n")
    f.write('    G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=[fillcolor,outlinecolor,outlinewidth,dash[0],dash[1],None,text,textFont,textcolor]\n')
    f.write("    if  dash1 > 0 :\n")
    f.write("        drawCanvas.create_oval(x1,y1,x1+2*oval_rx,y2,fill=fillcolor,outline=outlinecolor,dash=(dash1,dash2),width = outlinewidth,tag=shapeTag)\n")
    f.write("        drawCanvas.create_oval(x2-2*oval_rx,y1,x2,y2,fill=fillcolor,outline=outlinecolor,dash=(dash1,dash2),width = outlinewidth,tag=shapeTag)\n")
    f.write("        drawCanvas.create_rectangle(x1+oval_rx, y1, x2-oval_rx, y2,fill=fillcolor,outline=outlinecolor,dash=(dash1,dash2), width = outlinewidth,tag=shapeTag)\n")
    f.write("        drawCanvas.create_line(x1+oval_rx, y1+half_width, x1+oval_rx, y2-half_width,fill=fillcolor,width = outlinewidth,tag=OutLineTag)\n")
    f.write("        drawCanvas.create_line(x2-oval_rx, y1+half_width, x2-oval_rx, y2-half_width,fill=fillcolor,width = outlinewidth,tag=OutLineTag)\n")
    f.write("    else:\n")
    f.write("        drawCanvas.create_oval(x1,y1,x1+2*oval_rx,y2,fill=fillcolor,outline=outlinecolor,width = outlinewidth,tag=shapeTag)\n")
    f.write("        drawCanvas.create_oval(x2-2*oval_rx,y1,x2,y2,fill=fillcolor,outline=outlinecolor,width = outlinewidth,tag=shapeTag)\n")
    f.write("        drawCanvas.create_rectangle(x1+oval_rx, y1, x2-oval_rx, y2,fill=fillcolor,outline=outlinecolor, width = outlinewidth,tag=shapeTag)\n")
    f.write("        drawCanvas.create_line(x1+oval_rx, y1+half_width, x1+oval_rx, y2-half_width,fill=fillcolor,width = outlinewidth,tag=OutLineTag)\n")
    f.write("        drawCanvas.create_line(x2-oval_rx, y1+half_width, x2-oval_rx, y2-half_width,fill=fillcolor,width = outlinewidth,tag=OutLineTag)\n")
    f.write('    if len(text) > 0:\n')
    f.write("        drawCanvas.create_text(center_x, center_y,text=text,fill=textcolor,anchor='center',tag=shapeTag+\"_text\")\n")
    f.write("def EraserCanvas(uiName,drawCanvasName,x1,y1,x2,y2):\n")
    f.write('    """'+Language.G_Language[1460]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write("    bgcolor = drawCanvas.cget('bg')\n")
    f.write("    DoCanvasRecord(drawCanvas,'eraser',x1,y1,x2,y2,bgcolor,bgcolor,0,dash1=0,dash2=0,newImage=None,text='',textFont = None,textColor='',shapeTag='')\n")
    f.write("def SetCanvasGridBG(uiName,drawCanvasName,bgcolor='#888888',tile_width=20,tile_height=20):\n")
    f.write('    """'+Language.G_Language[9202]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write("    canvasWidth = drawCanvas.winfo_width()\n")
    f.write("    canvasHeight = drawCanvas.winfo_height()\n")
    f.write("    DoCanvasRecord(drawCanvas,'grid',0,0,canvasWidth,canvasHeight,bgcolor,bgcolor,0,dash1=tile_width,dash2=tile_height,newImage=None,text='',textFont = None,textColor='',shapeTag='grid_bg')\n")

#写入画板动作
def WriteLoadCanvasRecordFunction(f):
    #f.write(Language.G_Language[1235]+'\n')
    f.write('def checkPtInRect(x,y,left,right,top,bottom):\n')
    f.write('    if x < left:return 0\n')
    f.write('    if x > right:return 0\n')
    f.write('    if y < top:return 0\n')
    f.write('    if y > bottom:return 0\n')
    f.write('    return 1\n')
    f.write('def Shape_MouseEvent(event,uiName,canvasName,shapeTag,eventName):\n')
    f.write("    if eventName == 'MouseLeave':\n")
    f.write("        x1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][1]\n")
    f.write("        y1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][2]\n")
    f.write("        x2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][3]\n")
    f.write("        y2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][4]\n")
    f.write('        if type(x1) == type(1.0):\n')
    f.write('            x1 = int(x1 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('        if type(y1) == type(1.0):\n')
    f.write('            y1 = int(y1 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('        if type(x2) == type(1.0):\n')
    f.write('            if x2 <= 1.0:\n')
    f.write('                x2 = int(x2 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('            else:\n')
    f.write('                x2 = x1 + int(x2)\n')
    f.write('        if type(y2) == type(1.0):\n')
    f.write('            if y2 <= 1.0:\n')
    f.write('                y2 = int(y2 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('            else:\n')
    f.write('                y2 = y1 + int(y2)\n')
    f.write("        borderwidth = 0\n")
    f.write("        if G_CanvasShapeDictionary[uiName][canvasName][shapeTag][0] == 'button':\n")
    f.write("            borderwidth = 1 + G_CanvasShapeDictionary[uiName][canvasName][shapeTag][10]\n")
    f.write("        if checkPtInRect(event.x,event.y,x1+borderwidth,x2-borderwidth,y1+borderwidth,y2-borderwidth) == 1:\n")
    f.write("            return \n")
    f.write('    if shapeTag not in G_CanvasEventDictionary[uiName][canvasName]:\n')
    f.write('        return\n')
    f.write('    if eventName not in G_CanvasEventDictionary[uiName][canvasName][shapeTag]:\n')
    f.write('        return\n')
    f.write('    for actionInfo in G_CanvasEventDictionary[uiName][canvasName][shapeTag][eventName]:\n')
    f.write('        if actionInfo[0] == "SetShapeRect":\n')
    f.write('            SetShapeRect(uiName ,canvasName,actionInfo[1],actionInfo[2],actionInfo[3],actionInfo[4],actionInfo[5])\n')
    f.write('        elif actionInfo[0] == "SetFillColor":\n')
    f.write('            SetShapeFillColor(uiName ,canvasName,actionInfo[1],actionInfo[2])\n')
    f.write('        elif actionInfo[0] == "SetOutlineColor":\n')
    f.write('            SetShapeOutlineColor(uiName ,canvasName,actionInfo[1],actionInfo[2])\n')
    f.write('        elif actionInfo[0] == "ChangeImage":\n')
    f.write('            SetShapeImage(uiName ,canvasName,actionInfo[1],actionInfo[2])\n')
    f.write('        elif actionInfo[0] == "ChangeText":\n')
    f.write('            SetShapeText(uiName ,canvasName,actionInfo[1],actionInfo[2],actionInfo[3])\n')
    f.write('        elif actionInfo[0] == "JumpToUI":\n')
    f.write('            UIPath, UIFile = os.path.split(actionInfo[2])\n')
    f.write('            UIName, extension = os.path.splitext(UIFile)\n')
    f.write('            if len(UIPath) > 0:\n')
    f.write('                import sys\n')
    f.write('                sys.path.append(UIPath)\n')
    f.write('            GoToUIDialog(uiName,UIName)\n')
    f.write('        elif actionInfo[0] == "LoadUI":\n')
    f.write('            WidgetName = actionInfo[2]\n')
    f.write('            UIPath, UIFile = os.path.split(actionInfo[3])\n')
    f.write('            UIName, extension = os.path.splitext(UIFile)\n')
    f.write('            if len(UIPath) > 0:\n')
    f.write('                import sys\n')
    f.write('                sys.path.append(UIPath)\n')
    f.write('            if WidgetName == "Form_1":\n')
    f.write('                WidgetName == "root"\n')
    f.write('            LoadUIDialog(uiName,WidgetName,UIName)\n')
    f.write('        elif actionInfo[0] == "DeleteShape":\n')
    f.write('            DeleteShape(uiName ,canvasName,actionInfo[1])\n')
    f.write('        elif actionInfo[0] == "OnSwitch":\n')
    f.write('            OnSwitch(uiName ,canvasName,actionInfo[1],actionInfo)\n')
    f.write('        elif actionInfo[0] == "OnExpandOrShrink":\n')
    f.write('            OnExpandOrShrink(uiName ,canvasName,actionInfo[1],actionInfo)\n')
    f.write('        elif actionInfo[0] == "CallFunction":\n')
    f.write('            if actionInfo[1]:\n')
    f.write('                if actionInfo[2]:\n')
    f.write('                   actionInfo[1](event,uiName,canvasName,actionInfo[2])\n')
    f.write('                else:\n')
    f.write('                   actionInfo[1](event,uiName,canvasName)\n')
    f.write('def updateGIFFrame(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1470]+'"""\n')
    f.write('    global G_CanvasShapeDictionary\n')
    f.write('    global G_CanvasImageDictionary\n')
    f.write('    Control = GetElement(uiName,elementName)\n')
    f.write('    if elementName in G_CanvasShapeDictionary[uiName].keys():\n')
    f.write('        for shapeTag in G_CanvasShapeDictionary[uiName][elementName]:\n')
    f.write('            ShapeInfo = G_CanvasShapeDictionary[uiName][elementName][shapeTag]\n')
    f.write("            if ShapeInfo[0] == 'image':\n")
    f.write('                if type(ShapeInfo[5]) == type([]):\n')
    f.write('                    FrameIndex = ShapeInfo[5][2]\n')
    f.write('                    FrameImages = ShapeInfo[5][0]\n')
    f.write('                    x = ShapeInfo[1]\n')
    f.write('                    y = ShapeInfo[2]\n')
    f.write('                    newImage = FrameImages[FrameIndex]\n')
    f.write('                    Control.delete(shapeTag)\n')
    f.write("                    Control.create_image(x, y,image=newImage,anchor='nw',tag=shapeTag)\n")
    f.write('                    FrameIndex = FrameIndex + 1\n')
    f.write('                    if FrameIndex == len(FrameImages):\n')
    f.write('                         FrameIndex = 0\n')
    f.write('                    ShapeInfo[5][2] = FrameIndex\n')
    f.write('    if uiName in G_CanvasImageDictionary:\n')
    f.write('        if elementName in G_CanvasImageDictionary[uiName].keys():\n')
    f.write('            if hasattr(Control,"GetEntry") == True:\n')
    f.write('                Control = Control.GetEntry()\n')
    f.write('            if Control != None:     \n')
    f.write('                for imageInfo in G_CanvasImageDictionary[uiName][elementName]:\n')
    f.write('                    if type(imageInfo) == type([]):\n')
    f.write('                        GifData = imageInfo[1]\n')
    f.write('                        FrameSequ = GifData[0]\n')
    f.write('                        FrameIndex = GifData[2]\n')
    f.write("                        if elementName.find('Text_') >= 0:\n")
    f.write("                            if GifData[3]:\n")
    f.write("                                Control.delete(GifData[3])\n")
    f.write('                                GifData[3] = Control.image_create(tkinter.END, image=FrameSequ[FrameIndex])\n')
    f.write("                            else:\n")
    f.write('                                GifData[3] = Control.image_create(tkinter.END, image=FrameSequ[FrameIndex])\n')
    f.write("                        elif elementName.find('Label_') >= 0 or elementName.find('Button_') >= 0 or elementName.find('RadioButton_') >= 0 or elementName.find('CheckButton_') >= 0:\n")
    f.write('                            Control.configure(image = FrameSequ[FrameIndex])\n')
    f.write('                        FrameIndex = FrameIndex + 1\n')
    f.write('                        if FrameIndex == len(FrameSequ):\n')
    f.write('                            FrameIndex = 0\n')
    f.write('                        GifData[2] = FrameIndex\n')
    f.write('    if Control:\n')
    f.write('        Control.after(100,lambda: updateGIFFrame(uiName,elementName)) \n')
    f.write('def LoadCanvasRecord(uiName,UIScale=1.0):\n')
    f.write('    """'+Language.G_Language[1235]+'"""\n')
    f.write('    global G_ExeDir\n')
    f.write('    global G_ResDir\n')
    f.write('    global G_ResourcesFileList\n')
    f.write('    drawCanvasName = None\n')
    f.write('    drawCanvas = None\n')
    f.write('    drawCanvas_width = 0\n')
    f.write('    drawCanvas_height = 0\n')
    f.write('    canvasFile = os.path.join(G_ResDir,uiName + ".cav")\n')
    f.write('    if os.path.exists(canvasFile) == False:\n')
    f.write('        file_path = os.path.abspath(__file__)\n')  
    f.write('        checkExeDir = os.path.dirname(file_path)\n')  
    f.write('        checkResDir = os.path.join(checkExeDir,"Resources")\n')  
    f.write('        canvasFile = os.path.join(G_ResDir,uiName + ".cav")\n')  
    f.write('        if os.path.exists(canvasFile) == False:\n')  
    f.write('            if uiName.find("_") > 0:\n')  
    f.write('                endIndex = uiName.rfind("_")\n')  
    f.write('                originalName = uiName[0:endIndex]\n')  
    f.write('                canvasFile = os.path.join(G_ResDir,originalName + ".cav")\n')  
    f.write('                if os.path.exists(canvasFile) == False:\n')  
    f.write('                    file_path = os.getcwd()\n')  
    f.write('                    checkExeDir = os.path.dirname(file_path)\n')  
    f.write('                    checkResDir = os.path.join(checkExeDir,"Resources")\n')  
    f.write('                    if os.path.exists(canvasFile) == False:\n')  
    f.write('                        return\n')
    f.write('                    else:\n')  
    f.write('                        G_ExeDir = checkExeDir\n')
    f.write('                        G_ResDir = checkResDir\n')
    f.write('                else:\n')  
    f.write('                    G_ExeDir = checkExeDir\n')
    f.write('                    G_ResDir = checkResDir\n')
    f.write('        else:\n')  
    f.write('            G_ExeDir = checkExeDir\n')
    f.write('            G_ResDir = checkResDir\n')
    f.write('    if os.path.exists(canvasFile) == True:\n')
    f.write("        f = open(canvasFile,encoding='utf-8')\n")
    f.write('        line ="" \n')
    f.write('        while True:\n')
    f.write('            line = f.readline()\n')
    f.write('            if not line:\n')
    f.write('                break\n')
    f.write('            text = line.strip()\n')
    f.write('            if not text:\n')
    f.write('                continue\n')
    f.write("            if text.find('Canvas:') >= 0:\n")
    f.write("                splitArray = text.split(':')\n")
    f.write('                drawCanvasName = splitArray[1].strip()\n')
    f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('                drawCanvas_width = drawCanvas.winfo_width()\n')
    f.write('                drawCanvas_height = drawCanvas.winfo_height()\n')
    f.write('                if drawCanvasName == "Form_1":\n')
    f.write('                    root = GetElement(uiName,"root")\n')
    f.write('                    drawCanvas_width = root.winfo_width()\n')
    f.write('                    drawCanvas_height = root.winfo_height()\n')
    f.write('                G_CanvasSizeDictionary[uiName][drawCanvasName] = [drawCanvas_width,drawCanvas_height]\n')
    f.write('                G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write('                G_CanvasParamDictionary[uiName][drawCanvasName] = {}\n')
    f.write('                G_CanvasFontDictionary[uiName][drawCanvasName] = []\n')
    f.write('                G_CanvasImageDictionary[uiName][drawCanvasName] = []\n')
    f.write('                G_CanvasPointDictionary[uiName][drawCanvasName] = {}\n')
    f.write('                G_CanvasEventDictionary[uiName][drawCanvasName] = {}\n')
    f.write('                continue\n')
    f.write("            elif text.find(',') >= 0:\n")
    f.write('                if drawCanvas != None:\n')
    f.write("                    splitArray = text.split(',')\n")
    f.write("                    splitCount = len(splitArray)\n")
    f.write('                    ShapeType = splitArray[0]\n')
    f.write("                    if ShapeType == 'image':\n")
    f.write("                        if splitArray[1].find('.') > 0:\n")
    f.write('                            x1 = float(splitArray[1])\n')
    f.write('                        else:\n')
    f.write('                            x1 = int(splitArray[1])\n')
    f.write('                            x1 = int(x1 * UIScale)\n')
    f.write("                        if splitArray[2].find('.') > 0:\n")
    f.write('                            y1 = float(splitArray[2])\n')
    f.write('                        else:\n')
    f.write('                            y1 = int(splitArray[2])\n')
    f.write('                            y1 = int(y1 * UIScale)\n')
    f.write("                        if splitArray[3].find('.') > 0:\n")
    f.write('                            x2 = float(splitArray[3])\n')
    f.write('                        else:\n')
    f.write('                            x2 = int(splitArray[3])\n')
    f.write('                            x2 = int(x2 * UIScale)\n')
    f.write("                        if splitArray[4].find('.') > 0:\n")
    f.write('                            y2 = float(splitArray[4])\n')
    f.write('                        else:\n')
    f.write('                            y2 = int(splitArray[4])\n')
    f.write('                            y2 = int(y2 * UIScale)\n')
    f.write('                        w = x2 - x1\n')
    f.write('                        if isinstance(w,float) == True:\n')
    f.write('                            w = w * drawCanvas_width\n')
    f.write('                        h = y2 - y1\n')
    f.write('                        if isinstance(h,float) == True:\n')
    f.write('                            h = h * drawCanvas_height\n')
    f.write('                        fill = splitArray[5]\n')
    f.write('                        outline = splitArray[6]\n')
    f.write('                        width = int(splitArray[7])\n')
    f.write('                        dashx = int(splitArray[8])\n')
    f.write('                        dashy = int(splitArray[9])\n')
    f.write('                        imagefile = splitArray[10]\n')
    f.write('                        newImage = None\n')
    f.write("                        newtext = ''\n")
    f.write('                        textFont = None\n')
    f.write("                        textColor=''\n")
    f.write("                        shapeTag = ''\n")
    f.write('                        if len(splitArray) > 12:\n')
    f.write('                            shapeTag = splitArray[11]\n')
    f.write('                        for ImageInfo in G_CanvasImageDictionary[uiName][drawCanvasName]:\n')
    f.write('                            if ImageInfo[0] == imagefile and ImageInfo[2] == w and ImageInfo[3] == h :\n')
    f.write('                                newImage = ImageInfo[1]\n')
    f.write('                                continue\n')
    f.write('                        if newImage == None:\n')
    f.write('                            imagefile_Lower = imagefile.lower()\n')
    f.write('                            if imagefile_Lower in G_ResourcesFileList:\n')
    f.write('                                resourPath = G_ResourcesFileList[imagefile_Lower]\n')
    f.write('                                if os.path.exists(resourPath) == True:\n')
    f.write('                                    try:\n')
    f.write("                                        imageRGBA = Image.open(resourPath).convert('RGBA')\n")
    f.write('                                        resizeImage = imageRGBA.resize((w, h),Image.LANCZOS)\n')
    f.write('                                        newImage = ImageTk.PhotoImage(resizeImage)\n')
    f.write('                                    except:\n')
    f.write('                                        pass \n')
    f.write('                            G_CanvasImageDictionary[uiName][drawCanvasName].append([imagefile,newImage,w,h])\n')
    f.write('                        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[ShapeType,x1,y1,x2,y2,newImage,imagefile]\n')
    f.write('                        G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=[fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor]\n')
    f.write('                        DoCanvasRecord(drawCanvas,ShapeType,x1,y1,x2,y2,fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor,shapeTag)\n')
    f.write("                    elif ShapeType == 'text':\n")
    f.write("                        if splitArray[1].find('.') > 0:\n")
    f.write('                            x1 = float(splitArray[1])\n')
    f.write('                        else:\n')
    f.write('                            x1 = int(splitArray[1])\n')
    f.write('                            x1 = int(x1 * UIScale)\n')
    f.write("                        if splitArray[2].find('.') > 0:\n")
    f.write('                            y1 = float(splitArray[2])\n')
    f.write('                        else:\n')
    f.write('                            y1 = int(splitArray[2])\n')
    f.write('                            y1 = int(y1 * UIScale)\n')
    f.write("                        if splitArray[3].find('.') > 0:\n")
    f.write('                            x2 = float(splitArray[3])\n')
    f.write('                        else:\n')
    f.write('                            x2 = int(splitArray[3])\n')
    f.write('                            x2 = int(x2 * UIScale)\n')
    f.write("                        if splitArray[4].find('.') > 0:\n")
    f.write('                            y2 = float(splitArray[4])\n')
    f.write('                        else:\n')
    f.write('                            y2 = int(splitArray[4])\n')
    f.write('                            y2 = int(y2 * UIScale)\n')
    f.write('                        w = x2 - x1\n')
    f.write('                        if isinstance(w,float) == True:\n')
    f.write('                            w = w * drawCanvas_width\n')
    f.write('                        h = y2 - y1\n')
    f.write('                        if isinstance(h,float) == True:\n')
    f.write('                            h = h * drawCanvas_height\n')
    f.write('                        fill = splitArray[5]\n')
    f.write('                        outline = splitArray[6]\n')
    f.write('                        width = int(splitArray[7])\n')
    f.write('                        dashx = int(splitArray[8])\n')
    f.write('                        dashy = int(splitArray[9])\n')
    f.write("                        imagefile = ''\n")
    f.write('                        newImage = None\n')
    f.write("                        shapeTag = ''\n")
    f.write('                        newtext = splitArray[10]\n')
    f.write('                        for i in range(11,splitCount-8):\n')
    f.write('                            newtext = newtext + ","+splitArray[i]\n')                
    f.write('                        familytext = splitArray[-8]\n')
    f.write('                        sizetext = int(int(splitArray[-7]) * UIScale)\n')
    f.write('                        sizetext = str(sizetext)\n')
    f.write('                        weighttext = splitArray[-6]\n')
    f.write('                        slanttext = splitArray[-5]\n')
    f.write('                        underlinetext = splitArray[-4]\n')
    f.write('                        overstriketext = splitArray[-3]\n')
    f.write("                        textColor=''\n")
    f.write('                        textFont = tkinter.font.Font(family=familytext, size=sizetext,weight=weighttext,slant=slanttext,underline=underlinetext,overstrike=overstriketext)\n')
    f.write('                        shapeTag = splitArray[-2]\n')
    f.write('                        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[ShapeType,x1,y1,x2,y2,newtext,textFont,fill]\n')
    f.write('                        #字体\n')
    f.write('                        fontFind = False\n')
    f.write('                        for fontInfo in G_CanvasFontDictionary[uiName][drawCanvasName]:\n')
    f.write('                            if fontInfo[1] == familytext and fontInfo[2] == sizetext and fontInfo[3] == weighttext and fontInfo[4] == slanttext and fontInfo[5] == underlinetext and fontInfo[6] == overstriketext:\n')
    f.write('                                fontFind = True\n')
    f.write('                                continue\n')
    f.write('                        if fontFind == False:\n')
    f.write('                            G_CanvasFontDictionary[uiName][drawCanvasName].append([textFont,familytext,sizetext,weighttext,slanttext,underlinetext,overstriketext])\n')
    f.write('                        G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=[fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor]\n')
    f.write('                        DoCanvasRecord(drawCanvas,ShapeType,x1,y1,x2,y2,fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor,shapeTag)\n')
    f.write("                    elif ShapeType == 'button':\n")
    f.write("                        if splitArray[1].find('.') > 0:\n")
    f.write('                            x1 = float(splitArray[1])\n')
    f.write('                        else:\n')
    f.write('                            x1 = int(splitArray[1])\n')
    f.write('                            x1 = int(x1 * UIScale)\n')
    f.write("                        if splitArray[2].find('.') > 0:\n")
    f.write('                            y1 = float(splitArray[2])\n')
    f.write('                        else:\n')
    f.write('                            y1 = int(splitArray[2])\n')
    f.write('                            y1 = int(y1 * UIScale)\n')
    f.write("                        if splitArray[3].find('.') > 0:\n")
    f.write('                            x2 = float(splitArray[3])\n')
    f.write('                        else:\n')
    f.write('                            x2 = int(splitArray[3])\n')
    f.write('                            x2 = int(x2 * UIScale)\n')
    f.write("                        if splitArray[4].find('.') > 0:\n")
    f.write('                            y2 = float(splitArray[4])\n')
    f.write('                        else:\n')
    f.write('                            y2 = int(splitArray[4])\n')
    f.write('                            y2 = int(y2 * UIScale)\n')
    f.write('                        w = x2 - x1\n')
    f.write('                        if isinstance(w,float) == True:\n')
    f.write('                            w = w * drawCanvas_width\n')
    f.write('                        h = y2 - y1\n')
    f.write('                        if isinstance(h,float) == True:\n')
    f.write('                            h = h * drawCanvas_height\n')
    f.write('                        fill = splitArray[5]\n')
    f.write('                        outline = splitArray[6]\n')
    f.write('                        width = int(splitArray[7])\n')
    f.write('                        dashx = int(splitArray[8])\n')
    f.write('                        dashy = int(splitArray[9])\n')
    f.write("                        shapeTag = ''\n")
    f.write('                        newtext = splitArray[10]\n')
    f.write('                        for i in range(11,splitCount-11):\n')
    f.write('                            newtext = newtext + ","+splitArray[i]\n')         
    f.write('                        familytext = splitArray[-11]\n')
    f.write('                        sizetext = int(int(splitArray[-10]) * UIScale)\n')
    f.write('                        sizetext = str(sizetext)\n')
    f.write('                        weighttext = splitArray[-9]\n')
    f.write('                        slanttext = splitArray[-8]\n')
    f.write('                        underlinetext = splitArray[-7]\n')
    f.write('                        overstriketext = splitArray[-6]\n')
    f.write('                        textColor = splitArray[-5]\n')
    f.write('                        textFont = None\n')
    f.write('                        if len(familytext) > 0:\n')
    f.write('                            textFont = tkinter.font.Font(family=familytext, size=sizetext,weight=weighttext,slant=slanttext,underline=underlinetext,overstrike=overstriketext)\n')
    f.write('                            #字体\n')
    f.write('                            fontFind = False\n')
    f.write('                            for fontInfo in G_CanvasFontDictionary[uiName][drawCanvasName]:\n')
    f.write('                                if fontInfo[1] == familytext and fontInfo[2] == sizetext and fontInfo[3] == weighttext and fontInfo[4] == slanttext and fontInfo[5] == underlinetext and fontInfo[6] == overstriketext:\n')
    f.write('                                    fontFind = True\n')
    f.write('                                    continue\n')
    f.write('                            if fontFind == False:\n')
    f.write('                                G_CanvasFontDictionary[uiName][drawCanvasName].append([textFont,familytext,sizetext,weighttext,slanttext,underlinetext,overstriketext])\n')
    f.write('                        imagefile = splitArray[-4]\n')
    f.write('                        newImage = None\n')
    f.write('                        if imagefile != "":\n')
    f.write('                            for ImageInfo in G_CanvasImageDictionary[uiName][drawCanvasName]:\n')
    f.write('                                if ImageInfo[0] == imagefile and ImageInfo[2] == w and ImageInfo[3] == h :\n')
    f.write('                                    newImage = ImageInfo[1]\n')
    f.write('                                    continue\n')
    f.write('                            if newImage == None:\n')
    f.write('                                imagefile_Lower = imagefile.lower()\n')
    f.write('                                if imagefile_Lower in G_ResourcesFileList:\n')
    f.write('                                    resourPath = G_ResourcesFileList[imagefile_Lower]\n')
    f.write('                                    if os.path.exists(resourPath) == True:\n')
    f.write('                                        try:\n')
    f.write("                                            imageRGBA = Image.open(resourPath).convert('RGBA')\n")
    f.write('                                            resizeImage = imageRGBA.resize((w, h),Image.LANCZOS)\n')
    f.write('                                            newImage = ImageTk.PhotoImage(resizeImage)\n')
    f.write('                                        except:\n')
    f.write('                                            return \n')
    f.write('                                G_CanvasImageDictionary[uiName][drawCanvasName].append([imagefile,newImage,w,h])\n')
    f.write('                        shapeTag = splitArray[-2]\n')
    f.write('                        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[ShapeType,x1,y1,x2,y2,newtext,textColor,textFont,fill,outline,width,dashx,dashy,newImage]\n')
    f.write('                        G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=[fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor]\n')
    f.write('                        DoCanvasRecord(drawCanvas,ShapeType,x1,y1,x2,y2,fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor,shapeTag)\n')
    f.write("                    elif ShapeType == 'roundrect':\n")
    f.write('                        if len(splitArray) > 11:\n')
    f.write("                            if splitArray[1].find('.') > 0:\n")
    f.write('                                x1 = float(splitArray[1])\n')
    f.write('                            else:\n')
    f.write('                                x1 = int(splitArray[1])\n')
    f.write('                                x1 = int(x1 * UIScale)\n')
    f.write("                            if splitArray[2].find('.') > 0:\n")
    f.write('                                y1 = float(splitArray[2])\n')
    f.write('                            else:\n')
    f.write('                                y1 = int(splitArray[2])\n')
    f.write('                                y1 = int(y1 * UIScale)\n')
    f.write("                            if splitArray[3].find('.') > 0:\n")
    f.write('                                x2 = float(splitArray[3])\n')
    f.write('                            else:\n')
    f.write('                                x2 = int(splitArray[3])\n')
    f.write('                                x2 = int(x2 * UIScale)\n')
    f.write("                            if splitArray[4].find('.') > 0:\n")
    f.write('                                y2 = float(splitArray[4])\n')
    f.write('                            else:\n')
    f.write('                                y2 = int(splitArray[4])\n')
    f.write('                                y2 = int(y2 * UIScale)\n')
    f.write('                            w = x2 - x1\n')
    f.write('                            if isinstance(w,float) == True:\n')
    f.write('                                w = w * drawCanvas_width\n')
    f.write('                            h = y2 - y1\n')
    f.write('                            if isinstance(h,float) == True:\n')
    f.write('                                h = h * drawCanvas_height\n')
    f.write('                            fill = splitArray[5]\n')
    f.write('                            outline = splitArray[6]\n')
    f.write('                            width = int(splitArray[7])\n')
    f.write('                            dashx = int(splitArray[8])\n')
    f.write('                            dashy = int(splitArray[9])\n')
    f.write('                            imagefile = int(splitArray[10])\n')
    f.write('                            newImage = imagefile\n')
    f.write("                            newtext = ''\n")
    f.write('                            textFont = None\n')
    f.write("                            textColor = ''\n")
    f.write('                            shapeTag = splitArray[11]\n')
    f.write('                            G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[ShapeType,x1,y1,x2,y2,fill,outline,width,dashx,dashy]\n')
    f.write('                            G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=[fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor]\n')
    f.write('                            DoCanvasRecord(drawCanvas,ShapeType,x1,y1,x2,y2,fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor,shapeTag)\n')
    f.write("                    elif ShapeType == 'point':\n")
    f.write("                        if splitArray[1].find('.') > 0:\n")
    f.write('                            x1 = float(splitArray[1])\n')
    f.write('                        else:\n')
    f.write('                            x1 = int(splitArray[1])\n')
    f.write('                            x1 = int(x1 * UIScale)\n')
    f.write("                        if splitArray[2].find('.') > 0:\n")
    f.write('                            y1 = float(splitArray[2])\n')
    f.write('                        else:\n')
    f.write('                            y1 = int(splitArray[2])\n')
    f.write('                            y1 = int(y1 * UIScale)\n')
    f.write("                        if splitArray[3].find('.') > 0:\n")
    f.write('                            x2 = float(splitArray[3])\n')
    f.write('                        else:\n')
    f.write('                            x2 = int(splitArray[3])\n')
    f.write('                            x2 = int(x2 * UIScale)\n')
    f.write("                        if splitArray[4].find('.') > 0:\n")
    f.write('                            y2 = float(splitArray[4])\n')
    f.write('                        else:\n')
    f.write('                            y2 = int(splitArray[4])\n')
    f.write('                            y2 = int(y2 * UIScale)\n')
    f.write('                        w = x2 - x1\n')
    f.write('                        if isinstance(w,float) == True:\n')
    f.write('                            w = w * drawCanvas_width\n')
    f.write('                        h = y2 - y1\n')
    f.write('                        if isinstance(h,float) == True:\n')
    f.write('                            h = h * drawCanvas_height\n')
    f.write('                        fill = splitArray[5]\n')
    f.write('                        outline = splitArray[6]\n')
    f.write('                        width = int(splitArray[7])\n')
    f.write('                        dashx = int(splitArray[8])\n')
    f.write('                        dashy = int(splitArray[9])\n')
    f.write('                        parentShapeTag = splitArray[10]\n')
    f.write("                        imagefile = ''\n")
    f.write('                        newImage = None\n')
    f.write("                        newtext = ''\n")
    f.write('                        textFont = None\n')
    f.write("                        textColor = ''\n")
    f.write("                        shapeTag = ''\n")
    f.write('                        centerX = (x1 + x2)*0.5\n')
    f.write('                        if centerX  > 1.0:\n')
    f.write('                            centerX = int(centerX)\n')                 
    f.write('                        centerY = (y1 + y2)*0.5\n')
    f.write('                        if centerY  > 1.0:\n')
    f.write('                            centerY = int(centerY)\n')      
    f.write('                        if len(splitArray) > 12:\n')
    f.write('                            shapeTag = splitArray[11]\n')
    f.write('                            G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=(ShapeType,x1,y1,x2,y2)\n')
    f.write('                        if parentShapeTag not in G_CanvasPointDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasPointDictionary[uiName][drawCanvasName][parentShapeTag] = {}\n')
    f.write('                        G_CanvasPointDictionary[uiName][drawCanvasName][parentShapeTag][shapeTag] = [centerX,centerY]\n')
    f.write('                        G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=[fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor]\n')
    f.write('                        DoCanvasRecord(drawCanvas,ShapeType,x1,y1,x2,y2,fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor,shapeTag)\n')
    # f.write("                    elif ShapeType == 'listmenu':\n")
    # f.write('                        shapeTag = splitArray[-2]\n')
    # f.write('                        LockFlag = splitArray[-1]\n')
    # f.write("                        if splitArray[1].find('.') > 0:\n")
    # f.write('                            x1 = float(splitArray[1])\n')
    # f.write('                        else:\n')
    # f.write('                            x1 = int(splitArray[1])\n')
    # f.write("                        if splitArray[2].find('.') > 0:\n")
    # f.write('                            y1 = float(splitArray[2])\n')
    # f.write('                        else:\n')
    # f.write('                            y1 = int(splitArray[2])\n')
    # f.write("                        if splitArray[3].find('.') > 0:\n")
    # f.write('                            x2 = float(splitArray[3])\n')
    # f.write('                        else:\n')
    # f.write('                            x2 = int(splitArray[3])\n')
    # f.write("                        if splitArray[4].find('.') > 0:\n")
    # f.write('                            y2 = float(splitArray[4])\n')
    # f.write('                        else:\n')
    # f.write('                            y2 = int(splitArray[4])\n')
    # f.write('                        w  = x2 - x1\n')
    # f.write('                        h  = y2 - y1\n')
    # f.write('                        fill = splitArray[5]\n')
    # f.write('                        outline = splitArray[6]\n')
    # f.write('                        width = int(splitArray[7])\n')
    # f.write('                        dashx = int(splitArray[8])\n')
    # f.write('                        dashy = int(splitArray[9])\n')
    # f.write("                        menuInfo_Begin = text.find('{')\n")
    # f.write("                        menuInfo_End = text.rfind('}')\n")
    # f.write("                        menuInfo = text[menuInfo_Begin :menuInfo_End+1]\n")
    # f.write("                        menuInfo = menuInfo.replace(\"'\",'\"')\n")
    # f.write("                        menu_dict = json.loads(menuInfo)\n")
    # f.write("                        imagefile = ''\n")
    # f.write('                        newImage = menu_dict\n')
    # f.write("                        newtext = ''\n")
    # f.write('                        textFont = None\n')
    # f.write("                        textColor = ''\n")
    # f.write("                        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[ShapeType,x1,y1,x2,y2,fill,outline,width,dashx,dashy,menu_dict]\n")
    # f.write("                        for subMesh in menu_dict['SubMenus']:\n")
    # f.write('                            subMeshTag = shapeTag + "_" + subMesh[0]\n')
    # f.write('                            if subMeshTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')                     
    # f.write('                                G_CanvasEventDictionary[uiName][drawCanvasName][subMeshTag] = {}\n')   
    # f.write('                            EventName = "ButtonDown"\n') 
    # f.write('                            if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][subMeshTag]:\n')             
    # f.write('                                G_CanvasEventDictionary[uiName][drawCanvasName][subMeshTag][EventName] = []\n')   
    # f.write('                            actionInfo = ["OnExpandOrShrink",subMeshTag,True]\n')                      
    # f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][subMeshTag][EventName].append(actionInfo)\n') 
    # f.write('                        G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=[fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor]\n')
    # f.write('                        DoCanvasRecord(drawCanvas,ShapeType,x1,y1,x2,y2,fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor,shapeTag)\n')
    f.write("                    elif ShapeType == 'table':\n")
    f.write('                        shapeTag = splitArray[-2]\n')
    f.write('                        LockFlag = splitArray[-1]\n')
    f.write("                        if splitArray[1].find('.') > 0:\n")
    f.write('                            x1 = float(splitArray[1])\n')
    f.write('                        else:\n')
    f.write('                            x1 = int(splitArray[1])\n')
    f.write('                            x1 = int(x1 * UIScale)\n')
    f.write("                        if splitArray[2].find('.') > 0:\n")
    f.write('                            y1 = float(splitArray[2])\n')
    f.write('                        else:\n')
    f.write('                            y1 = int(splitArray[2])\n')
    f.write('                            y1 = int(y1 * UIScale)\n')
    f.write("                        if splitArray[3].find('.') > 0:\n")
    f.write('                            x2 = float(splitArray[3])\n')
    f.write('                        else:\n')
    f.write('                            x2 = int(splitArray[3])\n')
    f.write('                            x2 = int(x2 * UIScale)\n')
    f.write("                        if splitArray[4].find('.') > 0:\n")
    f.write('                            y2 = float(splitArray[4])\n')
    f.write('                        else:\n')
    f.write('                            y2 = int(splitArray[4])\n')
    f.write('                            y2 = int(y2 * UIScale)\n')
    f.write('                        w  = x2 - x1\n')
    f.write('                        h  = y2 - y1\n')
    f.write('                        fill = splitArray[5]\n')
    f.write('                        outline = splitArray[6]\n')
    f.write('                        width = int(splitArray[7])\n')
    f.write('                        dashx = int(splitArray[8])\n')
    f.write('                        dashy = int(splitArray[9])\n')
    f.write("                        tableInfo_Begin = text.find('{')\n")
    f.write("                        tableInfo_End = text.rfind('}')\n")
    f.write("                        tableInfo_Text = text[tableInfo_Begin :tableInfo_End+1]\n")
    f.write("                        table_dict = {}\n")
    f.write("                        table_dict['font'] = []\n")
    f.write("                        table_dict['font'].append(['System','12'])\n")
    f.write("                        table_dict['style'] = []\n")
    f.write("                        table_dict['style'].append(['',0,'center','',0,''])\n")
    f.write("                        table_dict['style'].append(['',0,'center','',1,''])\n")
    f.write("                        table_dict['style'].append(['#EEEEEE',0,'center','',1,''])\n")
    f.write("                        table_dict['cows'] = [0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1]\n")
    f.write("                        table_dict['rows'] = []\n")
    f.write("                        table_dict['merge'] = []\n")
    f.write("                        try:\n")
    f.write("                            table_dict = eval(tableInfo_Text)\n")
    f.write("                        except Exception as ex:\n")
    f.write("                            PyMeFuns.MessageBox('"+Language.G_Language[1686]+"'+':'+str(ex))\n")
    f.write("                        imagefile = ''\n")
    f.write('                        newImage = table_dict\n')
    f.write("                        if UIScale < 1.0:\n")
    f.write("                            for FontInfo in table_dict['font']:\n")
    f.write("                                FontInfo[1] = int(int(FontInfo[1]) * UIScale)\n")
    f.write("                                FontInfo[1] = str(FontInfo[1])\n")
    f.write("                        newtext = ''\n")
    f.write('                        textFont = None\n')
    f.write("                        textColor = ''\n")
    f.write("                        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[ShapeType,x1,y1,x2,y2,fill,outline,width,dashx,dashy,table_dict]\n")
    f.write('                        G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=[fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor]\n')
    f.write('                        DoCanvasRecord(drawCanvas,ShapeType,x1,y1,x2,y2,fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor,shapeTag)\n')
    f.write("                    elif ShapeType == 'SetShapeRect':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        TargetShapeTag = splitArray[3]\n')
    f.write("                        if splitArray[4].find('.') > 0:\n")
    f.write('                            x = float(splitArray[4])\n')
    f.write('                        else:\n')
    f.write('                            x = int(splitArray[4])\n')
    f.write('                            x = int(x * UIScale)\n')
    f.write("                        if splitArray[5].find('.') > 0:\n")
    f.write('                            y = float(splitArray[5])\n')
    f.write('                        else:\n')
    f.write('                            y = int(splitArray[5])\n')
    f.write('                            y = int(y * UIScale)\n')
    f.write("                        if splitArray[6].find('.') > 0:\n")
    f.write('                            w = float(splitArray[6])\n')
    f.write('                        else:\n')
    f.write('                            w = int(splitArray[6])\n')
    f.write('                            w = int(w * UIScale)\n')
    f.write("                        if splitArray[7].find('.') > 0:\n")
    f.write('                            h = float(splitArray[7])\n')
    f.write('                        else:\n')
    f.write('                            h = int(splitArray[7])\n')
    f.write('                            h = int(h * UIScale)\n')
    f.write('                        actionInfo = ["SetShapeRect",TargetShapeTag,x,y,w,h]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write("                    elif ShapeType == 'SetFillColor':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        TargetShapeTag = splitArray[3]\n')
    f.write('                        Color = splitArray[4]   \n')
    f.write('                        actionInfo = ["SetFillColor",TargetShapeTag,Color]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write("                    elif ShapeType == 'SetOutlineColor':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        TargetShapeTag = splitArray[3]\n')
    f.write('                        Color = splitArray[4]   \n')
    f.write('                        actionInfo = ["SetOutlineColor",TargetShapeTag,Color]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write("                    elif ShapeType == 'ChangeImage':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        TargetShapeTag = splitArray[3]\n')
    f.write('                        ImageFile = splitArray[4]\n')
    f.write('                        actionInfo = ["ChangeImage",TargetShapeTag,ImageFile]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write("                    elif ShapeType == 'ChangeText':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        TargetShapeTag = splitArray[3]\n')
    f.write('                        Text = splitArray[4]\n')
    f.write('                        TextColor = splitArray[5]\n')
    f.write('                        actionInfo = ["ChangeText",TargetShapeTag,Text,TextColor]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write("                    elif ShapeType == 'JumpToUI':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        TargetUIName = splitArray[3]\n')
    f.write('                        actionInfo = ["JumpToUI",shapeTag,TargetUIName]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write("                    elif ShapeType == 'LoadUI':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        WidgetName = splitArray[3]\n')
    f.write('                        TargetUIName = splitArray[4]\n')
    f.write('                        actionInfo = ["LoadUI",shapeTag,WidgetName,TargetUIName]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write("                    elif ShapeType == 'DeleteShape':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        TargetShapeTag = splitArray[3]\n')
    f.write('                        actionInfo = ["DeleteShape",TargetShapeTag]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write("                    elif ShapeType == 'OnSwitch':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        TargetShapeTag = shapeTag\n')
    f.write('                        actionInfo = ["OnSwitch",TargetShapeTag,True]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write("                    elif ShapeType == 'CallFunction':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        FunctionName = drawCanvasName+"_"+shapeTag+"_on"+EventName\n')
    f.write('                        CallBackFunc = None\n')
    f.write('                        if hasattr(G_UICommandDictionary[uiName],FunctionName) == True:\n')
    f.write('                            CallBackFunc = getattr(G_UICommandDictionary[uiName],FunctionName)\n')
    f.write('                        actionInfo = ["CallFunction",CallBackFunc,None]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write('                    else:\n')
    f.write('                        if len(splitArray) > 11:\n')
    f.write("                            if splitArray[1].find('.') > 0:\n")
    f.write('                                x1 = float(splitArray[1])\n')
    f.write('                            else:\n')
    f.write('                                x1 = int(splitArray[1])\n')
    f.write('                                x1 = int(x1 * UIScale)\n')
    f.write("                            if splitArray[2].find('.') > 0:\n")
    f.write('                                y1 = float(splitArray[2])\n')
    f.write('                            else:\n')
    f.write('                                y1 = int(splitArray[2])\n')
    f.write('                                y1 = int(y1 * UIScale)\n')
    f.write("                            if splitArray[3].find('.') > 0:\n")
    f.write('                                x2 = float(splitArray[3])\n')
    f.write('                            else:\n')
    f.write('                                x2 = int(splitArray[3])\n')
    f.write('                                x2 = int(x2 * UIScale)\n')
    f.write("                            if splitArray[4].find('.') > 0:\n")
    f.write('                                y2 = float(splitArray[4])\n')
    f.write('                            else:\n')
    f.write('                                y2 = int(splitArray[4])\n')
    f.write('                                y2 = int(y2 * UIScale)\n')
    f.write('                            w = x2 - x1\n')
    f.write('                            if isinstance(w,float) == True:\n')
    f.write('                                w = w * drawCanvas_width\n')
    f.write('                            h = y2 - y1\n')
    f.write('                            if isinstance(h,float) == True:\n')
    f.write('                                h = h * drawCanvas_height\n')
    f.write('                            fill = splitArray[5]\n')
    f.write('                            outline = splitArray[6]\n')
    f.write('                            width = int(splitArray[7])\n')
    f.write('                            dashx = int(splitArray[8])\n')
    f.write('                            dashy = int(splitArray[9])\n')
    f.write("                            imagefile = ''\n")
    f.write('                            newImage = None\n')
    f.write("                            newtext = ''\n")
    f.write('                            textFont = None\n')
    f.write("                            textColor = ''\n")
    f.write('                            shapeTag = splitArray[10]\n')
    f.write('                            G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[ShapeType,x1,y1,x2,y2,fill,outline,width,dashx,dashy]\n')
    f.write('                            G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]=[fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor]\n')
    f.write('                            DoCanvasRecord(drawCanvas,ShapeType,x1,y1,x2,y2,fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor,shapeTag)\n')
    f.write('                continue\n')
    f.write('        f.close()  \n') 
    f.write('        if uiName in G_CanvasEventDictionary:\n') 
    f.write('            for drawCanvasName in G_CanvasEventDictionary[uiName].keys():\n')
    f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('                for shapeTag in G_CanvasEventDictionary[uiName][drawCanvasName].keys():\n')
    f.write('                    for EventName in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                        if EventName == "MouseEnter":\n')
    f.write('                            drawCanvas.tag_bind(shapeTag, "<Any-Enter>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="MouseEnter"))\n')
    f.write("                            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName] and G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][0] == 'button':\n")
    f.write('                                TextTag = shapeTag+"_text"\n')
    f.write('                                drawCanvas.tag_bind(TextTag, "<Any-Enter>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="MouseEnter"))\n')
    f.write('                        elif EventName == "MouseLeave":\n')
    f.write('                            drawCanvas.tag_bind(shapeTag, "<Any-Leave>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="MouseLeave"))\n')
    f.write("                            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName] and G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][0] == 'button':\n")
    f.write('                                TextTag = shapeTag+"_text"\n')
    f.write('                                drawCanvas.tag_bind(TextTag, "<Any-Leave>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="MouseLeave"))\n')
    f.write('                        elif EventName == "ButtonDown":\n')
    f.write('                            drawCanvas.tag_bind(shapeTag, "<Button-1>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="ButtonDown"))\n')
    f.write("                            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName] and G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][0] == 'button':\n")
    f.write('                                TextTag = shapeTag+"_text"\n')
    f.write('                                drawCanvas.tag_bind(TextTag, "<Button-1>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="ButtonDown"))\n')
    f.write('                        elif EventName == "ButtonMotion":\n')
    f.write('                            drawCanvas.tag_bind(shapeTag, "<B1-Motion>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="ButtonMotion"))\n')
    f.write("                            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName] and G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][0] == 'button':\n")
    f.write('                                TextTag = shapeTag+"_text"\n')
    f.write('                                drawCanvas.tag_bind(TextTag, "<B1-Motion>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="ButtonMotion"))\n')
    f.write('                        elif EventName == "ButtonUp":\n')
    f.write('                            drawCanvas.tag_bind(shapeTag, "<ButtonRelease-1>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="ButtonUp"))\n')
    f.write("                            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName] and G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][0] == 'button':\n")
    f.write('                                TextTag = shapeTag+"_text"\n')
    f.write('                                drawCanvas.tag_bind(TextTag, "<ButtonRelease-1>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="ButtonUp"))\n')
    f.write('                        elif EventName == "DoubleClick":\n')
    f.write('                            drawCanvas.tag_bind(shapeTag, "<Double-1>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="DoubleClick"))\n')
    f.write("                            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName] and G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][0] == 'button':\n")
    f.write('                                TextTag = shapeTag+"_text"\n')
    f.write('                                drawCanvas.tag_bind(TextTag, "<Double-1>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="DoubleClick"))\n')

#写入设置图形矩形
def WriteReDrawCanvasRecordFunction(f):
    f.write('def ReDrawCanvasShape(uiName,canvasName):\n')
    f.write('    """'+Language.G_Language[1816]+'"""\n')
    f.write('    global G_ResourcesFileList\n')
    f.write('    global G_CanvasSizeDictionary\n')
    f.write('    global G_CanvasShapeDictionary\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    hasGIFAnimation = False\n')   
    f.write('    drawCanvas = GetElement(uiName,canvasName)\n')
    f.write('    if uiName in G_UIElementAliasDictionary.keys() and canvasName in G_UIElementAliasDictionary[uiName].keys():\n')
    f.write('        canvasName = G_UIElementAliasDictionary[uiName][canvasName]\n')
    f.write('    if drawCanvas:\n')
    f.write('        if uiName in G_CanvasSizeDictionary:\n')
    f.write('            if  canvasName in G_CanvasSizeDictionary[uiName]:\n')
    f.write('                for shapeTag in G_CanvasShapeDictionary[uiName][canvasName]:\n')
    f.write('                    ShapeType = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][0]\n')
    f.write("                    if ShapeType == 'image':\n")
    f.write('                        x1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][1]\n')
    f.write('                        y1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][2]\n')
    f.write('                        x2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][3]\n')
    f.write('                        y2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][4]\n')
    f.write('                        image_handle = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][5]\n')
    f.write('                        image_filename = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][6]\n')
    f.write('                        if type(x1) == type(1.0):\n')
    f.write('                            x1 = int(x1 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                        if type(y1) == type(1.0):\n')
    f.write('                            y1 = int(y1 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                        if type(x2) == type(1.0):\n')
    f.write('                            if x2 <= 1.0:\n')
    f.write('                                x2 = int(x2 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                            else:\n')
    f.write('                                x2 = x1 + int(x2)\n')
    f.write('                        if type(y2) == type(1.0):\n')
    f.write('                            if y2 <= 1.0:\n')
    f.write('                                y2 = int(y2 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                            else:\n')
    f.write('                                y2 = y1 + int(y2)\n')
    f.write('                        w = x2 - x1\n')
    f.write('                        if isinstance(w,float) == True:\n')
    f.write('                            w = w * G_CanvasSizeDictionary[uiName][canvasName][0]\n')
    f.write('                        h = y2 - y1\n')
    f.write('                        if isinstance(h,float) == True:\n')
    f.write('                            h = h * G_CanvasSizeDictionary[uiName][canvasName][1]\n')
    f.write('                        if w == 1 and h == 1:\n')
    f.write('                            continue\n')
    f.write('                        newImage = None\n')
    f.write('                        if newImage == None:\n')
    f.write('                            image_filename_Lower = image_filename.lower()\n')
    f.write('                            if image_filename_Lower in G_ResourcesFileList:\n')
    f.write('                                resourPath = G_ResourcesFileList[image_filename_Lower]\n')
    f.write('                                if os.path.exists(resourPath) == True:\n')
    f.write('                                    try:\n')
    f.write("                                        if image_filename.find('.gif') >= 0:\n")
    f.write("                                            GifData = Image.open(resourPath)\n")
    f.write("                                            seq = []\n")
    f.write("                                            try:\n")
    f.write("                                                while 1:\n")
    f.write("                                                    imageRGBA = GifData.copy().convert('RGBA')\n")
    f.write("                                                    resizeImage = imageRGBA.resize((w, h),Image.LANCZOS)\n")
    f.write("                                                    newImage = ImageTk.PhotoImage(resizeImage)\n")
    f.write("                                                    seq.append(newImage)\n")
    f.write("                                                    GifData.seek(len(seq))\n")
    f.write("                                            except EOFError:\n")
    f.write("                                                pass\n")
    f.write("                                            delay = 100\n")
    f.write("                                            try:\n")
    f.write("                                                delay = GifData.info['duration']\n")
    f.write("                                            except KeyError:\n")
    f.write("                                                delay = 100\n")
    f.write("                                            if delay == 0:\n")
    f.write("                                                delay = 100\n")
    f.write("                                            newImage = [seq,delay,0]\n")
    f.write("                                            hasGIFAnimation = True\n")
    f.write("                                        else:\n")
    f.write("                                            imageRGBA = Image.open(resourPath).convert('RGBA')\n")
    f.write('                                            resizeImage = imageRGBA.resize((w, h),Image.LANCZOS)\n')
    f.write('                                            newImage = ImageTk.PhotoImage(resizeImage)\n')
    f.write('                                    except Exception as Ex:\n')
    f.write('                                        OutputText = resourPath + ":"+str(Ex)\n')
    f.write('                                        print(OutputText)\n')
    f.write('                                        return \n')
    f.write('                                else:\n')
    f.write('                                    print("找不到"+resourPath)\n')
    f.write('                            else:\n')
    f.write('                                print("Resources目录找不到"+image_filename)\n')
    f.write('                            #G_CanvasImageDictionary[uiName][canvasName].append([imagefile,newImage,w,h])\n')
    f.write('                            #G_CanvasShapeDictionary[uiName][canvasName][shapeTag]=[ShapeType,x1,y1,x2,y2,newImage,image_filename]\n')
    f.write('                            G_CanvasShapeDictionary[uiName][canvasName][shapeTag][5] = newImage\n')
    f.write('                            G_CanvasParamDictionary[uiName][canvasName][shapeTag][5] = newImage\n')
    #f.write('                            print("Delete:"+shapeTag +" and Build:"+str("%d,%d,%d,%d"%(x1,y1,x2,y2)))\n')
    f.write('                            drawCanvas.delete(shapeTag)\n')
    # f.write("                            drawCanvas.create_image(x1, y1,image=newImage,anchor='nw',tag=shapeTag)\n")
    f.write('                            Params = G_CanvasParamDictionary[uiName][canvasName][shapeTag]\n')
    #        [fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor]
    f.write('                            DoCanvasRecord(drawCanvas,ShapeType,x1,y1,x2,y2,Params[0],Params[1],Params[2],Params[3],Params[4],Params[5],Params[6],Params[7],Params[8],shapeTag)\n')
    f.write("                    elif ShapeType == 'text':\n")
    f.write('                        x1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][1]\n')
    f.write('                        y1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][2]\n')
    f.write('                        x2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][3]\n')
    f.write('                        y2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][4]\n')
    f.write('                        if type(x1) == type(1.0):\n')
    f.write('                            x1 = int(x1 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                        if type(y1) == type(1.0):\n')
    f.write('                            y1 = int(y1 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                        if type(x2) == type(1.0):\n')
    f.write('                            if x2 <= 1.0:\n')
    f.write('                                x2 = int(x2 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                            else:\n')
    f.write('                                x2 = x1 + int(x2)\n')
    f.write('                        if type(y2) == type(1.0):\n')
    f.write('                            if y2 <= 1.0:\n')
    f.write('                                y2 = int(y2 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                            else:\n')
    f.write('                                y2 = y1 + int(y2)\n')
    f.write('                        w = x2 - x1\n')
    f.write('                        if isinstance(w,float) == True:\n')
    f.write('                            w = w * G_CanvasSizeDictionary[uiName][canvasName][0]\n')
    f.write('                        h = y2 - y1\n')
    f.write('                        if isinstance(h,float) == True:\n')
    f.write('                            h = h * G_CanvasSizeDictionary[uiName][canvasName][1]\n')
    f.write('                        drawCanvas.delete(shapeTag)\n')
    f.write('                        Params = G_CanvasParamDictionary[uiName][canvasName][shapeTag]\n')
    f.write('                        DoCanvasRecord(drawCanvas,ShapeType,x1,y1,x2,y2,Params[0],Params[1],Params[2],Params[3],Params[4],Params[5],Params[6],Params[7],Params[8],shapeTag)\n')
    f.write("                    elif ShapeType == 'button':\n")
    f.write('                        x1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][1]\n')
    f.write('                        y1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][2]\n')
    f.write('                        x2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][3]\n')
    f.write('                        y2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][4]\n')
    f.write('                        if type(x1) == type(1.0):\n')
    f.write('                            x1 = int(x1 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                        if type(y1) == type(1.0):\n')
    f.write('                            y1 = int(y1 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                        if type(x2) == type(1.0):\n')
    f.write('                            if x2 <= 1.0:\n')
    f.write('                                x2 = int(x2 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                            else:\n')
    f.write('                                x2 = x1 + int(x2)\n')
    f.write('                        if type(y2) == type(1.0):\n')
    f.write('                            if y2 <= 1.0:\n')
    f.write('                                y2 = int(y2 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                            else:\n')
    f.write('                                y2 = y1 + int(y2)\n')
    f.write('                        w = x2 - x1\n')
    f.write('                        if isinstance(w,float) == True:\n')
    f.write('                            w = w * G_CanvasSizeDictionary[uiName][canvasName][0]\n')
    f.write('                        h = y2 - y1\n')
    f.write('                        if isinstance(h,float) == True:\n')
    f.write('                            h = h * G_CanvasSizeDictionary[uiName][canvasName][1]\n')
    f.write('                        drawCanvas.delete(shapeTag)\n')
    f.write('                        Params = G_CanvasParamDictionary[uiName][canvasName][shapeTag]\n')
    f.write('                        DoCanvasRecord(drawCanvas,ShapeType,x1,y1,x2,y2,Params[0],Params[1],Params[2],Params[3],Params[4],Params[5],Params[6],Params[7],Params[8],shapeTag)\n')
    f.write("                    elif ShapeType == 'point':\n")
    f.write('                        x1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][1]\n')
    f.write('                        y1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][2]\n')
    f.write('                        x2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][3]\n')
    f.write('                        y2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][4]\n')
    f.write('                        if type(x1) == type(1.0):\n')
    f.write('                            x1 = int(x1 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                        if type(y1) == type(1.0):\n')
    f.write('                            y1 = int(y1 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                        if type(x2) == type(1.0):\n')
    f.write('                            if x2 <= 1.0:\n')
    f.write('                                x2 = int(x2 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                            else:\n')
    f.write('                                x2 = x1 + int(x2)\n')
    f.write('                        if type(y2) == type(1.0):\n')
    f.write('                            if y2 <= 1.0:\n')
    f.write('                                y2 = int(y2 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                            else:\n')
    f.write('                                y2 = y1 + int(y2)\n')
    f.write('                        w = x2 - x1\n')
    f.write('                        if isinstance(w,float) == True:\n')
    f.write('                            w = w * G_CanvasSizeDictionary[uiName][canvasName][0]\n')
    f.write('                        h = y2 - y1\n')
    f.write('                        if isinstance(h,float) == True:\n')
    f.write('                            h = h * G_CanvasSizeDictionary[uiName][canvasName][1]\n')
    f.write('                        drawCanvas.delete(shapeTag)\n')
    f.write('                        Params = G_CanvasParamDictionary[uiName][canvasName][shapeTag]\n')
    f.write('                        DoCanvasRecord(drawCanvas,ShapeType,x1,y1,x2,y2,Params[0],Params[1],Params[2],Params[3],Params[4],Params[5],Params[6],Params[7],Params[8],shapeTag)\n')
    f.write("                    elif ShapeType == 'table':\n")
    f.write('                        x1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][1]\n')
    f.write('                        y1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][2]\n')
    f.write('                        x2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][3]\n')
    f.write('                        y2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][4]\n')
    f.write('                        if type(x1) == type(1.0):\n')
    f.write('                            x1 = int(x1 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                        if type(y1) == type(1.0):\n')
    f.write('                            y1 = int(y1 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                        if type(x2) == type(1.0):\n')
    f.write('                            if x2 <= 1.0:\n')
    f.write('                                x2 = int(x2 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                            else:\n')
    f.write('                                x2 = x1 + int(x2)\n')
    f.write('                        if type(y2) == type(1.0):\n')
    f.write('                            if y2 <= 1.0:\n')
    f.write('                                y2 = int(y2 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                            else:\n')
    f.write('                                y2 = y1 + int(y2)\n')
    f.write('                        w = x2 - x1\n')
    f.write('                        if isinstance(w,float) == True:\n')
    f.write('                            w = w * G_CanvasSizeDictionary[uiName][canvasName][0]\n')
    f.write('                        h = y2 - y1\n')
    f.write('                        if isinstance(h,float) == True:\n')
    f.write('                            h = h * G_CanvasSizeDictionary[uiName][canvasName][1]\n')
    f.write('                        drawCanvas.delete(shapeTag)\n')
    f.write('                        Params = G_CanvasParamDictionary[uiName][canvasName][shapeTag]\n')
    f.write('                        DoCanvasRecord(drawCanvas,ShapeType,x1,y1,x2,y2,Params[0],Params[1],Params[2],Params[3],Params[4],Params[5],Params[6],Params[7],Params[8],shapeTag)\n')
    # f.write("                    elif ShapeType == 'listmenu':\n")
    # f.write('                        shapeTag = splitArray[-2]\n')
    # f.write('                        LockFlag = splitArray[-1]\n')
    # f.write("                        if splitArray[1].find('.') > 0:\n")
    # f.write('                            x1 = float(splitArray[1])\n')
    # f.write('                        else:\n')
    # f.write('                            x1 = int(splitArray[1])\n')
    # f.write("                        if splitArray[2].find('.') > 0:\n")
    # f.write('                            y1 = float(splitArray[2])\n')
    # f.write('                        else:\n')
    # f.write('                            y1 = int(splitArray[2])\n')
    # f.write("                        if splitArray[3].find('.') > 0:\n")
    # f.write('                            x2 = float(splitArray[3])\n')
    # f.write('                        else:\n')
    # f.write('                            x2 = int(splitArray[3])\n')
    # f.write("                        if splitArray[4].find('.') > 0:\n")
    # f.write('                            y2 = float(splitArray[4])\n')
    # f.write('                        else:\n')
    # f.write('                            y2 = int(splitArray[4])\n')
    # f.write('                        w  = x2 - x1\n')
    # f.write('                        h  = y2 - y1\n')
    # f.write('                        fill = splitArray[5]\n')
    # f.write('                        outline = splitArray[6]\n')
    # f.write('                        width = int(splitArray[7])\n')
    # f.write('                        dashx = int(splitArray[8])\n')
    # f.write('                        dashy = int(splitArray[9])\n')
    # f.write("                        menuInfo_Begin = text.find('{')\n")
    # f.write("                        menuInfo_End = text.rfind('}')\n")
    # f.write('                        menuInfo = text[menuInfo_Begin :menuInfo_End+1]\n')
    # f.write("                        menuInfo = menuInfo.replace(\"'\",'\"')\n")
    # f.write('                        menu_dict = json.loads(menuInfo)\n')
    # f.write("                        imagefile = ''\n")
    # f.write('                        newImage = menu_dict\n')
    # f.write("                        newtext = ''\n")
    # f.write('                        textFont = None\n')
    # f.write("                        textColor = ''\n")
    # f.write('                        G_CanvasShapeDictionary[uiName][canvasName][shapeTag]=[ShapeType,x1,y1,x2,y2,fill,outline,width,dashx,dashy,menu_dict]\n')
    # f.write("                        for subMesh in menu_dict['SubMenus']:\n")
    # f.write('                            subMeshTag = shapeTag + "_" + subMesh[0]\n')
    # f.write('                            if subMeshTag not in G_CanvasEventDictionary[uiName][canvasName]:\n')
    # f.write('                                G_CanvasEventDictionary[uiName][canvasName][subMeshTag] = {}\n')
    # f.write('                            EventName = "ButtonDown"\n')
    # f.write('                            if EventName not in G_CanvasEventDictionary[uiName][canvasName][subMeshTag]:\n')
    # f.write('                                G_CanvasEventDictionary[uiName][canvasName][subMeshTag][EventName] = []\n')
    # f.write('                            actionInfo = ["OnExpandOrShrink",subMeshTag,True]\n')
    # f.write('                            G_CanvasEventDictionary[uiName][canvasName][subMeshTag][EventName].append(actionInfo)\n')
    # f.write('                        G_CanvasParamDictionary[uiName][canvasName][shapeTag]=[fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor]\n')
    # f.write('                        DoCanvasRecord(drawCanvas,ShapeType,x1,y1,x2,y2,fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor,shapeTag)\n')
    # f.write("                    elif ShapeType == 'table':\n")
    # f.write('                        shapeTag = splitArray[-2]\n')
    # f.write('                        LockFlag = splitArray[-1]\n')
    # f.write("                        if splitArray[1].find('.') > 0:\n")
    # f.write('                            x1 = float(splitArray[1])\n')
    # f.write('                        else:\n')
    # f.write('                            x1 = int(splitArray[1])\n')
    # f.write("                        if splitArray[2].find('.') > 0:\n")
    # f.write('                            y1 = float(splitArray[2])\n')
    # f.write('                        else:\n')
    # f.write('                            y1 = int(splitArray[2])\n')
    # f.write("                        if splitArray[3].find('.') > 0:\n")
    # f.write('                            x2 = float(splitArray[3])\n')
    # f.write('                        else:\n')
    # f.write('                            x2 = int(splitArray[3])\n')
    # f.write("                        if splitArray[4].find('.') > 0:\n")
    # f.write('                            y2 = float(splitArray[4])\n')
    # f.write('                        else:\n')
    # f.write('                            y2 = int(splitArray[4])\n')
    # f.write('                        w  = x2 - x1\n')
    # f.write('                        h  = y2 - y1\n')
    # f.write('                        fill = splitArray[5]\n')
    # f.write('                        outline = splitArray[6]\n')
    # f.write('                        width = int(splitArray[7])\n')
    # f.write('                        dashx = int(splitArray[8])\n')
    # f.write('                        dashy = int(splitArray[9])\n')
    # f.write("                        tableInfo_Begin = text.find('{')\n")
    # f.write("                        tableInfo_End = text.rfind('}')\n")
    # f.write('                        tableInfo = text[tableInfo_Begin :tableInfo_End+1]\n')
    # f.write("                        tableInfo = tableInfo.replace(\"'\",'\"')\n")
    # f.write('                        table_dict = json.loads(tableInfo)\n')
    # f.write("                        imagefile = ''\n")
    # f.write('                        newImage = table_dict\n')
    # f.write("                        newtext = ''\n")
    # f.write('                        textFont = None\n')
    # f.write("                        textColor = ''\n")
    # f.write('                        G_CanvasShapeDictionary[uiName][canvasName][shapeTag]=[ShapeType,x1,y1,x2,y2,fill,outline,width,dashx,dashy,table_dict]\n')
    # f.write('                        G_CanvasParamDictionary[uiName][canvasName][shapeTag]=[fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor]\n')
    # f.write('                        DoCanvasRecord(drawCanvas,ShapeType,x1,y1,x2,y2,fill,outline,width,dashx,dashy,newImage,newtext,textFont,textColor,shapeTag)\n')
    f.write("                    elif ShapeType == 'SetShapeRect':\n")
    f.write('                        pass\n')
    f.write("                    elif ShapeType == 'SetFillColor':\n")
    f.write('                        pass\n')
    f.write("                    elif ShapeType == 'SetOutlineColor':\n")
    f.write('                        pass\n')
    f.write("                    elif ShapeType == 'ChangeImage':\n")
    f.write('                        pass\n')
    f.write("                    elif ShapeType == 'ChangeText':\n")
    f.write('                        pass\n')
    f.write("                    elif ShapeType == 'JumpToUI':\n")
    f.write('                        pass\n')
    f.write("                    elif ShapeType == 'LoadUI':\n")
    f.write('                        pass\n')
    f.write("                    elif ShapeType == 'DeleteShape':\n")
    f.write('                        pass\n')
    f.write("                    elif ShapeType == 'OnSwitch':\n")
    f.write('                        pass\n')
    f.write("                    elif ShapeType == 'CallFunction':\n")
    f.write('                        pass\n')
    f.write('                    else:\n')
    f.write('                        x1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][1]\n')
    f.write('                        y1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][2]\n')
    f.write('                        x2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][3]\n')
    f.write('                        y2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][4]\n')
    f.write('                        if type(x1) == type(1.0):\n')
    f.write('                            x1 = int(x1 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                        if type(y1) == type(1.0):\n')
    f.write('                            y1 = int(y1 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                        if type(x2) == type(1.0):\n')
    f.write('                            if x2 <= 1.0:\n')
    f.write('                                x2 = int(x2 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                            else:\n')
    f.write('                                x2 = x1 + int(x2)\n')
    f.write('                        if type(y2) == type(1.0):\n')
    f.write('                            if y2 <= 1.0:\n')
    f.write('                                y2 = int(y2 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                            else:\n')
    f.write('                                y2 = y1 + int(y2)\n')
    f.write('                        w = x2 - x1\n')
    f.write('                        if isinstance(w,float) == True:\n')
    f.write('                            w = w * G_CanvasSizeDictionary[uiName][canvasName][0]\n')
    f.write('                        h = y2 - y1\n')
    f.write('                        if isinstance(h,float) == True:\n')
    f.write('                            h = h * G_CanvasSizeDictionary[uiName][canvasName][1]\n')
    f.write('                        drawCanvas.delete(shapeTag)\n')
    f.write('                        Params = G_CanvasParamDictionary[uiName][canvasName][shapeTag]\n')
    f.write('                        DoCanvasRecord(drawCanvas,ShapeType,x1,y1,x2,y2,Params[0],Params[1],Params[2],Params[3],Params[4],Params[5],Params[6],Params[7],Params[8],shapeTag)\n')
    f.write('        drawCanvas.update()\n')
    f.write('        if hasGIFAnimation == True:\n')
    f.write('            drawCanvas.after(100,updateGIFFrame(uiName,canvasName))\n')
    f.write('def ReDrawCanvasRecord(uiName,ForceReDraw=False):\n')
    f.write('    """'+Language.G_Language[1817]+'"""\n')
    f.write('    global G_ResourcesFileList\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global G_CanvasSizeDictionary\n')
    f.write('    global G_UIElementRoundRectangleDictionary\n')
    f.write('    global G_UIElementUserDataArray\n')
    f.write('    ReDraw = False\n')
    f.write('    if uiName in G_CanvasSizeDictionary:\n')
    f.write('        for canvasName in G_CanvasSizeDictionary[uiName]:\n')
    f.write('            drawCanvas =  G_UIElementDictionary[uiName][canvasName]\n')
    f.write('            drawCanvas_width = drawCanvas.winfo_width()\n')
    f.write('            drawCanvas_height = drawCanvas.winfo_height()\n')
    f.write('            if canvasName == "Form_1":\n')
    f.write('                root = GetElement(uiName,"root")\n')
    f.write('                drawCanvas_width = root.winfo_width()\n')
    f.write('                drawCanvas_height = root.winfo_height()\n')
    f.write('            if ForceReDraw == True or G_CanvasSizeDictionary[uiName][canvasName][0] != drawCanvas_width or G_CanvasSizeDictionary[uiName][canvasName][1] != drawCanvas_height:\n')
    f.write('                ReDraw = True\n')
    f.write('            G_CanvasSizeDictionary[uiName][canvasName] = [drawCanvas_width,drawCanvas_height]\n')
    f.write('    if ReDraw == True:\n')
    f.write('        if G_CanvasSizeDictionary[uiName][canvasName][0] == 1 and G_CanvasSizeDictionary[uiName][canvasName][1] == 1:\n')
    f.write('            return \n')
    f.write('        print("ReDrawCanvasRecord")\n')
    f.write('        if uiName in G_CanvasShapeDictionary:\n')
    f.write('            for canvasName in G_CanvasSizeDictionary[uiName]:\n')
    f.write('                ReDrawCanvasShape(uiName,canvasName)\n')
    f.write('    if uiName in G_UIElementRoundRectangleDictionary:\n')
    f.write('        for elementName in G_UIElementRoundRectangleDictionary[uiName]:\n')
    f.write('            Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('            if Control:\n')
    f.write('                RRInfo = G_UIElementRoundRectangleDictionary[uiName][elementName]\n')
    f.write('                ShowRoundedRectangle(Control,RRInfo[0],RRInfo[1])\n')
    f.write('def ResizeAllChart(uiName,forceRedraw=False):\n')
    f.write('    """'+Language.G_Language[759]+'"""\n')
    f.write('    global G_UIElementUserDataArray\n')
    f.write('    if uiName in G_UIElementUserDataArray.keys():\n')
    f.write('        for elementName in G_UIElementUserDataArray[uiName]:\n')
    f.write('            ChartReady = 0\n')
    f.write('            for EBData in G_UIElementUserDataArray[uiName][elementName]:\n')
    f.write("                if EBData[0] == 'ChartReady':\n")
    f.write("                    ChartReady = EBData[2]\n")
    f.write("                if EBData[0] == 'ChartCanvas' and (ChartReady == 1 or forceRedraw == True):\n")
    f.write("                    theChart = EBData[2]\n")
    f.write("                    theChartCanvas = theChart.get_tk_widget()\n")
    f.write("                    w = theChartCanvas.winfo_width()\n")
    f.write("                    h = theChartCanvas.winfo_height()\n")
    f.write("                    if w == 1 and h == 1:\n")
    f.write("                        parentWidget = theChartCanvas._nametowidget(theChartCanvas.winfo_parent())\n")
    f.write('                        if "relwidth" in G_UIElementPlaceDictionary[uiName][elementName]:\n')
    f.write('                            w = G_UIElementPlaceDictionary[uiName][elementName]["relwidth"]\n')
    f.write('                            w = int(w * parentWidget.winfo_width())\n')
    f.write('                        else:\n')
    f.write('                            w = G_UIElementPlaceDictionary[uiName][elementName]["width"]\n')
    f.write('                        if "relheight" in G_UIElementPlaceDictionary[uiName][elementName]:\n')
    f.write('                            h = G_UIElementPlaceDictionary[uiName][elementName]["relheight"]\n')
    f.write('                            h = int(h * parentWidget.winfo_width())\n')
    f.write('                        else:\n')
    f.write('                            h = G_UIElementPlaceDictionary[uiName][elementName]["height"]\n')
    f.write("                    else:\n")
    f.write("                        oldw = W\n")
    f.write("                        oldh = h\n")
    f.write("                        parentWidget = theChartCanvas._nametowidget(theChartCanvas.winfo_parent())\n")
    f.write('                        if "relwidth" in G_UIElementPlaceDictionary[uiName][elementName]:\n')
    f.write('                            oldw = G_UIElementPlaceDictionary[uiName][elementName]["relwidth"]\n')
    f.write('                            oldw = int(oldw * parentWidget.winfo_width())\n')
    f.write('                        else:\n')
    f.write('                            oldw = G_UIElementPlaceDictionary[uiName][elementName]["width"]\n')
    f.write('                        if "relheight" in G_UIElementPlaceDictionary[uiName][elementName]:\n')
    f.write('                            oldh = G_UIElementPlaceDictionary[uiName][elementName]["relheight"]\n')
    f.write('                            oldh = int(oldh * parentWidget.winfo_height())\n')
    f.write('                        else:\n')
    f.write('                            oldh = G_UIElementPlaceDictionary[uiName][elementName]["height"]\n')
    f.write("                        if forceRedraw == False and w == oldw and h == oldh:\n")
    f.write("                            continue\n")
    f.write("                    event = ChartEvent(w,h,theChartCanvas)\n")
    f.write("                    theChart.resize(event)\n")
    f.write("                    theChartCanvas.update()\n")
#写入设置图形矩形
def WriteSetShapeRectFunction(f):
    f.write('def SetShapeRect(uiName,canvasName,shapeTag,x1,y1,x2,y2):\n')
    f.write('    """'+Language.G_Language[856]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        drawCanvas = GetElement(uiName,canvasName)\n')
    f.write("        if canvasName in G_CanvasShapeDictionary[uiName]:\n")
    f.write("            if shapeTag in G_CanvasShapeDictionary[uiName][canvasName]:\n")
    f.write("                if shapeTag.find('text_') >= 0:\n")
    f.write('                    drawCanvas.coords(shapeTag, x1,y1) \n')
    f.write("                else:\n")
    f.write('                    try:\n')
    f.write('                        drawCanvas.coords(shapeTag, x1,y1,x2,y2) \n')
    f.write('                    except:\n')
    f.write('                        drawCanvas.coords(shapeTag, x1,y1) \n')
    #f.write('            drawCanvas.itemconfig(shapeTag,width=x2-x1,height=y2-y1) \n')
    f.write("                G_CanvasShapeDictionary[uiName][canvasName][shapeTag][1] = x1\n")
    f.write("                G_CanvasShapeDictionary[uiName][canvasName][shapeTag][2] = y1\n")
    f.write("                G_CanvasShapeDictionary[uiName][canvasName][shapeTag][3] = x2\n")
    f.write("                G_CanvasShapeDictionary[uiName][canvasName][shapeTag][4] = y2\n")
    f.write('def GetShapeRect(uiName,canvasName,shapeTag):\n')
    f.write('    """'+Language.G_Language[866]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        drawCanvas = GetElement(uiName,canvasName)\n')
    f.write("        if canvasName in G_CanvasShapeDictionary[uiName]:\n")
    f.write("            if shapeTag in G_CanvasShapeDictionary[uiName][canvasName]:\n")
    f.write("                x1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][1]\n")
    f.write("                if type(x1) == type(1.0):\n")
    f.write("                    x1 = round(x1 * G_CanvasSizeDictionary[uiName][canvasName][0])\n")
    f.write("                y1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][2]\n")
    f.write("                if type(y1) == type(1.0):\n")
    f.write("                    y1 = round(y1 * G_CanvasSizeDictionary[uiName][canvasName][1])\n")
    f.write("                x2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][3]\n")
    f.write("                if type(x2) == type(1.0):\n")
    f.write("                    x2 = round(x2 * G_CanvasSizeDictionary[uiName][canvasName][0])\n")
    f.write("                y2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][4]\n")
    f.write("                if type(y2) == type(1.0):\n")
    f.write("                    y2 = round(y2 * G_CanvasSizeDictionary[uiName][canvasName][1])\n")
    f.write("                return (x1,y1,x2,y2)\n")
    f.write("    return None\n")
#写入设置线条宽度
def WriteSetShapeWidthFunction(f):
    f.write('def SetShapeLineWidth(uiName,canvasName,shapeTag,width):\n')
    f.write('    """'+Language.G_Language[1464]+'"""\n')
    
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write("        if canvasName in G_CanvasShapeDictionary[uiName]:\n")
    f.write("            if shapeTag in G_CanvasShapeDictionary[uiName][canvasName]:\n")
    f.write("                if G_CanvasShapeDictionary[uiName][canvasName][shapeTag][0] == 'button':\n")
    f.write("                    if G_CanvasShapeDictionary[uiName][canvasName][shapeTag][-1] == None:\n")
    f.write('                        drawCanvas = GetElement(uiName,canvasName)\n')
    f.write('                        drawCanvas.itemconfig(shapeTag, width=width)\n')
    f.write('                        G_CanvasParamDictionary[uiName][canvasName][shapeTag][2]=width\n')
    f.write("                elif G_CanvasShapeDictionary[uiName][canvasName][shapeTag][0] == 'roundrect':\n")
    f.write("                    OutlineTag = shapeTag+\"_outline\"\n")
    f.write("                    ArcTag = shapeTag+\"_arc\"\n")
    f.write('                    drawCanvas = GetElement(uiName,canvasName)\n')
    f.write('                    drawCanvas.itemconfig(OutlineTag, width=width)\n')
    f.write('                    G_CanvasParamDictionary[uiName][canvasName][shapeTag][2]=width\n')
    f.write("                else:\n")
    f.write('                    drawCanvas = GetElement(uiName,canvasName)\n')
    f.write('                    drawCanvas.itemconfig(shapeTag, width=width)\n')
    f.write('                    G_CanvasParamDictionary[uiName][canvasName][shapeTag][2]=width\n')
#写入设置填充颜色
def WriteSetShapeFillColorFunction(f):
    f.write('def SetShapeFillColor(uiName,canvasName,shapeTag,color):\n')
    f.write('    """'+Language.G_Language[844]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write("        if canvasName in G_CanvasShapeDictionary[uiName]:\n")
    f.write("            if shapeTag in G_CanvasShapeDictionary[uiName][canvasName]:\n")
    f.write("                if G_CanvasShapeDictionary[uiName][canvasName][shapeTag][0] == 'button':\n")
    f.write("                    if G_CanvasShapeDictionary[uiName][canvasName][shapeTag][-1] == None:\n")
    f.write('                        drawCanvas = GetElement(uiName,canvasName)\n')
    f.write('                        drawCanvas.itemconfig(shapeTag, fill=color)\n')
    # f.write("                        OutlineTag = shapeTag+\"_outline\"\n")
    # f.write('                        drawCanvas.itemconfig(OutlineTag, fill=color)\n')
    f.write('                        G_CanvasParamDictionary[uiName][canvasName][shapeTag][0]=color\n')
    f.write("                elif G_CanvasShapeDictionary[uiName][canvasName][shapeTag][0] == 'text':\n")
    f.write('                    drawCanvas = GetElement(uiName,canvasName)\n')
    f.write('                    drawCanvas.itemconfig(shapeTag, fill=color)\n')
    f.write('                    G_CanvasParamDictionary[uiName][canvasName][shapeTag][0]=color\n')
    f.write('                    G_CanvasParamDictionary[uiName][canvasName][shapeTag][8]=color\n')
    f.write("                else:\n")
    f.write('                    drawCanvas = GetElement(uiName,canvasName)\n')
    f.write('                    drawCanvas.itemconfig(shapeTag, fill=color)\n')
    f.write('                    G_CanvasParamDictionary[uiName][canvasName][shapeTag][0]=color\n')
    f.write('def GetShapeFillColor(uiName,canvasName,shapeTag):\n')
    f.write('    """'+Language.G_Language[867]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write("        if canvasName in G_CanvasShapeDictionary[uiName]:\n")
    f.write("            if shapeTag in G_CanvasShapeDictionary[uiName][canvasName]:\n")
    f.write("                return G_CanvasShapeDictionary[uiName][canvasName][shapeTag][5]\n")
    f.write("    return None\n")
#写入设置边框颜色
def WriteSetShapeOutlineColorFunction(f):
    f.write('def SetShapeOutlineColor(uiName,canvasName,shapeTag,color):\n')
    f.write('    """'+Language.G_Language[845]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write("        if canvasName in G_CanvasShapeDictionary[uiName]:\n")
    f.write("            if shapeTag in G_CanvasShapeDictionary[uiName][canvasName]:\n")
    f.write("                if G_CanvasShapeDictionary[uiName][canvasName][shapeTag][0] == 'cylinder':\n")
    f.write('                    drawCanvas = GetElement(uiName,canvasName)\n')
    f.write('                    drawCanvas.itemconfig(shapeTag, outline=color)\n')
    f.write("                    OutlineTag = shapeTag+\"_outline\"\n")
    f.write('                    drawCanvas.itemconfig(OutlineTag, fill=color)\n')
    f.write('                    G_CanvasParamDictionary[uiName][canvasName][shapeTag][1]=color\n')
    f.write("                elif G_CanvasShapeDictionary[uiName][canvasName][shapeTag][0] == 'roundrect':\n")
    f.write("                    OutlineTag = shapeTag+\"_outline\"\n")
    f.write("                    ArcTag = shapeTag+\"_arc\"\n")
    f.write('                    drawCanvas = GetElement(uiName,canvasName)\n')
    f.write('                    drawCanvas.itemconfig(OutlineTag, fill=color)\n')
    f.write('                    drawCanvas.itemconfig(ArcTag, outline=color)\n')
    f.write('                    G_CanvasParamDictionary[uiName][canvasName][shapeTag][1]=color\n')
    f.write("                else:\n")
    f.write('                    drawCanvas = GetElement(uiName,canvasName)\n')
    f.write('                    drawCanvas.itemconfig(shapeTag, outline=color)\n')
    f.write('                    G_CanvasParamDictionary[uiName][canvasName][shapeTag][1]=color\n')

    f.write('def GetShapeOutlineColor(uiName,canvasName,shapeTag):\n')
    f.write('    """'+Language.G_Language[868]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write("        if canvasName in G_CanvasShapeDictionary[uiName]:\n")
    f.write("            if shapeTag in G_CanvasShapeDictionary[uiName][canvasName]:\n")
    f.write("                return G_CanvasShapeDictionary[uiName][canvasName][shapeTag][6]\n")
    f.write("        return None\n")
#写入设置图形图片
def WriteSetShapeImageFunction(f):
    f.write('def SetShapeImage(uiName,canvasName,shapeTag,imageFile,angle=0):\n')
    f.write('    """'+Language.G_Language[846]+'"""\n')
    f.write('    global G_ResourcesFileList\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        drawCanvas = GetElement(uiName,canvasName)\n')
    f.write("        if canvasName in G_CanvasShapeDictionary[uiName]:\n")
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][canvasName]:\n') 
    f.write("                x1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][1]\n")
    f.write("                y1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][2]\n")
    f.write("                x2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][3]\n")
    f.write("                y2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][4]\n")
    f.write('                if type(x1) == type(1.0):\n')
    f.write('                    x1 = int(x1 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                if type(y1) == type(1.0):\n')
    f.write('                    y1 = int(y1 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                if type(x2) == type(1.0):\n')
    f.write('                    if x2 <= 1.0:\n')
    f.write('                        x2 = int(x2 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                    else:\n')
    f.write('                        x2 = x1 + int(x2)\n')
    f.write('                if type(y2) == type(1.0):\n')
    f.write('                    if y2 <= 1.0:\n')
    f.write('                        y2 = int(y2 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                    else:\n')
    f.write('                        y2 = y1 + int(y2)\n')
    f.write("                w = x2 - x1\n")
    f.write("                h = y2 - y1\n")
    f.write('                newImage = None\n')
    f.write('                if isinstance(imageFile,str) == True:\n')
    f.write('                    for ImageInfo in G_CanvasImageDictionary[uiName][canvasName]:\n')
    f.write('                        if ImageInfo[0] == imageFile and ImageInfo[2] == w and ImageInfo[3] == h :\n')
    f.write('                            newImage = ImageInfo[1]\n')
    f.write('                            continue\n')
    f.write('                    if newImage == None:\n')
    f.write('                        imageFile_Lower = imageFile.lower()\n')
    f.write('                        if imageFile_Lower in G_ResourcesFileList:\n')
    f.write('                            resourPath = G_ResourcesFileList[imageFile_Lower]\n')
    f.write('                            if os.path.exists(resourPath) == True:\n')
    f.write('                                try:\n')
    f.write("                                    imageRGBA = Image.open(resourPath).convert('RGBA')\n")
    f.write('                                    resizeImage = imageRGBA.resize((w, h),Image.LANCZOS)\n')
    f.write('                                    newImage = ImageTk.PhotoImage(resizeImage.rotate(angle))\n')
    f.write('                                except:\n')
    f.write('                                    return \n')
    f.write('                        G_CanvasImageDictionary[uiName][canvasName].append([imageFile,newImage,w,h])\n')
    f.write('                elif imageFile:\n')
    f.write('                    resizeImage = imageFile.resize((w, h),Image.LANCZOS)\n')
    f.write('                    newImage = ImageTk.PhotoImage(resizeImage.rotate(angle))\n')
    f.write("                    imageFile = ''\n")
    f.write('                G_CanvasShapeDictionary[uiName][canvasName][shapeTag][5] = newImage\n')
    f.write('                G_CanvasShapeDictionary[uiName][canvasName][shapeTag][6] = imageFile\n')
    f.write('                drawCanvas.itemconfig(shapeTag, image=newImage)\n')
    f.write('def GetShapeImage(uiName,canvasName,shapeTag):\n')
    f.write('    """'+Language.G_Language[869]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write("        if canvasName in G_CanvasShapeDictionary[uiName]:\n")
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][canvasName]:\n') 
    f.write('                return G_CanvasShapeDictionary[uiName][canvasName][shapeTag][5]\n')
    f.write("    return None\n")
    f.write('def PasteImageToShapeImage(uiName,canvasName,shapeTag,imageFileName,x1,x2,y1,y2,angle):\n')
    f.write('    """'+Language.G_Language[9334]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write("        if canvasName in G_CanvasShapeDictionary[uiName]:\n")
    f.write('            drawCanvas = GetElement(uiName,canvasName)\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][canvasName]:\n') 
    f.write("                if G_CanvasShapeDictionary[uiName][canvasName][shapeTag][0] == 'image':\n")
    f.write("                    image_x1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][1]\n")
    f.write("                    image_y1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][2]\n")
    f.write("                    image_x2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][3]\n")
    f.write("                    image_y2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][4]\n")
    f.write('                    if type(image_x1) == type(1.0):\n')
    f.write('                        image_x1 = int(image_x1 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                    if type(image_y1) == type(1.0):\n')
    f.write('                        image_y1 = int(image_y1 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                    if type(image_x2) == type(1.0):\n')
    f.write('                        if image_x2 <= 1.0:\n')
    f.write('                            image_x2 = int(image_x2 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                        else:\n')
    f.write('                            image_x2 = image_x1 + int(image_x2)\n')
    f.write('                    if type(image_y2) == type(1.0):\n')
    f.write('                        if image_y2 <= 1.0:\n')
    f.write('                            image_y2 = int(image_y2 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                        else:\n')
    f.write('                            image_y2 = image_y1 + int(image_y2)\n')
    f.write("                    image_w = image_x2 - image_x1\n")
    f.write("                    image_h = image_y2 - image_y1\n")
    f.write('                    imageFile = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][6]\n')
    f.write('                    imageFile_Lower = imageFile.lower()\n')
    f.write('                    if imageFile_Lower in G_ResourcesFileList:\n')
    f.write('                        resourPath = G_ResourcesFileList[imageFile_Lower]\n')
    f.write('                        if os.path.exists(resourPath) == True:\n')
    f.write('                            try:\n')
    f.write("                                imageRGBA = Image.open(resourPath).convert('RGBA')\n")
    f.write('                                bigImage = imageRGBA.resize((image_w, image_h),Image.LANCZOS)\n')
    f.write('                                imageFileName_Lower = imageFileName.lower()\n')
    f.write('                                if imageFileName_Lower in G_ResourcesFileList:\n')
    f.write('                                    resourPath = G_ResourcesFileList[imageFileName_Lower]\n')
    f.write('                                else:\n')
    f.write('                                    resourPath = imageFileName\n')
    f.write('                                    if os.path.exists(resourPath) == True:\n')
    f.write('                                        try:\n')
    f.write("                                            imageRGBA = Image.open(resourPath).convert('RGBA')\n")
    f.write('                                            w = x2 - x1\n')
    f.write('                                            h = y2 - y1\n')
    f.write('                                            smallImage = imageRGBA.resize((w, h),Image.LANCZOS)\n')
    f.write('                                            smallImage = smallImage.rotate(angle)\n')
    f.write('                                            bigImage.paste(smallImage, (x1,y1), mask=smallImage)\n')
    f.write('                                            newImage = ImageTk.PhotoImage(bigImage)\n')
    f.write('                                            G_CanvasShapeDictionary[uiName][canvasName][shapeTag][5] = newImage\n')
    f.write('                                            G_CanvasShapeDictionary[uiName][canvasName][shapeTag][6] = imageFile\n')
    f.write('                                            drawCanvas.itemconfig(shapeTag, image=newImage) \n')
    f.write('                                        except:\n')
    f.write('                                            return \n')
    f.write('                            except:\n')
    f.write('                                return \n')


#写入获取绑定点位置
def WriteSetShapeTextFunction(f):
    f.write('def SetShapeText(uiName,drawCanvasName,shapeTag,text,color = None):\n')
    f.write('    """'+Language.G_Language[836]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n') 
    f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('                G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][5] = text\n') 
    #f.write('                textFont = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][6]\n')
    f.write('                shapeTextTag = shapeTag\n') 
    f.write('                textcolor = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][7]\n') 
    f.write("                if G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][0] == 'button':\n")
    f.write('                    shapeTextTag = shapeTag+"_text"\n') 
    f.write('                    textcolor = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][6]\n') 
    f.write('                if color:\n') 
    f.write('                    textcolor = color\n') 
    # f.write("                if anchor == 'center':\n")
    # f.write("                    drawCanvas.create_text((x1+x2)//2, (y1+y2)//2,fill=fillcolor,text=text,font = textFont,anchor=anchor,tag=shapeTag)\n")
    # f.write("                elif anchor == 'n' or anchor == tkinter.N:\n")
    # f.write("                    drawCanvas.create_text((x1+x2)//2, y1,fill=fillcolor,text=text,font = textFont,anchor=anchor,tag=shapeTag)\n")
    # f.write("                elif anchor == 'w' or anchor == tkinter.W:\n")
    # f.write("                    drawCanvas.create_text(x1, (y1+y2)//2,fill=fillcolor,text=text,font = textFont,anchor=anchor,tag=shapeTag)\n")
    # f.write("                elif anchor == 's' or anchor == tkinter.S:\n")
    # f.write("                    drawCanvas.create_text((x1+x2)//2, y2,fill=fillcolor,text=text,font = textFont,anchor=anchor,tag=shapeTag)\n")
    # f.write("                elif anchor == 'e' or anchor == tkinter.E:\n")
    # f.write("                    drawCanvas.create_text(x2, (y1+y2)//2,fill=fillcolor,text=text,font = textFont,anchor=anchor,tag=shapeTag)\n")
    # f.write("                elif anchor == 'se' or anchor == tkinter.SE:\n")
    # f.write("                    drawCanvas.create_text(x2, y2,fill=fillcolor,text=text,font = textFont,anchor=anchor,tag=shapeTag)\n")
    # f.write("                elif anchor == 'ne' or anchor == tkinter.NE:\n")
    # f.write("                    drawCanvas.create_text(x2, y1,fill=fillcolor,text=text,font = textFont,anchor=anchor,tag=shapeTag)\n")
    # f.write("                elif anchor == 'sw' or anchor == tkinter.SW:\n")
    # f.write("                    drawCanvas.create_text(x1, y2,fill=fillcolor,text=text,font = textFont,anchor=anchor,tag=shapeTag)\n")
    # f.write("                else:\n")
    f.write("                G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag][6] = text\n")
    f.write("                G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag][8] = textcolor\n")
    f.write("                drawCanvas.itemconfigure(shapeTextTag,text=text)\n")
    f.write("                drawCanvas.itemconfigure(shapeTextTag,fill=textcolor)\n")
    f.write('def GetShapeText(uiName,drawCanvasName,shapeTag):\n')
    f.write('    """'+Language.G_Language[870]+'"""\n')
    f.write('    if uiName not in G_CanvasShapeDictionary:\n')
    f.write("        return None\n")
    f.write('    if drawCanvasName in G_CanvasParamDictionary[uiName]:\n')
    f.write('        if shapeTag in G_CanvasParamDictionary[uiName][drawCanvasName]:\n') 
    f.write('            text = G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag][6]\n')
    f.write('            textColor = G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag][8]\n')
    f.write('            return (text,textColor)\n')
    f.write("    return None\n")

    f.write("def SetCanvasTableCellBGColor(uiName,drawCanvasName,shapeTag,row=0,col=0,bgColor='#FFFFFF'):\n")
    f.write('    """'+Language.G_Language[2102]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n') 
    f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write("                x1 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][1]\n")
    f.write("                y1 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][2]\n")
    f.write("                x2 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][3]\n")
    f.write("                y2 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][4]\n")
    f.write('                if type(x1) == type(1.0):\n')
    f.write('                    x1 = int(x1 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                if type(y1) == type(1.0):\n')
    f.write('                    y1 = int(y1 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                if type(x2) == type(1.0):\n')
    f.write('                    if x2 <= 1.0:\n')
    f.write('                        x2 = int(x2 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                    else:\n')
    f.write('                        x2 = x1 + int(x2)\n')
    f.write('                if type(y2) == type(1.0):\n')
    f.write('                    if y2 <= 1.0:\n')
    f.write('                        y2 = int(y2 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                    else:\n')
    f.write('                        y2 = y1 + int(y2)\n')
    f.write('                TableInfo = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][10]\n')
    f.write("                for mergeInfo in TableInfo['merge']:\n")
    f.write("                    MergeBeginRow = mergeInfo[0][0]\n")
    f.write("                    MergeBeginCow = mergeInfo[0][1]\n")
    f.write("                    MergeEndRow = mergeInfo[1][0]\n")
    f.write("                    MergeEndCow = mergeInfo[1][1]\n")
    f.write("                    if checkPtInRect(col,row,MergeBeginCow,MergeEndCow,MergeBeginRow,MergeEndRow) == True:\n")
    f.write("                        styleIndex = mergeInfo[3]\n")
    f.write("                        StyleList = TableInfo['style']\n")
    f.write("                        StyleInfo = StyleList[styleIndex]\n")
    f.write("                        NewStyleInfo = copy.deepcopy(StyleInfo)\n")
    f.write("                        NewStyleInfo[0] = bgColor\n")
    f.write("                        if NewStyleInfo in TableInfo['style']:\n")
    f.write("                            mergeInfo[3] = TableInfo['style'].index(NewStyleInfo)\n")
    f.write("                        else:\n")
    f.write("                            TableInfo['style'].append(NewStyleInfo)\n")
    f.write("                            mergeInfo[3] = TableInfo['style'].index(NewStyleInfo)\n")
    f.write('                        drawCanvas.delete(shapeTag)\n')
    f.write('                        Params = G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]\n')
    f.write('                        Params[5] = TableInfo\n')
    f.write("                        DoCanvasRecord(drawCanvas,'table',x1,y1,x2,y2,Params[0],Params[1],Params[2],Params[3],Params[4],Params[5],Params[6],Params[7],Params[8],shapeTag)\n")
    f.write("                        return\n")
    f.write("                RowIndex = 0\n")
    f.write("                for rowInfoLine in TableInfo['rows']:\n")
    f.write("                    CowIndex = 0\n")
    f.write("                    for rowInfo in rowInfoLine:\n")
    f.write("                        if CowIndex == col and RowIndex == row:\n")
    f.write("                            styleIndex = rowInfo[1]\n")
    f.write("                            StyleList = TableInfo['style']\n")
    f.write("                            StyleInfo = StyleList[styleIndex]\n")
    f.write("                            NewStyleInfo = copy.deepcopy(StyleInfo)\n")
    f.write("                            NewStyleInfo[0] = bgColor\n")
    f.write("                            if NewStyleInfo in TableInfo['style']:\n")
    f.write("                                rowInfo[1] = TableInfo['style'].index(NewStyleInfo)\n")
    f.write("                            else:\n")
    f.write("                                TableInfo['style'].append(NewStyleInfo)\n")
    f.write("                                rowInfo[1] = TableInfo['style'].index(NewStyleInfo)\n")
    f.write('                            drawCanvas.delete(shapeTag)\n')
    f.write('                            Params = G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]\n')
    f.write('                            Params[5] = TableInfo\n')
    f.write("                            DoCanvasRecord(drawCanvas,'table',x1,y1,x2,y2,Params[0],Params[1],Params[2],Params[3],Params[4],Params[5],Params[6],Params[7],Params[8],shapeTag)\n")
    f.write("                            return\n")
    f.write("                        CowIndex = CowIndex + 1\n")
    f.write("                    RowIndex = RowIndex + 1\n")
    f.write("def SetCanvasTableCellText(uiName,drawCanvasName,shapeTag,row=0,col=0,cellText=''):\n")
    f.write('    """'+Language.G_Language[2103]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n') 
    f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write("                x1 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][1]\n")
    f.write("                y1 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][2]\n")
    f.write("                x2 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][3]\n")
    f.write("                y2 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][4]\n")
    f.write('                if type(x1) == type(1.0):\n')
    f.write('                    x1 = int(x1 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                if type(y1) == type(1.0):\n')
    f.write('                    y1 = int(y1 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                if type(x2) == type(1.0):\n')
    f.write('                    if x2 <= 1.0:\n')
    f.write('                        x2 = int(x2 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                    else:\n')
    f.write('                        x2 = x1 + int(x2)\n')
    f.write('                if type(y2) == type(1.0):\n')
    f.write('                    if y2 <= 1.0:\n')
    f.write('                        y2 = int(y2 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                    else:\n')
    f.write('                        y2 = y1 + int(y2)\n')
    f.write('                TableInfo = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][10]\n')
    f.write("                for mergeInfo in TableInfo['merge']:\n")
    f.write("                    MergeBeginRow = mergeInfo[0][0]\n")
    f.write("                    MergeBeginCow = mergeInfo[0][1]\n")
    f.write("                    MergeEndRow = mergeInfo[1][0]\n")
    f.write("                    MergeEndCow = mergeInfo[1][1]\n")
    f.write("                    if checkPtInRect(col,row,MergeBeginCow,MergeEndCow,MergeBeginRow,MergeEndRow) == True:\n")
    f.write("                        mergeInfo[2] = str(cellText)\n")
    f.write('                        drawCanvas.delete(shapeTag)\n')
    f.write('                        Params = G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]\n')
    f.write('                        Params[5] = TableInfo\n')
    f.write("                        DoCanvasRecord(drawCanvas,'table',x1,y1,x2,y2,Params[0],Params[1],Params[2],Params[3],Params[4],Params[5],Params[6],Params[7],Params[8],shapeTag)\n")
    f.write("                        return\n")
    f.write("                RowIndex = 0\n")
    f.write("                for rowInfoLine in TableInfo['rows']:\n")
    f.write("                    CowIndex = 0\n")
    f.write("                    for rowInfo in rowInfoLine:\n")
    f.write("                        if CowIndex == col and RowIndex == row:\n")
    f.write("                            rowInfo[0] = str(cellText)\n")
    f.write('                            drawCanvas.delete(shapeTag)\n')
    f.write('                            Params = G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]\n')
    f.write('                            Params[5] = TableInfo\n')
    f.write("                            DoCanvasRecord(drawCanvas,'table',x1,y1,x2,y2,Params[0],Params[1],Params[2],Params[3],Params[4],Params[5],Params[6],Params[7],Params[8],shapeTag)\n")
    f.write("                            return\n")
    f.write("                        CowIndex = CowIndex + 1\n")
    f.write("                    RowIndex = RowIndex + 1\n")
    f.write("def SetCanvasTableCellTextColor(uiName,drawCanvasName,shapeTag,row=0,col=0,textColor='#000000'):\n")
    f.write('    """'+Language.G_Language[2106]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n') 
    f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write("                x1 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][1]\n")
    f.write("                y1 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][2]\n")
    f.write("                x2 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][3]\n")
    f.write("                y2 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][4]\n")
    f.write('                if type(x1) == type(1.0):\n')
    f.write('                    x1 = int(x1 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                if type(y1) == type(1.0):\n')
    f.write('                    y1 = int(y1 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                if type(x2) == type(1.0):\n')
    f.write('                    if x2 <= 1.0:\n')
    f.write('                        x2 = int(x2 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                    else:\n')
    f.write('                        x2 = x1 + int(x2)\n')
    f.write('                if type(y2) == type(1.0):\n')
    f.write('                    if y2 <= 1.0:\n')
    f.write('                        y2 = int(y2 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                    else:\n')
    f.write('                        y2 = y1 + int(y2)\n')
    f.write('                TableInfo = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][10]\n')
    f.write("                for mergeInfo in TableInfo['merge']:\n")
    f.write("                    MergeBeginRow = mergeInfo[0][0]\n")
    f.write("                    MergeBeginCow = mergeInfo[0][1]\n")
    f.write("                    MergeEndRow = mergeInfo[1][0]\n")
    f.write("                    MergeEndCow = mergeInfo[1][1]\n")
    f.write("                    if checkPtInRect(col,row,MergeBeginCow,MergeEndCow,MergeBeginRow,MergeEndRow) == True:\n")
    f.write("                        styleIndex = mergeInfo[3]\n")
    f.write("                        StyleList = TableInfo['style']\n")
    f.write("                        StyleInfo = StyleList[styleIndex]\n")
    f.write("                        NewStyleInfo = copy.deepcopy(StyleInfo)\n")
    f.write("                        NewStyleInfo[3] = textColor\n")
    f.write("                        if NewStyleInfo in TableInfo['style']:\n")
    f.write("                            mergeInfo[3] = TableInfo['style'].index(NewStyleInfo)\n")
    f.write("                        else:\n")
    f.write("                            TableInfo['style'].append(NewStyleInfo)\n")
    f.write("                            mergeInfo[3] = TableInfo['style'].index(NewStyleInfo)\n")
    f.write('                        drawCanvas.delete(shapeTag)\n')
    f.write('                        Params = G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]\n')
    f.write('                        Params[5] = TableInfo\n')
    f.write("                        DoCanvasRecord(drawCanvas,'table',x1,y1,x2,y2,Params[0],Params[1],Params[2],Params[3],Params[4],Params[5],Params[6],Params[7],Params[8],shapeTag)\n")
    f.write("                        return\n")
    f.write("                RowIndex = 0\n")
    f.write("                for rowInfoLine in TableInfo['rows']:\n")
    f.write("                    CowIndex = 0\n")
    f.write("                    for rowInfo in rowInfoLine:\n")
    f.write("                        if CowIndex == col and RowIndex == row:\n")
    f.write("                            styleIndex = rowInfo[1]\n")
    f.write("                            StyleList = TableInfo['style']\n")
    f.write("                            StyleInfo = StyleList[styleIndex]\n")
    f.write("                            NewStyleInfo = copy.deepcopy(StyleInfo)\n")
    f.write("                            NewStyleInfo[3] = textColor\n")
    f.write("                            if NewStyleInfo in TableInfo['style']:\n")
    f.write("                                rowInfo[1] = TableInfo['style'].index(NewStyleInfo)\n")
    f.write("                            else:\n")
    f.write("                                TableInfo['style'].append(NewStyleInfo)\n")
    f.write("                                rowInfo[1] = TableInfo['style'].index(NewStyleInfo)\n")
    f.write('                            drawCanvas.delete(shapeTag)\n')
    f.write('                            Params = G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]\n')
    f.write('                            Params[5] = TableInfo\n')
    f.write("                            DoCanvasRecord(drawCanvas,'table',x1,y1,x2,y2,Params[0],Params[1],Params[2],Params[3],Params[4],Params[5],Params[6],Params[7],Params[8],shapeTag)\n")
    f.write("                            return\n")
    f.write("                        CowIndex = CowIndex + 1\n")
    f.write("                    RowIndex = RowIndex + 1\n")
    f.write("def SetCanvasTableCellTextFont(uiName,drawCanvasName,shapeTag,row=0,col=0,font='TkDefaultFont'):\n")
    f.write('    """'+Language.G_Language[2099]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n') 
    f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write("                x1 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][1]\n")
    f.write("                y1 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][2]\n")
    f.write("                x2 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][3]\n")
    f.write("                y2 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][4]\n")
    f.write('                if type(x1) == type(1.0):\n')
    f.write('                    x1 = int(x1 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                if type(y1) == type(1.0):\n')
    f.write('                    y1 = int(y1 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                if type(x2) == type(1.0):\n')
    f.write('                    if x2 <= 1.0:\n')
    f.write('                        x2 = int(x2 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                    else:\n')
    f.write('                        x2 = x1 + int(x2)\n')
    f.write('                if type(y2) == type(1.0):\n')
    f.write('                    if y2 <= 1.0:\n')
    f.write('                        y2 = int(y2 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                    else:\n')
    f.write('                        y2 = y1 + int(y2)\n')
    f.write('                TableInfo = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][10]\n')
    f.write("                #字体信息\n")
    f.write("                familytext = font.actual('family')\n")
    f.write("                sizetext = font.actual('size')\n")
    f.write("                weighttext = font.actual('weight')\n")
    f.write("                slanttext = font.actual('slant')\n")
    f.write("                underlinetext = font.actual('underline')\n")
    f.write("                overstriketext = font.actual('overstrike')\n")
    f.write("                CellTextFontIndex = -1\n")
    f.write("                FontIndex = 0\n")
    f.write("                for FontInfo in TableInfo['font']:\n")
    f.write("                    if FontInfo[0] == familytext and FontInfo[1] == sizetext and FontInfo[2] == weighttext and FontInfo[3] == slanttext and FontInfo[4] == underlinetext and FontInfo[5] == overstriketext:\n")
    f.write("                        CellTextFontIndex = FontIndex\n")
    f.write("                        break\n")
    f.write("                    FontIndex = FontIndex + 1\n")
    f.write("                if CellTextFontIndex < 0:\n")
    f.write("                    CellTextFontIndex = len(TableInfo['font'])\n")
    f.write("                    TableInfo['font'].append([familytext,sizetext,weighttext,slanttext,underlinetext,overstriketext])\n")
    f.write("                for mergeInfo in TableInfo['merge']:\n")
    f.write("                    MergeBeginRow = mergeInfo[0][0]\n")
    f.write("                    MergeBeginCow = mergeInfo[0][1]\n")
    f.write("                    MergeEndRow = mergeInfo[1][0]\n")
    f.write("                    MergeEndCow = mergeInfo[1][1]\n")
    f.write("                    if checkPtInRect(col,row,MergeBeginCow,MergeEndCow,MergeBeginRow,MergeEndRow) == True:\n")
    f.write("                        styleIndex = mergeInfo[3]\n")
    f.write("                        StyleList = TableInfo['style']\n")
    f.write("                        StyleInfo = StyleList[styleIndex]\n")
    f.write("                        NewStyleInfo = copy.deepcopy(StyleInfo)\n")
    f.write("                        NewStyleInfo[1] = CellTextFontIndex\n")
    f.write("                        if NewStyleInfo in TableInfo['style']:\n")
    f.write("                            mergeInfo[1] = TableInfo['style'].index(NewStyleInfo)\n")
    f.write("                        else:\n")
    f.write("                            TableInfo['style'].append(NewStyleInfo)\n")
    f.write("                            mergeInfo[1] = TableInfo['style'].index(NewStyleInfo)\n")
    f.write('                        drawCanvas.delete(shapeTag)\n')
    f.write('                        Params = G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]\n')
    f.write('                        Params[5] = TableInfo\n')
    f.write("                        DoCanvasRecord(drawCanvas,'table',x1,y1,x2,y2,Params[0],Params[1],Params[2],Params[3],Params[4],Params[5],Params[6],Params[7],Params[8],shapeTag)\n")
    f.write("                        return\n")
    f.write("                RowIndex = 0\n")
    f.write("                for rowInfoLine in TableInfo['rows']:\n")
    f.write("                    CowIndex = 0\n")
    f.write("                    for rowInfo in rowInfoLine:\n")
    f.write("                        if CowIndex == col and RowIndex == row:\n")
    f.write("                            styleIndex = rowInfo[1]\n")
    f.write("                            StyleList = TableInfo['style']\n")
    f.write("                            StyleInfo = StyleList[styleIndex]\n")
    f.write("                            NewStyleInfo = copy.deepcopy(StyleInfo)\n")
    f.write("                            NewStyleInfo[1] = CellTextFontIndex\n")
    f.write("                            if NewStyleInfo in TableInfo['style']:\n")
    f.write("                                rowInfo[1] = TableInfo['style'].index(NewStyleInfo)\n")
    f.write("                            else:\n")
    f.write("                                TableInfo['style'].append(NewStyleInfo)\n")
    f.write("                                rowInfo[1] = TableInfo['style'].index(NewStyleInfo)\n")
    f.write('                            drawCanvas.delete(shapeTag)\n')
    f.write('                            Params = G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]\n')
    f.write('                            Params[5] = TableInfo\n')
    f.write("                            DoCanvasRecord(drawCanvas,'table',x1,y1,x2,y2,Params[0],Params[1],Params[2],Params[3],Params[4],Params[5],Params[6],Params[7],Params[8],shapeTag)\n")
    f.write("                            return\n")
    f.write("                        CowIndex = CowIndex + 1\n")
    f.write("                    RowIndex = RowIndex + 1\n")
    f.write("def SetCanvasTableCellTextAnchor(uiName,drawCanvasName,shapeTag,row=0,col=0,anchor='center'):\n")
    f.write('    """'+Language.G_Language[2105]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n') 
    f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write("                x1 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][1]\n")
    f.write("                y1 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][2]\n")
    f.write("                x2 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][3]\n")
    f.write("                y2 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][4]\n")
    f.write('                if type(x1) == type(1.0):\n')
    f.write('                    x1 = int(x1 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                if type(y1) == type(1.0):\n')
    f.write('                    y1 = int(y1 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                if type(x2) == type(1.0):\n')
    f.write('                    if x2 <= 1.0:\n')
    f.write('                        x2 = int(x2 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                    else:\n')
    f.write('                        x2 = x1 + int(x2)\n')
    f.write('                if type(y2) == type(1.0):\n')
    f.write('                    if y2 <= 1.0:\n')
    f.write('                        y2 = int(y2 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                    else:\n')
    f.write('                        y2 = y1 + int(y2)\n')
    f.write('                TableInfo = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][10]\n')
    f.write("                for mergeInfo in TableInfo['merge']:\n")
    f.write("                    MergeBeginRow = mergeInfo[0][0]\n")
    f.write("                    MergeBeginCow = mergeInfo[0][1]\n")
    f.write("                    MergeEndRow = mergeInfo[1][0]\n")
    f.write("                    MergeEndCow = mergeInfo[1][1]\n")
    f.write("                    if checkPtInRect(col,row,MergeBeginCow,MergeEndCow,MergeBeginRow,MergeEndRow) == True:\n")
    f.write("                        styleIndex = mergeInfo[3]\n")
    f.write("                        StyleList = TableInfo['style']\n")
    f.write("                        StyleInfo = StyleList[styleIndex]\n")
    f.write("                        NewStyleInfo = copy.deepcopy(StyleInfo)\n")
    f.write("                        NewStyleInfo[2] = anchor\n")
    f.write("                        if NewStyleInfo in TableInfo['style']:\n")
    f.write("                            mergeInfo[3] = TableInfo['style'].index(NewStyleInfo)\n")
    f.write("                        else:\n")
    f.write("                            TableInfo['style'].append(NewStyleInfo)\n")
    f.write("                            mergeInfo[3] = TableInfo['style'].index(NewStyleInfo)\n")
    f.write('                        drawCanvas.delete(shapeTag)\n')
    f.write('                        Params = G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]\n')
    f.write('                        Params[5] = TableInfo\n')
    f.write("                        DoCanvasRecord(drawCanvas,'table',x1,y1,x2,y2,Params[0],Params[1],Params[2],Params[3],Params[4],Params[5],Params[6],Params[7],Params[8],shapeTag)\n")
    f.write("                        return\n")
    f.write("                RowIndex = 0\n")
    f.write("                for rowInfoLine in TableInfo['rows']:\n")
    f.write("                    CowIndex = 0\n")
    f.write("                    for rowInfo in rowInfoLine:\n")
    f.write("                        if CowIndex == col and RowIndex == row:\n")
    f.write("                            styleIndex = rowInfo[1]\n")
    f.write("                            StyleList = TableInfo['style']\n")
    f.write("                            StyleInfo = StyleList[styleIndex]\n")
    f.write("                            NewStyleInfo = copy.deepcopy(StyleInfo)\n")
    f.write("                            NewStyleInfo[2] = anchor\n")
    f.write("                            if NewStyleInfo in TableInfo['style']:\n")
    f.write("                                rowInfo[1] = TableInfo['style'].index(NewStyleInfo)\n")
    f.write("                            else:\n")
    f.write("                                TableInfo['style'].append(NewStyleInfo)\n")
    f.write("                                rowInfo[1] = TableInfo['style'].index(NewStyleInfo)\n")
    f.write('                            drawCanvas.delete(shapeTag)\n')
    f.write('                            Params = G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]\n')
    f.write('                            Params[5] = TableInfo\n')
    f.write("                            DoCanvasRecord(drawCanvas,'table',x1,y1,x2,y2,Params[0],Params[1],Params[2],Params[3],Params[4],Params[5],Params[6],Params[7],Params[8],shapeTag)\n")
    f.write("                            return\n")
    f.write("                        CowIndex = CowIndex + 1\n")
    f.write("                    RowIndex = RowIndex + 1\n")
    f.write("def SetCanvasTableCellMerge(uiName,drawCanvasName,shapeTag,BeginRow=0,BeginCow=0,EndRow=0,EndCow=0):\n")
    f.write('    """'+Language.G_Language[2100]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n') 
    f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write("                x1 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][1]\n")
    f.write("                y1 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][2]\n")
    f.write("                x2 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][3]\n")
    f.write("                y2 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][4]\n")
    f.write('                if type(x1) == type(1.0):\n')
    f.write('                    x1 = int(x1 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                if type(y1) == type(1.0):\n')
    f.write('                    y1 = int(y1 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                if type(x2) == type(1.0):\n')
    f.write('                    if x2 <= 1.0:\n')
    f.write('                        x2 = int(x2 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                    else:\n')
    f.write('                        x2 = x1 + int(x2)\n')
    f.write('                if type(y2) == type(1.0):\n')
    f.write('                    if y2 <= 1.0:\n')
    f.write('                        y2 = int(y2 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                    else:\n')
    f.write('                        y2 = y1 + int(y2)\n')
    f.write('                TableInfo = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][10]\n')
    f.write("                RowIndex = 0\n")
    f.write("                for rowInfoLine in TableInfo['rows']:\n")
    f.write("                    CowIndex = 0\n")
    f.write("                    for rowInfo in rowInfoLine:\n")
    f.write("                        if checkPtInRect(CowIndex,RowIndex,BeginCow,EndCow,BeginRow,EndRow) == True:\n")
    f.write("                            rowInfo[1] = 0\n")
    f.write("                        CowIndex = CowIndex + 1\n")
    f.write("                    RowIndex = RowIndex + 1\n")
    f.write("                TableInfo['merge'].append([(BeginRow,BeginCow),(EndRow,EndCow),'',1])\n")
    f.write('                drawCanvas.delete(shapeTag)\n')
    f.write('                Params = G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]\n')
    f.write('                Params[5] = TableInfo\n')
    f.write("                DoCanvasRecord(drawCanvas,'table',x1,y1,x2,y2,Params[0],Params[1],Params[2],Params[3],Params[4],Params[5],Params[6],Params[7],Params[8],shapeTag)\n")
    f.write("def SetCanvasTableCellSplit(uiName,drawCanvasName,shapeTag,row=0,col=0):\n")
    f.write('    """'+Language.G_Language[2101]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n') 
    f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write("                x1 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][1]\n")
    f.write("                y1 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][2]\n")
    f.write("                x2 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][3]\n")
    f.write("                y2 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][4]\n")
    f.write('                if type(x1) == type(1.0):\n')
    f.write('                    x1 = int(x1 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                if type(y1) == type(1.0):\n')
    f.write('                    y1 = int(y1 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                if type(x2) == type(1.0):\n')
    f.write('                    if x2 <= 1.0:\n')
    f.write('                        x2 = int(x2 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                    else:\n')
    f.write('                        x2 = x1 + int(x2)\n')
    f.write('                if type(y2) == type(1.0):\n')
    f.write('                    if y2 <= 1.0:\n')
    f.write('                        y2 = int(y2 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                    else:\n')
    f.write('                        y2 = y1 + int(y2)\n')
    f.write('                TableInfo = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][10]\n')
    f.write("                for mergeInfo in TableInfo['merge']:\n")
    f.write("                    MergeBeginRow = mergeInfo[0][0]\n")
    f.write("                    MergeBeginCow = mergeInfo[0][1]\n")
    f.write("                    MergeEndRow = mergeInfo[1][0]\n")
    f.write("                    MergeEndCow = mergeInfo[1][1]\n")
    f.write("                    if checkPtInRect(col,row,MergeBeginCow,MergeEndCow,MergeBeginRow,MergeEndRow) == True:\n")
    f.write("                        TableInfo['merge'].remove(mergeInfo)\n")
    f.write("                    RowIndex = 0\n")
    f.write("                    for rowInfoLine in TableInfo['rows']:\n")
    f.write("                        CowIndex = 0\n")
    f.write("                        for rowInfo in rowInfoLine:\n")
    f.write("                            if checkPtInRect(CowIndex,RowIndex,MergeBeginCow,MergeEndCow,MergeBeginRow,MergeEndRow) == True:\n")
    f.write("                                rowInfo[1] = 1\n")
    f.write("                        CowIndex = CowIndex + 1\n")
    f.write("                    RowIndex = RowIndex + 1\n")
    f.write('                drawCanvas.delete(shapeTag)\n')
    f.write('                Params = G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]\n')
    f.write('                Params[5] = TableInfo\n')
    f.write("                DoCanvasRecord(drawCanvas,'table',x1,y1,x2,y2,Params[0],Params[1],Params[2],Params[3],Params[4],Params[5],Params[6],Params[7],Params[8],shapeTag)\n")
    f.write("def SetCanvasTableRowTextList(uiName,drawCanvasName,shapeTag,row=0,textList=[]):\n")
    f.write('    """'+Language.G_Language[2098]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n') 
    f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write("                x1 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][1]\n")
    f.write("                y1 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][2]\n")
    f.write("                x2 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][3]\n")
    f.write("                y2 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][4]\n")
    f.write('                if type(x1) == type(1.0):\n')
    f.write('                    x1 = int(x1 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                if type(y1) == type(1.0):\n')
    f.write('                    y1 = int(y1 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                if type(x2) == type(1.0):\n')
    f.write('                    if x2 <= 1.0:\n')
    f.write('                        x2 = int(x2 * G_CanvasSizeDictionary[uiName][canvasName][0])\n')
    f.write('                    else:\n')
    f.write('                        x2 = x1 + int(x2)\n')
    f.write('                if type(y2) == type(1.0):\n')
    f.write('                    if y2 <= 1.0:\n')
    f.write('                        y2 = int(y2 * G_CanvasSizeDictionary[uiName][canvasName][1])\n')
    f.write('                    else:\n')
    f.write('                        y2 = y1 + int(y2)\n')
    f.write('                TableInfo = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][10]\n')
    f.write("                if row < len(TableInfo['rows']):\n")
    f.write("                    col = 0\n")
    f.write("                    for cellText in textList:\n")
    f.write("                        CellInfo = TableInfo['rows'][row][col]\n")
    f.write("                        CellInfo[0] = str(cellText)\n")
    f.write("                        for mergeInfo in TableInfo['merge']:\n")
    f.write("                            MergeBeginRow = mergeInfo[0][0]\n")
    f.write("                            MergeBeginCow = mergeInfo[0][1]\n")
    f.write("                            MergeEndRow = mergeInfo[1][0]\n")
    f.write("                            MergeEndCow = mergeInfo[1][1]\n")
    f.write("                            if checkPtInRect(col,row,MergeBeginCow,MergeEndCow,MergeBeginRow,MergeEndRow) == True:\n")
    f.write("                                mergeInfo[2] = str(cellText)\n")
    f.write("                        col = col + 1\n")
    f.write('                    drawCanvas.delete(shapeTag)\n')
    f.write('                    Params = G_CanvasParamDictionary[uiName][drawCanvasName][shapeTag]\n')
    f.write('                    Params[5] = TableInfo\n')
    f.write("                    DoCanvasRecord(drawCanvas,'table',x1,y1,x2,y2,Params[0],Params[1],Params[2],Params[3],Params[4],Params[5],Params[6],Params[7],Params[8],shapeTag)\n")
#写入切换按钮事件
def WriteOnSwitchFunction(f):
    f.write('def OnSwitch(uiName,drawCanvasName,shapeTag,actionInfo):\n')
    f.write('    """'+Language.G_Language[3333]+'"""\n')
    f.write('    if uiName not in G_CanvasShapeDictionary:\n')
    f.write("        return None\n")
    f.write('    if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('            drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('            drawCanvas.delete(shapeTag)\n')
    f.write('            x1 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][1]\n')
    f.write('            y1 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][2]\n')
    f.write('            x2 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][3]\n')
    f.write('            y2 = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][4]\n')
    f.write('            SwitchWidth = x2 - x1\n')
    f.write('            SwitchHeight = y2 - y1\n')
    f.write('            Switch_radius = int(SwitchHeight/2)\n')
    f.write('            fillcolor = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][5]\n')
    f.write('            outlinecolor = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][6]\n')
    f.write('            if actionInfo[2] == False:\n')
    f.write("                fillcolor = '#777777'\n")
    f.write("                drawCanvas.create_oval(x1, y1, x1+SwitchHeight, y1+SwitchHeight-1,fill=fillcolor,outline=outlinecolor,width=0, tag=shapeTag)\n")
    f.write("                drawCanvas.create_oval(x1+(SwitchWidth-SwitchHeight), y1, x1+SwitchWidth,y1+ SwitchHeight-1,fill=fillcolor,outline=outlinecolor,width=0, tag=shapeTag)\n")
    f.write("                drawCanvas.create_rectangle(x1+Switch_radius,y1,x1+(SwitchWidth-Switch_radius),y1+SwitchHeight,fill=fillcolor,outline=outlinecolor,width=0, tag=shapeTag)\n")
    f.write("                drawCanvas.create_oval(x1+2, y1+2, x1+(SwitchHeight-3), y1+(SwitchHeight-3),fill=outlinecolor,width=0,tag=shapeTag)\n")
    f.write('                drawCanvas.create_text(x1+(SwitchWidth-int(1.0*SwitchHeight)), y1+int(SwitchHeight/2), text="Off",font = ("System",int(SwitchHeight/2)),anchor=\'center\',fill=outlinecolor,width=0,tag=shapeTag)\n')
    f.write("                actionInfo[2] = True\n")
    f.write('            else:\n')
    f.write("                drawCanvas.create_oval(x1, y1, x1+SwitchHeight, y1+SwitchHeight-1,fill=fillcolor,outline=outlinecolor,width=0, tag=shapeTag)\n")
    f.write("                drawCanvas.create_oval(x1+(SwitchWidth-SwitchHeight), y1, x1+SwitchWidth,y1+ SwitchHeight-1,fill=fillcolor,outline=outlinecolor,width=0, tag=shapeTag)\n")
    f.write("                drawCanvas.create_rectangle(x1+Switch_radius,y1,x1+(SwitchWidth-Switch_radius),y1+SwitchHeight,fill=fillcolor,outline=outlinecolor,width=0, tag=shapeTag)\n")
    f.write("                drawCanvas.create_oval(x1+(SwitchWidth-SwitchHeight)-2, y1+2, x1+SwitchWidth-3, y1+(SwitchHeight-3),fill=outlinecolor,width=0,tag=shapeTag)\n")
    f.write('                drawCanvas.create_text(x1+int(0.8*SwitchHeight), y1+int(SwitchHeight/2), text="On",font = ("System",int(SwitchHeight/2)),anchor=\'center\',fill=outlinecolor,width=0,tag=shapeTag)\n')
    f.write("                actionInfo[2] = False\n")

#写入切换按钮事件
def WriteOnExpandOrShrinkFunction(f):
    f.write('def OnExpandOrShrink(uiName,drawCanvasName,shapeTag,actionInfo):\n')
    f.write('    """'+Language.G_Language[3334]+'"""\n')
    f.write('    if uiName not in G_CanvasShapeDictionary:\n')
    f.write("        return None\n")
    f.write('    if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        listmenuNameIndex = shapeTag.rfind(\'_\')\n')
    f.write('        listmenuName = shapeTag[0:listmenuNameIndex]\n')
    f.write('        if listmenuName in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('            drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write("            drawCanvas.delete('drawing_shape')\n")
    f.write('            drawInfo = G_CanvasShapeDictionary[uiName][drawCanvasName][listmenuName]\n')
    f.write('            MenuInfo = drawInfo[10]\n')
    f.write("            SubMenus = MenuInfo['SubMenus']\n")
    f.write('            x1 = drawInfo[1]\n')
    f.write('            y1 = drawInfo[2]\n')
    f.write('            x2 = drawInfo[3]\n')
    f.write('            y2 = drawInfo[4]\n')
    f.write('            fillcolor = drawInfo[5]\n')
    f.write('            outlinecolor = drawInfo[6]\n')
    f.write('            fillwidth = int(drawInfo[7])\n')
    f.write('            dashx = int(drawInfo[8])\n')
    f.write('            dashy = int(drawInfo[9])\n')
    f.write('            for subMenu in SubMenus:\n')
    f.write("                titleText = subMenu[0]\n")
    f.write("                bgImgFile = subMenu[1]\n")
    f.write("                itemList = subMenu[2]\n")
    f.write('                subMenuTag = listmenuName +"_"+titleText\n')
    f.write("                drawCanvas.delete(subMenuTag)\n")
    f.write("                if shapeTag == subMenuTag:\n")
    f.write("                    if subMenu[3] == True:\n")
    f.write("                        subMenu[3] = False\n")
    f.write("                    else:\n")
    f.write("                        subMenu[3] = True\n")
    f.write("            DoCanvasRecord(drawCanvas,\"listmenu\",x1,y1,x2,y2,fillcolor,outlinecolor,fillwidth,dash1=0,dash2=0,newImage=MenuInfo,text='',textFont = None,textColor='',shapeTag=listmenuName)\n")
    f.write('            for subMenu in SubMenus:\n')
    f.write('                titleText = subMenu[0]\n')
    f.write('                subMenuTag = listmenuName +"_"+titleText\n')
    f.write('                drawCanvas.tag_bind(subMenuTag, "<Button-1>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=subMenuTag,eventName="ButtonDown"))\n')


#写入删除图形
def WriteDeleteShapeFunction(f):
    f.write('def DeleteShape(uiName,drawCanvasName,shapeTag):\n')
    f.write('    """'+Language.G_Language[1295]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('                drawCanvas.delete(shapeTag)\n')
    f.write('                OutLineTag = shapeTag+"_outline"\n')
    f.write('                drawCanvas.delete(OutLineTag)\n')
    f.write('                G_CanvasShapeDictionary[uiName][drawCanvasName].pop(shapeTag)\n')
    f.write('                if drawCanvasName in G_CanvasEventDictionary[uiName]:\n')
    f.write('                    if shapeTag in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName].pop(shapeTag)\n')
    f.write('                if drawCanvasName in G_CanvasParamDictionary[uiName]:\n')
    f.write('                    if shapeTag in G_CanvasParamDictionary[uiName][drawCanvasName]:\n')
    f.write('                        G_CanvasParamDictionary[uiName][drawCanvasName].pop(shapeTag)\n')
def WriteSetShapeEventFunction(f,runMode):
    f.write('def BindShapeEvent_SetShapeRect(uiName,drawCanvasName,shapeTag,bindEvent,targetShapeTag,x,y,w,h):\n')
    f.write('    """'+Language.G_Language[858]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    #f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('                actionInfo = ["SetShapeRect",targetShapeTag,x,y,w,h]\n')
    f.write('                BindShapeMouseEvent(uiName,drawCanvasName,shapeTag,bindEvent,actionInfo)\n')
    f.write('def BindShapeEvent_SetFillColor(uiName,drawCanvasName,shapeTag,bindEvent,targetShapeTag,color):\n')
    f.write('    """'+Language.G_Language[859]+'"""\n')
    
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    #f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('                actionInfo = ["SetFillColor",targetShapeTag,color]\n')
    f.write('                BindShapeMouseEvent(uiName,drawCanvasName,shapeTag,bindEvent,actionInfo)\n')
    f.write('def BindShapeEvent_SetOutlineColor(uiName,drawCanvasName,shapeTag,bindEvent,targetShapeTag,color):\n')
    f.write('    """'+Language.G_Language[860]+'"""\n')
    
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    #f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('                actionInfo = ["SetOutlineColor",targetShapeTag,color]\n')
    f.write('                BindShapeMouseEvent(uiName,drawCanvasName,shapeTag,bindEvent,actionInfo)\n')
    f.write('def BindShapeEvent_ChangeImage(uiName,drawCanvasName,shapeTag,bindEvent,targetShapeTag,ImageFile):\n')
    f.write('    """'+Language.G_Language[861]+'"""\n')
    
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    #f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('                actionInfo = ["ChangeImage",targetShapeTag,ImageFile]\n')
    f.write('                BindShapeMouseEvent(uiName,drawCanvasName,shapeTag,bindEvent,actionInfo)\n')
    f.write('def BindShapeEvent_ChangeText(uiName,drawCanvasName,shapeTag,bindEvent,targetShapeTag,Text,TextColor):\n')
    f.write('    """'+Language.G_Language[862]+'"""\n')
    
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    #f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('                actionInfo = ["ChangeText",targetShapeTag,Text,TextColor]\n')
    f.write('                BindShapeMouseEvent(uiName,drawCanvasName,shapeTag,bindEvent,actionInfo)\n')
    f.write('def BindShapeEvent_JumpToUI(uiName,drawCanvasName,shapeTag,bindEvent,targetUIName):\n')
    f.write('    """'+Language.G_Language[876]+'"""\n')
    
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    #f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('                actionInfo = ["JumpToUI",shapeTag,targetUIName]\n')
    f.write('                BindShapeMouseEvent(uiName,drawCanvasName,shapeTag,bindEvent,actionInfo)\n')
    f.write('def BindShapeEvent_LoadUI(uiName,drawCanvasName,shapeTag,bindEvent,widgetName,targetUIName):\n')
    f.write('    """'+Language.G_Language[1567]+'"""\n')
    
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    #f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('                actionInfo = ["LoadUI",shapeTag,widgetName,targetUIName]\n')
    f.write('                BindShapeMouseEvent(uiName,drawCanvasName,shapeTag,bindEvent,actionInfo)\n')
    f.write('def BindShapeEvent_DeleteShape(uiName,drawCanvasName,shapeTag,bindEvent,targetShapeTag):\n')
    f.write('    """'+Language.G_Language[877]+'"""\n')
    
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    #f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('                actionInfo = ["DeleteShape",targetShapeTag]\n')
    f.write('                BindShapeMouseEvent(uiName,drawCanvasName,shapeTag,bindEvent,actionInfo)\n')
    f.write('def BindShapeEvent_CallFunction(uiName,drawCanvasName,shapeTag,bindEvent,targetShapeTag,callBackFuncton,param = None):\n')
    f.write('    """'+Language.G_Language[863]+'"""\n')
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    #f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    #f.write('                actionInfo = ["CallFunction",targetShapeTag,callBackFuncton]\n')
    f.write('                actionInfo = ["CallFunction",callBackFuncton,param]\n')
    f.write('                BindShapeMouseEvent(uiName,drawCanvasName,shapeTag,bindEvent,actionInfo)\n')
    f.write('def BindShapeMouseEvent(uiName,drawCanvasName,shapeTag,bindEvent,actionInfo):\n')
    f.write('    """'+Language.G_Language[864]+'"""\n')
    
    f.write('    if uiName in G_CanvasShapeDictionary:\n')
    f.write('        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('        if bindEvent not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][bindEvent] = []\n')
    f.write('        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][bindEvent].append(actionInfo)\n')
    f.write('        drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('        if bindEvent == "MouseEnter":\n')
    if runMode == 'android':
        f.write('            drawCanvas.tag_bind(uiName,drawCanvasName,shapeTag, "MouseEnter",Shape_MouseEvent)\n')
    else:
        f.write('            drawCanvas.tag_bind(shapeTag, "<Any-Enter>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="MouseEnter"))\n')
    f.write("            if G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][0] == 'button':\n")
    f.write('                TextTag = shapeTag+"_text"\n')
    if runMode == 'android':
        f.write('                drawCanvas.tag_bind(uiName,drawCanvasName,TextTag, "MouseEnter",Shape_MouseEvent)\n')
    else:
        f.write('                drawCanvas.tag_bind(TextTag, "<Any-Enter>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="MouseEnter"))\n')
    f.write('        elif bindEvent == "MouseLeave":\n')
    if runMode == 'android':
        f.write('            drawCanvas.tag_bind(uiName,drawCanvasName,shapeTag, "MouseLeave",Shape_MouseEvent)\n')
    else:
        f.write('            drawCanvas.tag_bind(shapeTag, "<Any-Leave>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="MouseLeave"))\n')
    f.write("            if G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][0] == 'button':\n")
    f.write('                TextTag = shapeTag+"_text"\n')
    if runMode == 'android':
        f.write('                drawCanvas.tag_bind(uiName,drawCanvasName,TextTag, "MouseLeave",Shape_MouseEvent)\n')
    else:
        f.write('                drawCanvas.tag_bind(TextTag, "<Any-Leave>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="MouseLeave"))\n')
    f.write('        elif bindEvent == "ButtonDown":\n')
    if runMode == 'android':
        f.write('            drawCanvas.tag_bind(uiName,drawCanvasName,shapeTag, "ButtonDown",Shape_MouseEvent)\n')
    else:
        f.write('            drawCanvas.tag_bind(shapeTag, "<Button-1>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="ButtonDown"))\n')
    f.write("            if G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][0] == 'button':\n")
    f.write('                TextTag = shapeTag+"_text"\n')
    if runMode == 'android':
        f.write('                drawCanvas.tag_bind(uiName,drawCanvasName,TextTag, "ButtonDown",Shape_MouseEvent)\n')
    else:
        f.write('                drawCanvas.tag_bind(TextTag, "<Button-1>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="ButtonDown"))\n')
    f.write('        elif bindEvent == "ButtonMotion":\n')
    if runMode == 'android':
        f.write('            drawCanvas.tag_bind(uiName,drawCanvasName,shapeTag, "ButtonMotion",Shape_MouseEvent)\n')
    else:
        f.write('            drawCanvas.tag_bind(shapeTag, "<B1-Motion>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="ButtonMotion"))\n')
    f.write("            if G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][0] == 'button':\n")
    f.write('                TextTag = shapeTag+"_text"\n')
    if runMode == 'android':
        f.write('                drawCanvas.tag_bind(uiName,drawCanvasName,TextTag, "ButtonMotion",Shape_MouseEvent)\n')
    else:
        f.write('                drawCanvas.tag_bind(TextTag, "<B1-Motion>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="ButtonMotion"))\n')
    f.write('        elif bindEvent == "ButtonUp":\n')
    if runMode == 'android':
        f.write('            drawCanvas.tag_bind(uiName,drawCanvasName,shapeTag, "ButtonUp",Shape_MouseEvent)\n')
    else:
        f.write('            drawCanvas.tag_bind(shapeTag, "<ButtonRelease-1>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="ButtonUp"))\n')
    f.write("            if G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][0] == 'button':\n")
    f.write('                TextTag = shapeTag+"_text"\n')
    if runMode == 'android':
        f.write('                drawCanvas.tag_bind(uiName,drawCanvasName,TextTag, "ButtonUp",Shape_MouseEvent)\n')
    else:
        f.write('                drawCanvas.tag_bind(TextTag, "<ButtonRelease-1>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="ButtonUp"))\n')
    f.write('        elif bindEvent == "DoubleClick":\n')
    if runMode == 'android':
        f.write('            drawCanvas.tag_bind(uiName,drawCanvasName,shapeTag, "DoubleClick",Shape_MouseEvent)\n')
    else:
        f.write('            drawCanvas.tag_bind(shapeTag, "<Double-1>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="DoubleClick"))\n')
    f.write("            if G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][0] == 'button':\n")
    f.write('                TextTag = shapeTag+"_text"\n')
    if runMode == 'android':
        f.write('                drawCanvas.tag_bind(uiName,drawCanvasName,TextTag, "DoubleClick",Shape_MouseEvent)\n')
    else:
        f.write('                drawCanvas.tag_bind(TextTag, "<Double-1>",EventFunction_Adaptor(Shape_MouseEvent,uiName = uiName,canvasName = drawCanvasName,shapeTag=shapeTag,eventName="DoubleClick"))\n')

#写入画板动作
def WriteDoCanvasRecordFunctions_Mobile(f):
    #f.write(Language.G_Language[1234]+'\n')
    f.write("def DoCanvasRecord(drawCanvas,ShapeType,x,y,x2,y2,fillcolor,outlinecolor,fillwidth,roundRadius,shapeTag):\n")
    f.write('    """'+Language.G_Language[1234]+'"""\n')
    f.write('    center_x = (x + x2)/2\n')
    f.write('    center_y = (y + y2)/2\n')
    f.write('    width = x2 - x\n')
    f.write('    height = y2 - y\n')
    f.write('    if  drawCanvas != None:\n')
    f.write("        if ShapeType == 'line' or ShapeType == 'pen'  :\n")
    f.write('            drawCanvas.create_line(x, y, x2, y2,fill=fillcolor, width = fillwidth,tag = shapeTag)\n')
    f.write("        elif ShapeType == 'arrow':\n")
    f.write('            drawCanvas.create_line(x, y, x2, y2,arrow=tkinter.LAST,fill=fillcolor, width = fillwidth,tag = shapeTag)\n')
    f.write("        elif ShapeType == 'rect':\n")
    f.write('            drawCanvas.create_rectangle(x, y, x2, y2,fill=fillcolor,outline=outlinecolor, width = fillwidth,tag = shapeTag)\n')
    f.write("        elif ShapeType == 'roundrect':\n")
    f.write('            width = x2 - x\n')
    f.write('            height = y2 - y\n')
    f.write('            if roundRadius == 0:\n')
    f.write('               roundRadius = int(0.2 * height)\n')
    f.write('            if roundRadius == 0:\n')
    f.write('                drawCanvas.create_rectangle(x, y, x + width,y + height,fill=fillcolor, outline=outlinecolor,width = fillwidth,tag=shapeTag)\n')
    f.write('            else:\n')
    f.write('                drawCanvas.create_rectangle(x+roundRadius,y+roundRadius,x+width-roundRadius, y+height-roundRadius,fill=fillcolor, width = 0,tag=shapeTag)\n')
    f.write('                drawCanvas.create_rectangle(x+roundRadius,y,x+width-roundRadius,y+roundRadius,fill=fillcolor, width=0,tag=shapeTag)\n')
    f.write('                drawCanvas.create_rectangle(x+roundRadius,y+height-roundRadius,x+width-roundRadius,y+height,fill=fillcolor, width=0,tag=shapeTag)\n')
    f.write('                drawCanvas.create_rectangle(x,y+roundRadius,x+roundRadius,y+height-roundRadius,fill=fillcolor,width=0,tag=shapeTag)\n')
    f.write('                drawCanvas.create_rectangle(x+width-roundRadius,y+roundRadius,x+width,y+height-roundRadius,fill=fillcolor,width=0,tag=shapeTag)\n')
    f.write('            OutLineTag = shapeTag+"_outline"\n')
    f.write('            if fillwidth > 0:\n')
    f.write('                drawCanvas.create_line(x+roundRadius,y,x+width-roundRadius,y,fill=outlinecolor,tag=OutLineTag,width=fillwidth)\n')
    f.write('                drawCanvas.create_line(x+roundRadius,y+height,x+width-roundRadius,y+height,fill=outlinecolor,tag=OutLineTag,width=fillwidth)\n')
    f.write('                drawCanvas.create_line(x,y+roundRadius,x,y+height-roundRadius,fill=outlinecolor,tag=OutLineTag,width=fillwidth)\n')
    f.write('                drawCanvas.create_line(x+width,y+roundRadius,x+width,y+height-roundRadius,fill=outlinecolor,tag=OutLineTag,width=fillwidth)\n')
    f.write('            drawCanvas.create_oval(x,y,x+2*roundRadius,y+2*roundRadius,fill=fillcolor,outline=fillcolor,width=0,tag=shapeTag)\n')
    f.write('            drawCanvas.create_oval(x+width-2*roundRadius,y,x+width,y+2*roundRadius,fill=fillcolor,outline=fillcolor,width=0,tag=shapeTag)\n')
    f.write('            drawCanvas.create_oval(x+width-2*roundRadius,y+height-2*roundRadius,x+width,y+height,fill=fillcolor,outline=fillcolor,width=0,tag=shapeTag)\n')
    f.write('            drawCanvas.create_oval(x,y+height-2*roundRadius,x+2*roundRadius,y+height,fill=fillcolor,outline=fillcolor,width=0,tag=shapeTag)\n')
    f.write('            OutArcTag = shapeTag+"_arc"\n')
    f.write('            if fillwidth > 0:\n')
    f.write('                drawCanvas.create_arc(x,y,x+2*roundRadius,y+2*roundRadius,startAngle=90,endAngle=180,outline=outlinecolor,width=fillwidth, tag=OutArcTag)\n')
    f.write('                drawCanvas.create_arc(x+width-2*roundRadius,y,x+width,y+2*roundRadius,startAngle=0,endAngle=90,outline=outlinecolor,width=fillwidth, tag=OutArcTag)\n')
    f.write('                drawCanvas.create_arc(x+width-2*roundRadius,y+height-2*roundRadius,x+width,y+height,startAngle=-90,endAngle=0,outline=outlinecolor,width=fillwidth, tag=OutArcTag)\n')
    f.write('                drawCanvas.create_arc(x,y+height-2*roundRadius,x+2*roundRadius,y+height,startAngle=180,endAngle=270,outline=outlinecolor,width=fillwidth, tag=OutArcTag)\n')
    f.write("        elif ShapeType == 'triangle':\n")
    f.write('            points = [\n')
    f.write('                #顶点\n')
    f.write('                x,\n')
    f.write('                y + height,\n')
    f.write('                #右上点\n')
    f.write('                x + int(width/2),\n')
    f.write('                y,\n')
    f.write('                #左下点\n')
    f.write('                x + width,\n')
    f.write('                y + height,\n')
    f.write('                #顶点\n')
    f.write('                x,\n')
    f.write('                y + height,\n')
    f.write('                ]\n')
    f.write('            # 根据点来连线\n')
    f.write('            lastDraw = drawCanvas.create_polygon(\n')
    f.write('                    points,\n')
    f.write('                    fill=fillcolor,\n')
    f.write('                    outline=outlinecolor, \n')
    f.write('                    width= fillwidth,\n')
    f.write('                    tag = shapeTag)\n')
    f.write("        elif ShapeType == 'diamond':\n")
    f.write('            points = [\n')
    f.write('                #左上点\n')
    f.write('                x,\n')
    f.write('                y + int(height/2),\n')
    f.write('                #右上点\n')
    f.write('                x + int(width/2),\n')
    f.write('                y,\n')
    f.write('                #左下点\n')
    f.write('                x + width,\n')
    f.write('                y + int(height/2),\n')
    f.write('                #顶点\n')
    f.write('                x + int(width/2),\n')
    f.write('                y + height,\n')
    f.write('                ]\n')
    f.write('            # 根据点来连线\n')
    f.write('            lastDraw = drawCanvas.create_polygon(\n')
    f.write('                    points,\n')
    f.write('                    fill=fillcolor,\n')
    f.write('                    outline=outlinecolor, \n')
    f.write('                    width= fillwidth,\n')
    f.write('                    tag = shapeTag)\n')
    f.write("        elif ShapeType == 'circle':\n")
    f.write('            drawCanvas.create_oval(x, y, x2, y2,fill=fillcolor,outline=outlinecolor, width = fillwidth,tag = shapeTag)\n')
    f.write("        elif ShapeType == 'cylinder':\n")
    f.write('            OvalHeight = int(height * 0.2)\n')
    f.write('            OvalHeight_Half = int(height * 0.1)\n')
    f.write('            drawCanvas.create_oval(x,y2-OvalHeight,x2,y2,fill=fillcolor,outline=outlinecolor,width = fillwidth,tag=shapeTag)\n')
    f.write('            drawCanvas.create_rectangle(x,y+OvalHeight_Half,x2,y2-OvalHeight_Half,fill=fillcolor,width=0,tag=shapeTag) \n')
    f.write('            drawCanvas.create_oval(x,y,x2,y+OvalHeight,fill=fillcolor,outline=outlinecolor,width = fillwidth,tag=shapeTag)\n')
    #f.write('            drawCanvas.create_line(x,y+OvalHeight_Half,x,y2-OvalHeight_Half,fill=outlinecolor,width = fillwidth,tag=shapeTag)\n')
    #f.write('            drawCanvas.create_line(x2,y+OvalHeight_Half,x2,y2-OvalHeight_Half,fill=outlinecolor,width = fillwidth,tag=shapeTag)\n')
    f.write('            drawCanvas.create_rectangle(x-fillwidth-1,y+OvalHeight_Half,x,y2-OvalHeight_Half,fill=outlinecolor,width=0,tag=shapeTag)\n')
    f.write('            drawCanvas.create_rectangle(x2,y+OvalHeight_Half,x2+fillwidth,y2-OvalHeight_Half,fill=outlinecolor,width=0,tag=shapeTag)\n')
    f.write("        elif ShapeType == 'star':\n")
    f.write('            center_x = (x + x2)/2\n')
    f.write('            center_y = (y + y2)/2\n')
    f.write('            rx = (x2 - x)/2\n')
    f.write('            ry = (y2 - y)/2\n')
    f.write('            points = [\n')
    f.write('                center_x - int(rx * math.sin(2 * math.pi / 5)),\n')
    f.write('                center_y - int(ry * math.cos(2 * math.pi / 5)),\n')
    f.write('                center_x + int(rx * math.sin(2 * math.pi / 5)),\n')
    f.write('                center_y - int(ry * math.cos(2 * math.pi / 5)),\n')
    f.write('                center_x - int(rx * math.sin(math.pi / 5)),\n')
    f.write('                center_y + int(ry * math.cos(math.pi / 5)),\n')
    f.write('                center_x,\n')
    f.write('                center_y - ry,\n')
    f.write('                center_x + int(rx * math.sin(math.pi / 5)),\n')
    f.write('                center_y + int(ry * math.cos(math.pi / 5)),\n')
    f.write('                ]\n')
    f.write('            lastDraw = drawCanvas.create_polygon(\n')
    f.write('                    points,\n')
    f.write('                    fill=fillcolor,\n')
    f.write('                    outline=outlinecolor, \n')
    f.write('                    width= fillwidth,\n')
    f.write('                    tag = shapeTag)\n')
    f.write("def DrawLine(uiName,drawCanvasName,x1,y1,x2,y2,color,width=1,dash=(0,0),shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1450]+'"""\n')
    
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'line\',x1,y1,x2,y2,color,color,width,dash[0],dash[1]]\n')
    f.write("    DoCanvasRecord(drawCanvas,'line',x1,y1,x2,y2,color,color,width,0,shapeTag=shapeTag)\n")

    f.write("def DrawArrow(uiName,drawCanvasName,x1,y1,x2,y2,color,width=1,dash=(0,0),shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1451]+'"""\n')
    
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'arrow\',x1,y1,x2,y2,color,color,width,dash[0],dash[1]]\n')
    f.write("    DoCanvasRecord(drawCanvas,'arrow',x1,y1,x2,y2,color,color,width,0,shapeTag=shapeTag)\n")
    f.write("def DrawTriangle(uiName,drawCanvasName,direction,x1,y1,x2,y2,color,outlinecolor='#FFFFFF',outlinewidth=0,dash=(0,0),shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1452]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write('    TriangleType = "triangle_up"\n')
    f.write('    if direction == "down":\n')
    f.write('        TriangleType = "triangle_down"\n')
    f.write('    if direction == "left":\n')
    f.write('        TriangleType = "triangle_left"\n')
    f.write('    if direction == "right":\n')
    f.write('        TriangleType = "triangle_right"\n')
    f.write('    G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[TriangleType,x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash[0],dash[1]]\n')
    f.write("    DoCanvasRecord(drawCanvas,TriangleType,x1,y1,x2,y2,color,outlinecolor,outlinewidth,0,shapeTag=shapeTag)\n")
    f.write("def DrawRectangle(uiName,drawCanvasName,x1,y1,x2,y2,color,outlinecolor='#FFFFFF',outlinewidth=0,dash=(0,0),shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1453]+'"""\n')
    
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'rect\',x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash[0],dash[1]]\n')
    f.write("    DoCanvasRecord(drawCanvas,'rect',x1,y1,x2,y2,color,outlinecolor,outlinewidth,0,shapeTag=shapeTag)\n")
    f.write("def DrawRoundedRectangle(uiName,drawCanvasName,x1,y1,x2,y2,color,outlinecolor='#FFFFFF',outlinewidth=0,dash=(0,0),roundRadius=10,shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1462]+'"""\n')
    
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'roundrect\',x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash[0],dash[1]]\n')
    f.write("    DoCanvasRecord(drawCanvas,'roundrect',x1,y1,x2,y2,color,outlinecolor,outlinewidth,roundRadius,shapeTag=shapeTag)\n")
    f.write("def DrawCircle(uiName,drawCanvasName,x1,y1,x2,y2,color,outlinecolor='#FFFFFF',outlinewidth=0,dash=(0,0),shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1454]+'"""\n')
    
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'circle\',x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash[0],dash[1]]\n')
    f.write("    DoCanvasRecord(drawCanvas,'circle',x1,y1,x2,y2,color,outlinecolor,outlinewidth,0,shapeTag=shapeTag)\n")
    f.write("def DrawDiamond(uiName,drawCanvasName,x1,y1,x2,y2,color,outlinecolor='#FFFFFF',outlinewidth=0,dash=(0,0),shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1455]+'"""\n')
    
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'diamond\',x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash[0],dash[1]]\n')
    f.write("    DoCanvasRecord(drawCanvas,'diamond',x1,y1,x2,y2,color,outlinecolor,outlinewidth,0,shapeTag=shapeTag)\n")
    f.write("def DrawCylinder(uiName,drawCanvasName,x1,y1,x2,y2,color,outlinecolor='#FFFFFF',outlinewidth=0,dash=(0,0),shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1456]+'"""\n')
    
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'cylinder\',x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash[0],dash[1]]\n')
    f.write("    DoCanvasRecord(drawCanvas,'cylinder',x1,y1,x2,y2,color,outlinecolor,outlinewidth,0,shapeTag=shapeTag)\n")
    f.write("def DrawStar(uiName,drawCanvasName,x1,y1,x2,y2,color,outlinecolor='#FFFFFF',outlinewidth=0,dash=(0,0),shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1457]+'"""\n')
    
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'star\',x1,y1,x2,y2,color,outlinecolor,outlinewidth,dash[0],dash[1]]\n')
    f.write("    DoCanvasRecord(drawCanvas,'star',x1,y1,x2,y2,color,outlinecolor,outlinewidth,0,shapeTag=shapeTag)\n")
    f.write("def DrawText(uiName,drawCanvasName,x,y,text,textFont=None,color='#FFFFFF',anchor='nw',shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1458]+'"""\n')
    
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'text\',x,y,x,y,text,textFont,color]\n')
    f.write("    drawCanvas.create_text(x, y,fill=color,text=text,font = textFont,anchor=anchor,tag=shapeTag)\n")
    # if androidTTFFile and (androidTTFFile.find('.ttf') > 0 or androidTTFFile.find('.otf') > 0):
    #     f.write('    androidFont = GameLib.Res.GetFont("'+androidTTFFile+'",sizetext)\n')
    #     f.write("    drawCanvas.create_text_simple(x,y,x,y,text=text,font = androidFont,anchor=anchor,tag = shapeTag)\n")
    # else:
    #     f.write("    drawCanvas.create_text(x,y,x,y,text=text,font = textFont,anchor=anchor,tag = shapeTag)\n")
    f.write("def DrawImage(uiName,drawCanvasName,x1,y1,x2,y2,imagefile,shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1459]+'"""\n')
    
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    if drawCanvasName not in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write('    if shapeTag not in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')
    f.write('        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[\'image\',x1,y1,x2,y2,imagefile]\n')
    f.write("    drawCanvas.create_image(x1,y1,x2,y2,imagefile=imagefile,tag=shapeTag)\n")
    f.write("def DrawButton(uiName,drawCanvasName,x1,y1,x2,y2,text='',textcolor='#000000',textFont = None,fillcolor='#FFFFFF',outlinecolor='#FFFFFF',outlinewidth=0,dash=(0,0),shapeTag=''):\n")
    f.write('    """'+Language.G_Language[1461]+'"""\n')
    
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write('    center_x = (x1 + x2)/2\n')
    f.write('    center_y = (y1 + y2)/2\n')
    f.write("    oval_rx = 20\n")
    f.write("    dash1=dash[0],dash2=dash[1]\n")
    f.write("    if  dash1 > 0 :\n")
    f.write("        drawCanvas.create_oval(x1,y1,x1+2*oval_rx,y2,fill=fillcolor,outline=outlinecolor,dash=(dash1,dash2),width = outlinewidth,tag=shapeTag)\n")
    f.write("        drawCanvas.create_oval(x2-2*oval_rx,y1,x2,y2,fill=fillcolor,outline=outlinecolor,dash=(dash1,dash2),width = outlinewidth,tag=shapeTag)\n")
    f.write("        drawCanvas.create_rectangle(x1+oval_rx, y1, x2-oval_rx, y2,fill=fillcolor,outline=outlinecolor,dash=(dash1,dash2), width = outlinewidth,tag=shapeTag)\n")
    f.write("        drawCanvas.create_rectangle(x1+oval_rx, y1+outlinewidth, x2-oval_rx, y2-outlinewidth+1,fill=fillcolor, width = 0,tag=shapeTag)\n")
    f.write("        drawCanvas.create_line(x1+oval_rx, y1+outlinewidth-1, x1+oval_rx, y2-outlinewidth+1,fill=fillcolor,width = outlinewidth,tag=shapeTag)\n")
    f.write("        drawCanvas.create_line(x2-oval_rx, y1+outlinewidth-1, x2-oval_rx, y2-outlinewidth+1,fill=fillcolor,width = outlinewidth,tag=shapeTag)\n")
    f.write("    else:\n")
    f.write("        drawCanvas.create_oval(x1,y1,x1+2*oval_rx,y2,fill=fillcolor,outline=outlinecolor,width = outlinewidth,tag=shapeTag)\n")
    f.write("        drawCanvas.create_oval(x2-2*oval_rx,y1,x2,y2,fill=fillcolor,outline=outlinecolor,width = outlinewidth,tag=shapeTag)\n")
    f.write("        drawCanvas.create_rectangle(x1+oval_rx, y1, x2-oval_rx, y2,fill=fillcolor,outline=outlinecolor, width = outlinewidth,tag=shapeTag)\n")
    f.write("        drawCanvas.create_rectangle(x1+oval_rx, y1+outlinewidth, x2-oval_rx, y2-outlinewidth+1,fill=fillcolor, width = 0,tag=shapeTag)\n")
    f.write("        drawCanvas.create_line(x1+oval_rx, y1+outlinewidth-1, x1+oval_rx, y2-outlinewidth+1,fill=fillcolor,width = outlinewidth,tag=shapeTag)\n")
    f.write("        drawCanvas.create_line(x2-oval_rx, y1+outlinewidth-1, x2-oval_rx, y2-outlinewidth+1,fill=fillcolor,width = outlinewidth,tag=shapeTag)\n")
    f.write('    if len(text) > 0:\n')
    f.write("        drawCanvas.create_text(center_x, center_y,text=text,fill=textcolor,anchor='center',tag=shapeTag+\"_text\")\n")
    f.write("def EraserCanvas(uiName,drawCanvasName,x1,y1,x2,y2):\n")
    f.write('    """'+Language.G_Language[1460]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('    if drawCanvas is None:\n')
    f.write('        return\n')
    f.write("    bgcolor = drawCanvas.cget('bg')\n")
    f.write("    DoCanvasRecord(drawCanvas,'eraser',x1,y1,x2,y2,bgcolor,bgcolor,0,0,shapeTag=shapeTag)\n")
#写入设置图形矩形
def WriteReDrawCanvasRecordFunction_Mobile(f):
    f.write('def ReDrawCanvasRecord(uiName,ForceReDraw=False):\n')
    f.write('    pass\n')
    f.write('def ResizeAllChart(uiName):\n')
    f.write('    """'+Language.G_Language[759]+'"""\n')
    f.write('    pass\n')
#写入画板动作
def WriteLoadCanvasRecordFunctions_Mobile(f,exportMode,androidTTFFile):
    f.write('def checkPtInRect(x,y,left,right,top,bottom):\n')
    f.write('    if x < left:return 0\n')
    f.write('    if x > right:return 0\n')
    f.write('    if y < top:return 0\n')
    f.write('    if y > bottom:return 0\n')
    f.write('    return 1\n')
    f.write('def Shape_MouseEvent(x,y,uiName,canvasName,shapeTag,eventName):\n')
    
    f.write("    if eventName == 'MouseLeave':\n")
    f.write('        x1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][1]\n')
    f.write('        y1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][2]\n')
    f.write('        x2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][3]\n')
    f.write('        y2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][4]\n')
    f.write('        borderwidth = 0\n')
    f.write("        if G_CanvasShapeDictionary[uiName][canvasName][shapeTag][0] == 'button':\n")
    f.write('            borderwidth = 1 + G_CanvasShapeDictionary[uiName][canvasName][shapeTag][10]\n')
    f.write('        if checkPtInRect(x,y,x1+borderwidth,x2-borderwidth,y1+borderwidth,y2-borderwidth) == 1:\n')
    f.write('            return \n')
    f.write('    if shapeTag not in G_CanvasEventDictionary[uiName][canvasName]:\n')
    f.write('        return\n')
    f.write('    if eventName not in G_CanvasEventDictionary[uiName][canvasName][shapeTag]:\n')
    f.write('        return\n')
    f.write('    for actionInfo in G_CanvasEventDictionary[uiName][canvasName][shapeTag][eventName]:\n')
    f.write('        if actionInfo[0] == "SetShapeRect":\n')
    f.write('            SetShapeRect(uiName ,canvasName,actionInfo[1],actionInfo[2],actionInfo[3],actionInfo[4],actionInfo[5])\n')
    f.write('        elif actionInfo[0] == "SetFillColor":\n')
    f.write('            SetShapeFillColor(uiName ,canvasName,actionInfo[1],actionInfo[2])\n')
    f.write('        elif actionInfo[0] == "SetOutlineColor":\n')
    f.write('            SetShapeOutlineColor(uiName ,canvasName,actionInfo[1],actionInfo[2])\n')
    f.write('        elif actionInfo[0] == "ChangeImage":\n')
    f.write('            SetShapeImage(uiName ,canvasName,actionInfo[1],actionInfo[2])\n')
    f.write('        elif actionInfo[0] == "ChangeText":\n')
    f.write('            SetShapeText(uiName ,canvasName,actionInfo[1],actionInfo[2],actionInfo[3])\n')
    f.write('        elif actionInfo[0] == "DeleteShape":\n')
    f.write('            SetShapeText(uiName ,canvasName,actionInfo[1])\n')
    f.write('        elif actionInfo[0] == "JumpToUI":\n')
    f.write('            UIPath, UIFile = os.path.split(actionInfo[2])\n')
    f.write('            UIName, extension = os.path.splitext(UIFile)\n')
    f.write('            if len(UIPath) > 0:\n')
    f.write('                import sys\n')
    f.write('                sys.path.append(UIPath)\n')
    f.write('            GoToUIDialog(uiName,UIName)\n')
    f.write('        elif actionInfo[0] == "LoadUI":\n')
    f.write('            WidgetName = actionInfo[2]\n')
    f.write('            UIPath, UIFile = os.path.split(actionInfo[3])\n')
    f.write('            UIName, extension = os.path.splitext(UIFile)\n')
    f.write('            if len(UIPath) > 0:\n')
    f.write('                import sys\n')
    f.write('                sys.path.append(UIPath)\n')
    f.write('            if WidgetName == "Form_1":\n')
    f.write('                WidgetName == "root"\n')
    f.write('            LoadUIDialog(uiName,WidgetName,UIName)\n')
    f.write('        elif actionInfo[0] == "DeleteShape":\n')
    f.write('            DeleteShape(uiName ,canvasName,actionInfo[1])\n')
    f.write('        elif actionInfo[0] == "OnSwitch":\n')
    f.write('            OnSwitch(uiName ,canvasName,actionInfo[1],actionInfo)\n')
    f.write('        elif actionInfo[0] == "OnExpandOrShrink":\n')
    f.write('            OnExpandOrShrink(uiName ,canvasName,actionInfo[1],actionInfo)\n')
    f.write('        elif actionInfo[0] == "CallFunction":\n')
    f.write('            if actionInfo[1]:\n')
    f.write('                Event = PyMeEvent(x,y,shapeTag)\n')
    f.write('                if actionInfo[2]:\n')
    f.write('                   actionInfo[1](Event,uiName,canvasName,actionInfo[2])\n')
    f.write('                else:\n')
    f.write('                   actionInfo[1](Event,uiName,canvasName)\n')
    #f.write(Language.G_Language[1235]+'\n')
    f.write('def LoadCanvasRecord(uiName):\n')
    f.write('    """'+Language.G_Language[1235]+'"""\n')
    f.write('    drawCanvasName = None\n')
    f.write('    drawCanvas = None\n')
    
    f.write('    def Hex_to_RGB(hex):\n')
    f.write('        r = int(hex[1:3],16)\n')
    f.write('        g = int(hex[3:5],16)\n')
    f.write('        b = int(hex[5:7], 16)\n')
    f.write('        return (r,g,b)\n')
    if not exportMode:
        f.write('    canvasFile = GameLib.APKResDir + "\\\\res\\\\" + uiName + ".cav"\n')
    else:
        f.write('    resdir = os.path.join(GameLib.APKResDir,"res")\n')
        f.write('    canvasFile = os.path.join(resdir,uiName + ".cav")\n')
        f.write('    canvasFile = canvasFile.replace("\\\\","//")\n')
    f.write('    if os.path.exists(canvasFile) == True:\n')
    f.write("        f = open(canvasFile,encoding='utf-8')\n")
    f.write('        line ="" \n')
    f.write('        while True:\n')
    f.write('            line = f.readline()\n')
    f.write('            if not line:\n')
    f.write('                break\n')
    f.write('            text = line.strip()\n')
    f.write('            if not text:\n')
    f.write('                continue\n')
    f.write("            if text.find('Canvas:') >= 0:\n")
    f.write("                splitArray = text.split(':')\n")
    f.write('                drawCanvasName = splitArray[1].strip()\n')
    f.write('                drawCanvas = GetElement(uiName,drawCanvasName)\n')
    f.write('                G_CanvasShapeDictionary[uiName][drawCanvasName] = {}\n')
    f.write('                G_CanvasFontDictionary[uiName][drawCanvasName] = []\n')
    f.write('                G_CanvasImageDictionary[uiName][drawCanvasName] = []\n')
    f.write('                G_CanvasPointDictionary[uiName][drawCanvasName] = {}\n')
    f.write('                G_CanvasEventDictionary[uiName][drawCanvasName] = {}\n')
    f.write('                continue\n')
    f.write("            elif text.find(',') >= 0:\n")
    f.write('                if drawCanvas != None:\n')
    f.write("                    splitArray = text.split(',')\n")
    f.write('                    ShapeType = splitArray[0]\n')
    f.write('                    if ShapeType == \'image\':\n')
    f.write("                        if splitArray[1].find('.') > 0:\n")
    f.write('                            x1 = float(splitArray[1])\n')
    f.write('                        else:\n')
    f.write('                            x1 = int(splitArray[1])\n')
    f.write("                        if splitArray[2].find('.') > 0:\n")
    f.write('                            y1 = float(splitArray[2])\n')
    f.write('                        else:\n')
    f.write('                            y1 = int(splitArray[2])\n')
    f.write("                        if splitArray[3].find('.') > 0:\n")
    f.write('                            x2 = float(splitArray[3])\n')
    f.write('                        else:\n')
    f.write('                            x2 = int(splitArray[3])\n')
    f.write("                        if splitArray[4].find('.') > 0:\n")
    f.write('                            y2 = float(splitArray[4])\n')
    f.write('                        else:\n')
    f.write('                            y2 = int(splitArray[4])\n')
    f.write('                        w = x2 - x1\n')
    f.write('                        h = y2 - y1\n')
    f.write('                        fill = splitArray[5]\n')
    f.write('                        outline = splitArray[6]\n')
    f.write('                        width = int(splitArray[7])\n')
    f.write('                        dashx = int(splitArray[8])\n')
    f.write('                        dashy = int(splitArray[9])\n')
    f.write('                        imagefile = splitArray[10]\n')
    f.write('                        newImage = None\n')
    f.write("                        newtext = ''\n")
    f.write('                        textFont = None\n')
    f.write("                        shapeTag = ''\n")
    f.write('                        imagefile = splitArray[10]\n')
    f.write('                        if len(splitArray) > 12:\n')
    f.write('                            shapeTag = splitArray[11]\n')
    f.write('                            G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[ShapeType,x1,y1,x2,y2,imagefile]\n')
    f.write('                        drawCanvas.create_image(x1,y1,x2,y2,imagefile=imagefile,tag=shapeTag)\n')
    f.write('                    elif ShapeType == \'roundrect\':\n')
    f.write("                        if splitArray[1].find('.') > 0:\n")
    f.write('                            x1 = float(splitArray[1])\n')
    f.write('                        else:\n')
    f.write('                            x1 = int(splitArray[1])\n')
    f.write("                        if splitArray[2].find('.') > 0:\n")
    f.write('                            y1 = float(splitArray[2])\n')
    f.write('                        else:\n')
    f.write('                            y1 = int(splitArray[2])\n')
    f.write("                        if splitArray[3].find('.') > 0:\n")
    f.write('                            x2 = float(splitArray[3])\n')
    f.write('                        else:\n')
    f.write('                            x2 = int(splitArray[3])\n')
    f.write("                        if splitArray[4].find('.') > 0:\n")
    f.write('                            y2 = float(splitArray[4])\n')
    f.write('                        else:\n')
    f.write('                            y2 = int(splitArray[4])\n')
    f.write('                        w = x2 - x1\n')
    f.write('                        h = y2 - y1\n')
    f.write('                        fill = splitArray[5]\n')
    f.write('                        outline = splitArray[6]\n')
    f.write('                        width = int(splitArray[7])\n')
    f.write('                        dashx = int(splitArray[8])\n')
    f.write('                        dashy = int(splitArray[9])\n')
    f.write('                        roundradius = int(splitArray[10])\n')
    f.write('                        shapeTag = splitArray[11]\n')
    f.write('                        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[ShapeType,x1,y1,x2,y2,roundradius]\n')
    f.write('                        DoCanvasRecord(drawCanvas,ShapeType,x1,y1,x2,y2,fill,outline,width,roundradius,shapeTag)\n')
    f.write('                    elif ShapeType == \'text\':\n')
    f.write("                        if splitArray[1].find('.') > 0:\n")
    f.write('                            x1 = float(splitArray[1])\n')
    f.write('                        else:\n')
    f.write('                            x1 = int(splitArray[1])\n')
    f.write("                        if splitArray[2].find('.') > 0:\n")
    f.write('                            y1 = float(splitArray[2])\n')
    f.write('                        else:\n')
    f.write('                            y1 = int(splitArray[2])\n')
    f.write("                        if splitArray[3].find('.') > 0:\n")
    f.write('                            x2 = float(splitArray[3])\n')
    f.write('                        else:\n')
    f.write('                            x2 = int(splitArray[3])\n')
    f.write("                        if splitArray[4].find('.') > 0:\n")
    f.write('                            y2 = float(splitArray[4])\n')
    f.write('                        else:\n')
    f.write('                            y2 = int(splitArray[4])\n')
    f.write('                        w = x2 - x1\n')
    f.write('                        h = y2 - y1\n')
    f.write('                        fill = splitArray[5]\n')
    f.write('                        outline = splitArray[6]\n')
    f.write('                        width = int(splitArray[7])\n')
    f.write('                        dashx = int(splitArray[8])\n')
    f.write('                        dashy = int(splitArray[9])\n')
    f.write('                        imagefile = ""\n')
    f.write('                        newImage = None\n')
    f.write("                        shapeTag = ''\n")
    f.write('                        newtext = splitArray[10]\n')
    f.write('                        familytext = splitArray[11]\n')
    f.write('                        sizetext = int(splitArray[12])\n')
    f.write('                        weighttext = splitArray[13]\n')
    f.write('                        slanttext = splitArray[14]\n')
    f.write('                        underline = int(splitArray[15])\n')
    f.write('                        overstrike = int(splitArray[16])\n')
    f.write('                        if len(splitArray) > 18:\n')
    f.write('                            shapeTag = splitArray[17]\n')
    if androidTTFFile and (androidTTFFile.find('.ttf') > 0 or androidTTFFile.find('.otf') > 0):
        f.write('                        androidFont = GameLib.Res.GetFont("'+androidTTFFile+'",sizetext)\n')
        f.write("                        drawCanvas.create_text_simple(x1,y1,x2,y2,text=newtext,anchor='nw',fill=fill,font = androidFont,tag = shapeTag)\n")
        f.write('                        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[ShapeType,x1,y1,x2,y2,newtext,androidFont,fill]\n')
    else:
        f.write("                        drawCanvas.create_text(x1,y1,x2,y2,text=newtext,anchor='nw',fill=fill,familytext = familytext,sizetext = sizetext,weighttext = weighttext,slanttext = slanttext,underline = underline,overstrike = overstrike,tag = shapeTag)\n")
        f.write('                        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[ShapeType,x1,y1,x2,y2,newtext,None,fill]\n')
    
    f.write("                    elif ShapeType == 'button':\n")
    f.write("                        if splitArray[1].find('.') > 0:\n")
    f.write('                            x1 = float(splitArray[1])\n')
    f.write('                        else:\n')
    f.write('                            x1 = int(splitArray[1])\n')
    f.write("                        if splitArray[2].find('.') > 0:\n")
    f.write('                            y1 = float(splitArray[2])\n')
    f.write('                        else:\n')
    f.write('                            y1 = int(splitArray[2])\n')
    f.write("                        if splitArray[3].find('.') > 0:\n")
    f.write('                            x2 = float(splitArray[3])\n')
    f.write('                        else:\n')
    f.write('                            x2 = int(splitArray[3])\n')
    f.write("                        if splitArray[4].find('.') > 0:\n")
    f.write('                            y2 = float(splitArray[4])\n')
    f.write('                        else:\n')
    f.write('                            y2 = int(splitArray[4])\n')
    f.write('                        w = x2 - x1\n')
    f.write('                        h = y2 - y1\n')
    f.write('                        fill = splitArray[5]\n')
    f.write('                        outline = splitArray[6]\n')
    f.write('                        width = int(splitArray[7])\n')
    f.write('                        dashx = int(splitArray[8])\n')
    f.write('                        dashy = int(splitArray[9])\n')
    f.write('                        imagefile = ""\n')
    f.write('                        newImage = None\n')
    f.write("                        shapeTag = ''\n")
    f.write('                        newtext = splitArray[10]\n')
    f.write('                        familytext = splitArray[11]\n')
    f.write('                        sizetext = int(splitArray[12])\n')
    f.write('                        weighttext = splitArray[13]\n')
    f.write('                        slanttext = splitArray[14]\n')
    f.write('                        underline = int(splitArray[15])\n')
    f.write('                        overstrike = int(splitArray[16])\n')
    f.write('                        textcolor = splitArray[17]\n')
    f.write('                        imagefile = splitArray[18]\n')
    f.write('                        shapeTag = splitArray[20]\n')
    f.write('                        G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[ShapeType,x1,y1,x2,y2,fill,familytext,sizetext,weighttext,slanttext,underline,overstrike,textcolor]\n')
    if androidTTFFile and (androidTTFFile.find('.ttf') > 0 or androidTTFFile.find('.otf') > 0):
        f.write('                        androidFont = GameLib.Res.GetFont("'+androidTTFFile+'",sizetext)\n')
        f.write("                        drawCanvas.create_button_simple(x1,y1,x2,y2,text=newtext,anchor='nw',fill=fill,outline=outline,width=width,font = androidFont,textcolor=textcolor,imagefile=imagefile,tag = shapeTag)\n")
    else:
        f.write("                        drawCanvas.create_button(x1,y1,x2,y2,text=newtext,anchor='nw',fill=fill,outline=outline,width=width,familytext = familytext,sizetext = sizetext,weighttext = weighttext,slanttext = slanttext,underline = underline,overstrike = overstrike,textcolor=textcolor,imagefile=imagefile,tag = shapeTag)\n")
    f.write('                    elif ShapeType == \'point\':\n')
    f.write("                        if splitArray[1].find('.') > 0:\n")
    f.write('                            x1 = float(splitArray[1])\n')
    f.write('                        else:\n')
    f.write('                            x1 = int(splitArray[1])\n')
    f.write("                        if splitArray[2].find('.') > 0:\n")
    f.write('                            y1 = float(splitArray[2])\n')
    f.write('                        else:\n')
    f.write('                            y1 = int(splitArray[2])\n')
    f.write("                        if splitArray[3].find('.') > 0:\n")
    f.write('                            x2 = float(splitArray[3])\n')
    f.write('                        else:\n')
    f.write('                            x2 = int(splitArray[3])\n')
    f.write("                        if splitArray[4].find('.') > 0:\n")
    f.write('                            y2 = float(splitArray[4])\n')
    f.write('                        else:\n')
    f.write('                            y2 = int(splitArray[4])\n')
    f.write('                        w = x2 - x1\n')
    f.write('                        h = y2 - y1\n')
    f.write('                        fill = splitArray[5]\n')
    f.write('                        outline = splitArray[6]\n')
    f.write('                        width = int(splitArray[7])\n')
    f.write('                        dashx = int(splitArray[8])\n')
    f.write('                        dashy = int(splitArray[9])\n')
    f.write('                        imagefile = ""\n')
    f.write('                        newImage = None\n')
    f.write("                        shapeTag = ''\n")
    f.write('                        parentShapeID = splitArray[10]\n')
    f.write('                        centerX = (x1 + x2)//2\n')
    f.write('                        centerY = (y1 + y2)//2\n')
    f.write('                        if len(splitArray) > 12:\n')
    f.write('                            shapeTag = splitArray[11]\n')
    f.write('                            G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[ShapeType,x1,y1,x2,y2]\n')
    f.write('                        if parentShapeID not in G_CanvasPointDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasPointDictionary[uiName][drawCanvasName][parentShapeID] = {}\n')
    f.write('                        G_CanvasPointDictionary[uiName][drawCanvasName][parentShapeID][shapeTag] = (centerX,centerY)\n')
    f.write("                    elif ShapeType == 'SetShapeRect':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        TargetShapeTag = splitArray[3]\n')
    f.write('                        x = round(float(splitArray[4]))\n')
    f.write('                        y = round(float(splitArray[5]))\n')
    f.write('                        w = round(float(splitArray[6]))\n')
    f.write('                        h = round(float(splitArray[7]))    \n')
    f.write('                        actionInfo = ["SetShapeRect",TargetShapeTag,x,y,w,h]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write("                    elif ShapeType == 'SetFillColor':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        TargetShapeTag = splitArray[3]\n')
    f.write('                        Color = splitArray[4]    \n')
    f.write('                        actionInfo = ["SetFillColor",TargetShapeTag,Color]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write("                    elif ShapeType == 'SetOutlineColor':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        TargetShapeTag = splitArray[3]\n')
    f.write('                        Color = splitArray[4]  \n')
    f.write('                        actionInfo = ["SetOutlineColor",TargetShapeTag,Color]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write("                    elif ShapeType == 'ChangeImage':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        TargetShapeTag = splitArray[3]\n')
    f.write('                        ImageFile = splitArray[4]    \n')
    f.write('                        actionInfo = ["ChangeImage",TargetShapeTag,ImageFile]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write("                    elif ShapeType == 'ChangeText':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        TargetShapeTag = splitArray[3]\n')
    f.write('                        Text = splitArray[4]\n')
    f.write('                        TextColor = splitArray[5]\n')
    f.write('                        actionInfo = ["ChangeText",TargetShapeTag,Text,TextColor]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write("                    elif ShapeType == 'JumpToUI':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        targetUIName = splitArray[3]\n')
    f.write('                        actionInfo = ["JumpToUI",shapeTag,targetUIName]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write("                    elif ShapeType == 'LoadUI':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        widgetName = splitArray[3]\n')
    f.write('                        targetUIName = splitArray[4]\n')
    f.write('                        actionInfo = ["LoadUI",shapeTag,widgetName,targetUIName]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write("                    elif ShapeType == 'DeleteShape':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        TargetShapeTag = splitArray[3]\n')
    f.write('                        actionInfo = ["DeleteShape",TargetShapeTag]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write("                    elif ShapeType == 'OnSwitch':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        TargetShapeTag = shapeTag\n')
    f.write('                        actionInfo = ["OnSwitch",TargetShapeTag,True]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write("                    elif ShapeType == 'CallFunction':\n")
    f.write('                        shapeTag = splitArray[1]\n')
    f.write('                        EventName = splitArray[2]\n')
    f.write('                        FunctionName = drawCanvasName+"_"+shapeTag+"_on"+EventName\n')
    f.write('                        CallBackFunc = None\n')
    f.write('                        if hasattr(drawCanvas,FunctionName) == True:\n')
    f.write('                            CallBackFunc = getattr(drawCanvas,FunctionName)\n')
    f.write('                        actionInfo = ["CallFunction",CallBackFunc,None]\n')
    f.write('                        if shapeTag not in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag] = {}\n')
    f.write('                        if EventName not in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                            G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName] = []\n')
    f.write('                        G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag][EventName].append(actionInfo)\n')
    f.write('                    else:\n')
    f.write("                        if splitArray[1].find('.') > 0:\n")
    f.write('                            x1 = float(splitArray[1])\n')
    f.write('                        else:\n')
    f.write('                            x1 = int(splitArray[1])\n')
    f.write("                        if splitArray[2].find('.') > 0:\n")
    f.write('                            y1 = float(splitArray[2])\n')
    f.write('                        else:\n')
    f.write('                            y1 = int(splitArray[2])\n')
    f.write("                        if splitArray[3].find('.') > 0:\n")
    f.write('                            x2 = float(splitArray[3])\n')
    f.write('                        else:\n')
    f.write('                            x2 = int(splitArray[3])\n')
    f.write("                        if splitArray[4].find('.') > 0:\n")
    f.write('                            y2 = float(splitArray[4])\n')
    f.write('                        else:\n')
    f.write('                            y2 = int(splitArray[4])\n')
    f.write('                        fillcolor = splitArray[5]\n')
    f.write('                        outlinecolor = splitArray[6]\n')
    f.write('                        width = int(splitArray[7])\n')
    f.write('                        dashx = int(splitArray[8])\n')
    f.write('                        dashy = int(splitArray[9])\n')
    f.write('                        if len(splitArray) > 11:\n')
    f.write('                            shapeTag = splitArray[10]\n')
    f.write('                            G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]=[ShapeType,x1,y1,x2,y2]\n')
    f.write('                        DoCanvasRecord(drawCanvas,ShapeType,x1,y1,x2,y2,fillcolor,outlinecolor,width,0,shapeTag)\n')
    f.write('                continue\n')
    f.write('        f.close()  \n')
    f.write('        if uiName in G_CanvasEventDictionary:\n') 
    f.write('            if drawCanvasName in G_CanvasEventDictionary[uiName]:\n')
    f.write('                for shapeTag in G_CanvasEventDictionary[uiName][drawCanvasName]:\n')
    f.write('                    for EventName in G_CanvasEventDictionary[uiName][drawCanvasName][shapeTag]:\n')
    f.write('                        drawCanvas.tag_bind(uiName,drawCanvasName,shapeTag, EventName,Shape_MouseEvent)  \n')
#写入设置图形矩形
def WriteSetShapeRectFunction_Mobile(f):
    f.write('def SetShapeRect(uiName,canvasName,shapeTag,x1,y1,x2,y2):\n')
    f.write('    """'+Language.G_Language[856]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,canvasName)\n')
    f.write('    drawCanvas.coords(shapeTag, x1,y1,x2,y2) \n')
    f.write("    G_CanvasShapeDictionary[uiName][canvasName][shapeTag][1] = x1\n")
    f.write("    G_CanvasShapeDictionary[uiName][canvasName][shapeTag][2] = y1\n")
    f.write("    G_CanvasShapeDictionary[uiName][canvasName][shapeTag][3] = x2\n")
    f.write("    G_CanvasShapeDictionary[uiName][canvasName][shapeTag][4] = y2\n")
    f.write('def GetShapeRect(uiName,canvasName,shapeTag):\n')
    f.write('    """'+Language.G_Language[866]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,canvasName)\n')
    f.write("    if shapeTag in G_CanvasShapeDictionary[uiName][canvasName]:\n")
    f.write("        x1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][1]\n")
    f.write("        y1 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][2]\n")
    f.write("        x2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][3]\n")
    f.write("        y2 = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][4]\n")
    f.write("        return (x1,y1,x2,y2)\n")
    f.write("    return None\n")
#写入设置填充颜色
def WriteSetShapeFillColorFunction_Mobile(f):
    f.write('def SetShapeFillColor(uiName,canvasName,shapeTag,color):\n')
    f.write('    """'+Language.G_Language[844]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,canvasName)\n')
    f.write('    drawCanvas.itemconfig(shapeTag, "fill",color)\n')
#写入设置边框颜色
def WriteSetShapeOutlineColorFunction_Mobile(f):
    f.write('def SetShapeOutlineColor(uiName,canvasName,shapeTag,color):\n')
    f.write('    """'+Language.G_Language[845]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,canvasName)\n')
    f.write('    drawCanvas.itemconfig(shapeTag, "outline",color)\n')
#写入设置线条宽度
def WriteSetShapeWidthFunction_Mobile(f):
    f.write('def SetShapeLineWidth(uiName,canvasName,shapeTag,width):\n')
    f.write('    """'+Language.G_Language[1464]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,canvasName)\n')
    f.write('    drawCanvas.itemconfig(shapeTag, "width",width)\n')
#写入设置图形图片
def WriteSetShapeImageFunction_Mobile(f):
    f.write('def SetShapeImage(uiName,canvasName,shapeTag,imageFile):\n')
    f.write('    """'+Language.G_Language[846]+'"""\n')
    f.write('    drawCanvas = GetElement(uiName,canvasName)\n')
    f.write('    drawCanvas.itemconfig(shapeTag, "image",imageFile) \n')
#写入设置图形文字
def WriteSetShapeTextFunction_Mobile(f):
    f.write("def SetShapeText(uiName,canvasName,shapeTag,text,color = None):\n")
    f.write('    """'+Language.G_Language[836]+'"""\n')
    f.write('    global G_CanvasShapeDictionary\n')
    f.write('    drawCanvas = GetElement(uiName,canvasName)\n')
    f.write('    if color is None:\n')
    f.write('        if canvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('            if shapeTag in G_CanvasShapeDictionary[uiName][canvasName]:\n')  
    f.write('                color = G_CanvasShapeDictionary[uiName][canvasName][shapeTag][7]\n')
    f.write('    drawCanvas.itemconfig(shapeTag, "text",text,color) \n')
    f.write('    G_CanvasShapeDictionary[uiName][canvasName][shapeTag][5] = text\n')
    f.write('    G_CanvasShapeDictionary[uiName][canvasName][shapeTag][7] = color\n')
    f.write('def GetShapeText(uiName,drawCanvasName,shapeTag):\n')
    f.write('    """'+Language.G_Language[870]+'"""\n')
    f.write('    if uiName not in G_CanvasShapeDictionary:\n')
    f.write("        return None\n")
    f.write('    if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n') 
    f.write('            text = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][5]\n')
    f.write('            textColor = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][7]\n')
    f.write('            return (text,textColor)\n')
    f.write("    return None\n")

#写入获取绑定点位置
def WriteGetShapePointFunction(f):
    f.write('def GetShapePoint(uiName,drawCanvasName,shapeTag,pointTag,absoluteMode=True):\n')
    f.write('    """'+Language.G_Language[835]+'"""\n')
    f.write('    if uiName not in G_CanvasShapeDictionary:\n')
    f.write("        return None\n")
    f.write('    if drawCanvasName in G_CanvasShapeDictionary[uiName]:\n')
    f.write('        if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n') 
    f.write('            if shapeTag in G_CanvasPointDictionary[uiName][drawCanvasName]:\n')  
    f.write('                parentX1,parentY1,parentX2,parentY2 = GetShapeRect(uiName,drawCanvasName,shapeTag)\n') 
    f.write('                if pointTag in G_CanvasPointDictionary[uiName][drawCanvasName][shapeTag]:\n') 
    f.write('                    shapeX = G_CanvasPointDictionary[uiName][drawCanvasName][shapeTag][pointTag][0]\n') 
    f.write('                    shapeY = G_CanvasPointDictionary[uiName][drawCanvasName][shapeTag][pointTag][1]\n') 
    f.write('                    if type(shapeX) == type(1.0):\n') 
    f.write('                        shapeX = int(shapeX * (parentX2-parentX1))\n') 
    f.write('                    if type(shapeY) == type(1.0):\n') 
    f.write('                        shapeY = int(shapeY * (parentX2-parentX1))\n') 
    f.write('                    if absoluteMode == True:\n') 
    f.write('                        shapeX = shapeX + parentX1\n') 
    f.write('                        shapeY = shapeY + parentY1\n') 
    f.write('                    return (shapeX,shapeY)\n') 
    f.write('    return None\n') 
#写入获取绑定点位置
# def WriteSetShapePositionFunction(f):
#     f.write('def SetShapePosition(uiName,drawCanvasName,shapeTag,x1,y1,x2,y2):\n')
#     f.write('    """'+Language.G_Language[837]+'"""\n')
#     f.write('    if drawCanvasName in G_CanvasPointDictionary[uiName]:\n')
#     f.write('       if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n') 
#     f.write('           drawCanvas = GetElement(uiName,drawCanvasName)\n')  
#     f.write('           drawCanvas.delete(shapeTag)\n') 
#     f.write('           ShapeType = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][0]\n') 
#     f.write('           G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][1] = x1\n') 
#     f.write('           G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][2] = y1\n') 
#     f.write('           G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][3] = x2\n') 
#     f.write('           G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][4] = y2\n') 
#     f.write("           if ShapeType == 'text':\n") 
#     f.write("               text = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][5]\n") 
#     f.write("               textFont = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][6]\n") 
#     f.write("               textcolor = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][7]\n") 
#     f.write("               drawCanvas.create_text(x1, y1,fill=textcolor,text=text,font = textFont,anchor='nw',tag=shapeTag)\n") 
#     f.write("           elif ShapeType == 'image':\n") 
#     f.write("               theImage = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][5]\n") 
#     f.write("               drawCanvas.create_image(x1, y1,image=theImage,anchor='nw',tag=shapeTag)\n") 
#     f.write("           else:\n") 
#     f.write("               fill = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][5]\n") 
#     f.write("               outline = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][6]\n")
#     f.write("               width = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][7]\n")
#     f.write("               dashx = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][8]\n")
#     f.write("               dashy = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][9]\n")
#     f.write("               DoCanvasRecord(drawCanvas,ShapeType,x1,y1,x2,y2,fill,outline,width,dashx,dashy,None,'','#FFFFFF',shapeTag)\n")
#     f.write('    return None\n') 
#     f.write('def GetShapePosition(uiName,drawCanvasName,shapeTag):\n')
#     f.write('    """'+Language.G_Language[857]+'"""\n')
#     f.write('    if drawCanvasName in G_CanvasPointDictionary[uiName]:\n')
#     f.write('       if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n') 
#     f.write('           return [G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][1],G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][2],G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][3],G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag][4]]\n') 
#     f.write('    return None\n') 
#写入获取绑定点位置
# def WriteSetShapeTextFunction_Mobile(f):
#     f.write('def SetShapeText(uiName,drawCanvasName,shapeTag,text,fillcolor = None):\n')
#     f.write('    """'+Language.G_Language[835]+'"""\n')
#     f.write('    if drawCanvasName in G_CanvasPointDictionary[uiName]:\n')
#     f.write('        if shapeTag in G_CanvasShapeDictionary[uiName][drawCanvasName]:\n')  
#     f.write('            drawCanvas = GetElement(uiName,drawCanvasName)\n')
#     f.write('            drawCanvas.delete(shapeTag)\n') 
#     f.write('            shapeInfo = G_CanvasShapeDictionary[uiName][drawCanvasName][shapeTag]\n') 
#     f.write('            shapeInfo[5] = text\n') 
#     f.write('            textcolor = shapeInfo[4]\n') 
#     f.write('            if fillcolor:\n') 
#     f.write('                textcolor = fillcolor\n') 
#     f.write("            drawCanvas.create_text(shapeInfo[1],shapeInfo[2],shapeInfo[3],shapeInfo[4],text=text,anchor='nw',fill=textcolor,familytext = shapeInfo[5],sizetext = shapeInfo[6],weighttext = shapeInfo[7],slanttext = shapeInfo[8],underline = shapeInfo[9],overstrike = shapeInfo[10],tag=shapeTag)\n")
#设置RadioButton的样式
def SetWidgetUsePyMeStyle(f):
    f.write('PyMeStyleRadioGroup = {}\n')
    f.write('def OnRadioButtonClick(groupid,radio_value):\n')
    f.write('    global PyMeStyleRadioGroup\n')
    f.write('    if groupid in PyMeStyleRadioGroup.keys():\n')
    f.write('        for RadioInfo in PyMeStyleRadioGroup[groupid]:\n')
    f.write('            if RadioInfo["var"] == radio_value:\n')
    f.write('                RadioInfo["radio"].select()\n')
    f.write('                RadioInfo["icon"].itemconfig("icon_image", image=RadioInfo["tkimage_yes"])\n')
    f.write('            else:\n')
    f.write('                RadioInfo["icon"].itemconfig("icon_image", image=RadioInfo["tkimage_no"])\n')
    f.write('def OnRadioButtonConfigure(event):\n')
    f.write('    global PyMeStyleRadioGroup\n')
    f.write('    for groupid in PyMeStyleRadioGroup.keys():\n')
    f.write('        for RadioInfo in PyMeStyleRadioGroup[groupid]:\n')
    f.write('            if RadioInfo["radio"] is event.widget:\n')
    f.write('                radio_x = event.widget.winfo_x()\n')
    f.write('                radio_y = event.widget.winfo_y()\n')
    f.write('                font_height = event.widget.winfo_reqheight()\n')
    f.write('                RadioInfo["icon"].place(x=radio_x - 10 ,y = radio_y+font_height//4,width=font_height, height=font_height)\n')
    f.write('def SetRadioButtonPyMeStyle(uiName,elementName,groupid,radiovalue,oval_color,over_select_color):\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global PyMeStyleRadioGroup\n')
    f.write('    Control = GetElement(uiName,elementName)\n')
    f.write('    if Control :\n')
    f.write('        parentinfo = Control.winfo_parent()\n')
    f.write('        parentwidget = Control._nametowidget(parentinfo)\n')
    f.write('        Control.bind("<Button-1>", lambda event: OnRadioButtonClick(groupid,radiovalue))\n')
    f.write('        Control.bind("<Configure>", OnRadioButtonConfigure)\n')
    f.write('        radio_x = Control.winfo_x()\n')
    f.write('        radio_y = Control.winfo_y()\n')
    f.write('        radio_bg = Control.cget(\'bg\')\n')
    f.write('        radio_height = Control.winfo_height()\n')
    f.write('        radio_req_height = Control.winfo_reqheight()\n')
    f.write('        radio_circle_size = int(radio_req_height*0.8)\n')
    f.write('        if radio_circle_size < 26:\n')
    f.write('            radio_circle_size = 26\n')
    f.write('        small_radio_icon = tkinter.Canvas(parentwidget,bg=radio_bg,highlightthickness=0,bd=0)\n')
    f.write('        image_no = Image.new(\'RGBA\', (radio_circle_size, radio_circle_size), \'#00000000\')\n')
    f.write('        draw = aggdraw.Draw(image_no)\n')
    f.write('        border_p = aggdraw.Pen(oval_color,2)\n')
    f.write('        draw.ellipse((4,4,radio_circle_size-4,radio_circle_size-4), border_p)\n')
    f.write('        draw.flush()\n')
    f.write('        tkimage_no = ImageTk.PhotoImage(image_no)\n')
    f.write('        image_yes = Image.new(\'RGBA\', (radio_circle_size, radio_circle_size), \'#00000000\')\n')
    f.write('        draw = aggdraw.Draw(image_yes)\n')
    f.write('        border_p = aggdraw.Pen(over_select_color,2)\n')
    f.write('        draw.ellipse((4,4,radio_circle_size-4,radio_circle_size-4), border_p)\n')
    f.write('        center_b = aggdraw.Brush(over_select_color)\n')
    f.write('        draw.ellipse((8,8,radio_circle_size-8,radio_circle_size-8), center_b)\n')
    f.write('        draw.flush()\n')
    f.write('        tkimage_yes = ImageTk.PhotoImage(image_yes)\n')
    f.write('        small_radio_icon.create_image(0, 0,image=tkimage_no,anchor=\'nw\',tag="icon_image")\n')
    f.write('        small_radio_icon.place(x=radio_x - (radio_circle_size)//2 + 4 ,y = radio_y + radio_height//2 - radio_circle_size//2,width=radio_circle_size, height=radio_circle_size)\n')
    f.write('        small_radio_icon.bind("<Button-1>", lambda event: OnRadioButtonClick(groupid,radiovalue))\n')
    f.write('        if groupid not in PyMeStyleRadioGroup:\n')
    f.write('            PyMeStyleRadioGroup[groupid] = []\n')
    f.write('        NewRadioInfo = {"radio":Control,"var":radiovalue,"icon":small_radio_icon,"border_color":oval_color,"image_no":image_no,"image_yes":image_yes,"tkimage_no":tkimage_no,"tkimage_yes":tkimage_yes}\n')
    f.write('        PyMeStyleRadioGroup[groupid].append(NewRadioInfo)\n')
    f.write('        currvalue = GetCurrentValue(uiName,elementName)\n')
    f.write('        OnRadioButtonClick(groupid,currvalue)\n')
    f.write('PyMeStyleCheckButton = {}\n')
    f.write('def OnCheckButtonClick(event,uiName,elementName):\n')
    f.write('    global PyMeStyleCheckButton\n')
    f.write('    print("OnCheckButtonClick")\n')
    f.write('    if uiName in PyMeStyleCheckButton.keys():\n')
    f.write('        for RadioInfo in PyMeStyleCheckButton[uiName]:\n')
    f.write('            if RadioInfo["checkbutton"] is event.widget or RadioInfo["icon"] is event.widget:\n')
    f.write('                CheckValue = GetCurrentValue(uiName,elementName)\n')
    f.write('                print("Value:"+str(CheckValue))\n')
    f.write('                if CheckValue == 0:\n')
    f.write('                    RadioInfo["icon"].itemconfig("icon_image", image=RadioInfo["tkimage_yes"])\n')
    f.write('                    if RadioInfo["icon"] is event.widget:\n')
    f.write('                        SetCurrentValue(uiName,elementName,1)\n')
    f.write('                else:\n')
    f.write('                    RadioInfo["icon"].itemconfig("icon_image", image=RadioInfo["tkimage_no"])\n')
    f.write('                    if RadioInfo["icon"] is event.widget:\n')
    f.write('                        SetCurrentValue(uiName,elementName,0)\n')
    f.write('                return\n')
    f.write('def OnCheckButtonConfigure(event):\n')
    f.write('    global PyMeStyleCheckButton\n')
    f.write('    for uiName in PyMeStyleCheckButton.keys():\n')
    f.write('        for RadioInfo in PyMeStyleCheckButton[uiName]:\n')
    f.write('            if RadioInfo["checkbutton"] is event.widget:\n')
    f.write('                radio_x = event.widget.winfo_x()\n')
    f.write('                radio_y = event.widget.winfo_y()\n')
    f.write('                font_height = event.widget.winfo_reqheight()\n')
    f.write('                RadioInfo["icon"].place(x=radio_x - 10 ,y = radio_y+font_height//4,width=font_height, height=font_height)\n')
    f.write('def SetCheckButtonPyMeStyle(uiName,elementName,checkbutton_value,oval_color,over_select_color):\n')
    f.write('    global G_UIElementAliasDictionary\n')
    f.write('    global G_UIElementDictionary\n')
    f.write('    global PyMeStyleCheckButton\n')
    f.write('    Control = GetElement(uiName,elementName)\n')
    f.write('    if Control :\n')
    f.write('        parentinfo = Control.winfo_parent()\n')
    f.write('        parentwidget = Control._nametowidget(parentinfo)\n')
    f.write('        Control.bind("<Button-1>", lambda event: OnCheckButtonClick(event,uiName,elementName))\n')
    f.write('        Control.bind("<Configure>", OnCheckButtonConfigure)\n')
    f.write('        radio_x = Control.winfo_x()\n')
    f.write('        radio_y = Control.winfo_y()\n')
    f.write('        radio_bg = Control.cget(\'bg\')\n')
    f.write('        radio_height = Control.winfo_height()\n')
    f.write('        radio_req_height = Control.winfo_reqheight()\n')
    f.write('        radio_circle_size = int(radio_req_height*0.8)\n')
    f.write('        if radio_circle_size < 26:\n')
    f.write('            radio_circle_size = 26\n')
    f.write('        small_radio_icon = tkinter.Canvas(parentwidget,bg=radio_bg,highlightthickness=0,bd=0)\n')
    f.write('        image_no = Image.new(\'RGBA\', (radio_circle_size, radio_circle_size), \'#00000000\')\n')
    f.write('        draw = aggdraw.Draw(image_no)\n')
    f.write('        border_p = aggdraw.Pen(oval_color,2)\n')
    f.write('        draw.rectangle((4,4,radio_circle_size-4,radio_circle_size-4), border_p)\n')
    f.write('        draw.flush()\n')
    f.write('        tkimage_no = ImageTk.PhotoImage(image_no)\n')
    f.write('        image_yes = Image.new(\'RGBA\', (radio_circle_size, radio_circle_size), \'#00000000\')\n')
    f.write('        draw = aggdraw.Draw(image_yes)\n')
    f.write('        border_p = aggdraw.Pen(over_select_color,2)\n')
    f.write('        draw.rectangle((4,4,radio_circle_size-4,radio_circle_size-4), border_p)\n')
    f.write('        center_b = aggdraw.Brush(over_select_color)\n')
    f.write('        draw.rectangle((8,8,radio_circle_size-8,radio_circle_size-8), center_b)\n')
    f.write('        draw.flush()\n')
    f.write('        tkimage_yes = ImageTk.PhotoImage(image_yes)\n')
    f.write('        if checkbutton_value == True:\n')
    f.write('            small_radio_icon.create_image(0, 0,image=tkimage_yes,anchor=\'nw\',tag="icon_image")\n')
    f.write('        else:\n')
    f.write('            small_radio_icon.create_image(0, 0,image=tkimage_no,anchor=\'nw\',tag="icon_image")\n')
    f.write('        small_radio_icon.place(x=radio_x - (radio_circle_size)//2 + 6 ,y = radio_y + radio_height//2 - radio_circle_size//2,width=radio_circle_size, height=radio_circle_size)\n')
    f.write('        small_radio_icon.bind("<Button-1>", lambda event: OnCheckButtonClick(event,uiName,elementName))\n')
    f.write('        if uiName not in PyMeStyleCheckButton:\n')
    f.write('            PyMeStyleCheckButton[uiName] = []\n')
    f.write('        NewCheckButtonInfo = {"checkbutton":Control,"icon":small_radio_icon,"border_color":oval_color,"image_no":image_no,"image_yes":image_yes,"tkimage_no":tkimage_no,"tkimage_yes":tkimage_yes}\n')
    f.write('        PyMeStyleCheckButton[uiName].append(NewCheckButtonInfo)\n')
    

#写入拖动设置位置
def WriteCtrlCCopyContentFunction(f):
    f.write('def CtrlCCopy_CallBack(event):\n')
    f.write('    currIndex = event.widget.curselection()\n')
    f.write('    currIndexCount = len(currIndex)\n')
    f.write('    if currIndexCount > 0:\n')
    f.write('        import pyperclip\n')
    f.write('        if currIndexCount == 1:\n')
    f.write('            currText = event.widget.get(currIndex[0])\n')
    f.write('        else:\n')
    f.write('            currText = ""\n')
    f.write('            for i in range(currIndexCount):\n')
    f.write('                currText = currText + event.widget.get(currIndex[i]) + "\\n"\n')
    f.write('        pyperclip.copy(currText)\n')
    f.write('def KeyUpDown_CallBack(event):\n')
    f.write('    if event.keysym == "Up":\n')
    f.write('        currIndex = event.widget.curselection()\n')
    f.write('        if currIndex[0] > 0:\n')
    f.write('            event.widget.selection_clear(0, "end")\n')
    f.write('            event.widget.selection_set(currIndex[0]-1)\n')
    f.write('            event.widget.see(currIndex[0] - 1)\n')
    f.write('    elif event.keysym == "Down":\n')
    f.write('        currIndex = event.widget.curselection()\n')
    f.write('        if currIndex[0] < event.widget.size() - 1:\n')
    f.write('            event.widget.selection_clear(0, "end")\n')
    f.write('            event.widget.selection_set(currIndex[0]+1)\n')
    f.write('            event.widget.see(currIndex[0] + 1)\n')
    f.write('def EnableCtrlCCopyContent(uiName,elementName):\n')
    f.write('    """'+Language.G_Language[1722]+'"""\n')
    f.write('    Control = GetElement(uiName,elementName)\n')
    f.write('    if Control :\n')
    f.write('        Control.bind("<Control-c>",CtrlCCopy_CallBack)\n')
    f.write('        Control.bind("<Up>",KeyUpDown_CallBack)\n')
    f.write('        Control.bind("<Down>",KeyUpDown_CallBack)\n')
#写入拖动设置位置
def WriteDragWidgetFunction(f):
    f.write('class FrameDraggable():\n')
    f.write('    """'+Language.G_Language[1723]+'"""\n')
    f.write('    def __init__(self,widget,hasChildren = True):\n')
    f.write('        if hasChildren == True:\n')
    f.write('            self.root = widget.root\n')
    f.write('            ChildWidgetList = widget.root.children\n')
    f.write('            for childKey in ChildWidgetList.keys():\n')
    f.write('                Form_1 = ChildWidgetList[childKey]\n')
    f.write("                Form_1.bind('<Button-1>',self.BeginDrag)\n")
    f.write("                Form_1.bind('<ButtonRelease-1>',self.EndDrag)\n")
    f.write("                Form_1.bind('<B1-Motion>',self.Draging)\n")
    f.write('        else:\n')
    f.write('            self.root = widget\n')
    f.write("            self.root.bind('<Button-1>',self.BeginDrag)\n")
    f.write("            self.root.bind('<ButtonRelease-1>',self.EndDrag)\n")
    f.write("            self.root.bind('<B1-Motion>',self.Draging)\n")
    f.write('    def BeginDrag(self,event):\n')
    f.write('        self.beginx = event.x_root\n')
    f.write('        self.beginy = event.y_root\n')
    f.write('    def Draging(self,event):\n')
    f.write('        offsetx = event.x_root - self.beginx \n')
    f.write('        offsety = event.y_root - self.beginy\n')
    f.write('        oldX = self.root.winfo_x() \n')
    f.write('        oldY = self.root.winfo_y() \n')
    f.write('        x = oldX + offsetx\n')
    f.write('        y = oldY + offsety\n')
    f.write('        w = self.root.winfo_width()\n')
    f.write('        h = self.root.winfo_height()\n')
    f.write('        for uiName in G_UIElementPlaceDictionary:\n')
    f.write('            for elementName in G_UIElementPlaceDictionary[uiName]:\n')
    f.write('                Control = G_UIElementDictionary[uiName][elementName]\n')
    f.write('                if Control == self.root:\n')
    f.write('                    SetControlPlace(uiName,elementName,x,y,w,h)\n')
    f.write('                    break\n')
    f.write('        self.beginx = event.x_root\n')
    f.write('        self.beginy = event.y_root\n')
    f.write('    def EndDrag(self,event):\n')
    f.write('        self.beginx = event.x_root\n')
    f.write('        self.beginy = event.y_root\n')
    f.write('class WindowDraggable():\n')
    f.write('    """'+Language.G_Language[1233]+'"""\n')
    f.write("    def __init__(self,widget,dragmove=False,bordersize = 6,bordercolor = '#444444'):\n")
    f.write('        global G_WindowDraggable\n')
    f.write('        G_WindowDraggable = self\n')
    f.write('        self.widget = widget\n')
    f.write('        if dragmove == True:\n')
    f.write("            if bordersize > 0:\n")
    f.write("                widget.bind('<Enter>',self.Enter)\n")
    f.write("                widget.bind('<Motion>',self.Motion)\n")
    f.write("                widget.bind('<Leave>',self.Leave)\n")
    # 暂时在InitElementData中处理了
    # f.write("            widget.bind('<ButtonPress-1>',self.StartDrag)\n")
    # f.write("            widget.bind('<ButtonRelease-1>',self.StopDrag)\n")
    # f.write("            widget.bind('<B1-Motion>',self.MoveDragPos)\n")
    f.write('            widget.after(10, lambda: self.ShowWindowIcoToBar(widget))\n')
    f.write('        self.bordersize = bordersize\n')
    f.write('        self.bordercolor = bordercolor\n')
    f.write('        self.x = None\n')
    f.write('        self.y = None\n')
    f.write('        self.formw = self.widget.winfo_width()\n')
    f.write('        self.formh = self.widget.winfo_height()\n')
    f.write('        self.top_drag = None\n')
    f.write('        self.left_drag = None\n')
    f.write('        self.right_drag = None\n')
    f.write('        self.bottom_drag = None\n')
    f.write('        self.topleft_drag = None\n')
    f.write('        self.bottomleft_drag = None\n')
    f.write('        self.topright_drag = None\n')
    f.write('        self.bottomright_drag = None\n')
    f.write('    def GetWidget(self):\n')
    f.write('        return self.widget\n')
    f.write('    def ShowWindowIcoToBar(self,widget):\n')
    f.write('        GWL_EXSTYLE=-20\n')
    f.write('        WS_EX_APPWINDOW=0x00040000\n')
    f.write('        WS_EX_TOOLWINDOW=0x00000080\n')
    f.write('        hwnd = windll.user32.GetParent(widget.winfo_id())\n')
    f.write('        _winlib = windll.user32\n')
    f.write('        try :\n')
    f.write('            style = _winlib.GetWindowLongPtrW(hwnd, GWL_EXSTYLE)\n')
    f.write('            style = style & ~WS_EX_TOOLWINDOW\n')
    f.write('            style = style | WS_EX_APPWINDOW\n')
    f.write('            res =_winlib.SetWindowLongPtrW(hwnd, GWL_EXSTYLE, style)\n')
    f.write('        except :\n')
    f.write('            try :\n')
    f.write('                style = _winlib.GetWindowLongA(hwnd, GWL_EXSTYLE)\n')
    f.write('                style = style & ~WS_EX_TOOLWINDOW\n')
    f.write('                style = style | WS_EX_APPWINDOW\n')
    f.write('                _winlib.SetWindowLongA(hwnd, GWL_EXSTYLE, style)\n')
    f.write('            except :\n')
    f.write('                pass\n')
    f.write('    def Enter(self,event):\n')
    f.write('        if self.widget == event.widget or event.widget.winfo_class() =="Canvas":\n')
    f.write('            formx = self.widget.winfo_x() \n')
    f.write('            formy = self.widget.winfo_y() \n')
    # f.write('            self.formw = self.widget.winfo_width() \n')
    # f.write('            self.formh = self.widget.winfo_height()\n')
    f.write('    def Motion(self,event):\n')
    f.write('        if self.widget == event.widget or event.widget.winfo_class() =="Canvas":\n')
    f.write('            formx = self.widget.winfo_x() \n')
    f.write('            formy = self.widget.winfo_y() \n')
    f.write('            formw = self.widget.winfo_width() \n')
    f.write('            formh = self.widget.winfo_height()\n')
    f.write('            x = event.x_root - formx\n')
    f.write('            y = event.y_root - formy\n')
    f.write('            if ((x >= 0) and (x <= self.bordersize) and (y >= 0) and (y <= self.bordersize)):\n')
    f.write('                if self.top_drag == None:\n')
    f.write('                    self.top_drag = tkinter.Label(self.widget)\n')
    f.write("                self.top_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.top_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.top_drag.bind('<B1-Motion>',self.MoveDragSize_TL)\n")
    f.write("                self.top_drag.bind('<Leave>',self.LeaveDragBorder_TL)\n")
    f.write('                if self.left_drag == None:\n')
    f.write('                    self.left_drag = tkinter.Label(self.widget)\n')
    f.write("                self.left_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.left_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.left_drag.bind('<B1-Motion>',self.MoveDragSize_TL)\n")
    f.write("                self.left_drag.bind('<Leave>',self.LeaveDragBorder_TL)\n")
    f.write('                self.top_drag.place(x = 0,y = 0,width = formw,height = self.bordersize)\n')
    f.write('                self.top_drag.configure(bg = self.bordercolor)\n')
    f.write('                self.left_drag.place(x = 0,y = 0,width = self.bordersize,height = formh)\n')
    f.write('                self.left_drag.configure(bg = self.bordercolor)\n')
    f.write('            if ((y >= 0) and (y <= self.bordersize)):\n')
    f.write('                if self.top_drag == None:\n')
    f.write('                    self.top_drag = tkinter.Label(self.widget)\n')
    f.write("                self.top_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.top_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.top_drag.bind('<B1-Motion>',self.MoveDragSize_V1)\n")
    f.write("                self.top_drag.bind('<Motion>',self.MotionDragBorder)\n")
    f.write("                self.top_drag.bind('<Leave>',self.LeaveDragBorder)\n")
    f.write('                self.top_drag.place(x = 0,y = 0,width = formw,height = self.bordersize)\n')
    f.write('                self.top_drag.configure(bg = self.bordercolor)\n')
    f.write('            if ((y >= (formh - self.bordersize)) and (y <= formh)):\n')
    f.write('                if self.bottom_drag == None:\n')
    f.write('                    self.bottom_drag = tkinter.Label(self.widget)\n')
    f.write("                self.bottom_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.bottom_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.bottom_drag.bind('<B1-Motion>',self.MoveDragSize_V2)\n")
    f.write("                self.bottom_drag.bind('<Motion>',self.MotionDragBorder)\n")
    f.write("                self.bottom_drag.bind('<Leave>',self.LeaveDragBorder)\n")
    f.write('                self.bottom_drag.place(x = 0,y = (formh - self.bordersize),width = formw,height = self.bordersize)\n')
    f.write('                self.bottom_drag.configure(bg = self.bordercolor)\n')
    f.write('            if ((x >= 0 ) and (x <= self.bordersize)):\n')
    f.write('                if self.left_drag == None:\n')
    f.write('                    self.left_drag = tkinter.Label(self.widget)\n')
    f.write("                self.left_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.left_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.left_drag.bind('<B1-Motion>',self.MoveDragSize_H1)\n")
    f.write("                self.left_drag.bind('<Motion>',self.MotionDragBorder)\n")
    f.write("                self.left_drag.bind('<Leave>',self.LeaveDragBorder)\n")
    f.write('                self.left_drag.place(x = 0,y = 0,width = self.bordersize,height = formh)\n')
    f.write('                self.left_drag.configure(bg = self.bordercolor)\n')
    f.write('            if ((x >= (formw - self.bordersize)) and (x <= formw)):\n')
    f.write('                if self.right_drag == None:\n')
    f.write('                    self.right_drag = tkinter.Label(self.widget)\n')
    f.write("                self.right_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.right_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.right_drag.bind('<B1-Motion>',self.MoveDragSize_H2)\n")
    f.write("                self.right_drag.bind('<Motion>',self.MotionDragBorder)\n")
    f.write("                self.right_drag.bind('<Leave>',self.LeaveDragBorder)\n")
    f.write('                self.right_drag.place(x = (formw - self.bordersize),y = 0,width = self.bordersize,height = formh)\n')
    f.write('                self.right_drag.configure(bg = self.bordercolor)\n')
    f.write('    def Leave(self,event):\n')
    f.write('        if self.widget == event.widget or event.widget.winfo_class() =="Canvas":\n')
    f.write('            pass\n')
    f.write('    def StartDrag(self,event):\n')
    f.write('        state = self.widget.state()\n')
    f.write('        if state == "normal":\n')
    f.write('            self.x = event.x_root\n')
    f.write('            self.y = event.y_root\n')
    f.write('            self.formw = self.widget.winfo_width()\n')
    f.write('            self.formh = self.widget.winfo_height()\n')
    f.write('    def StopDrag(self,event):\n')
    f.write('        self.x = None\n')
    f.write('        self.y = None\n')
    f.write("        self.widget.configure(cursor='arrow')\n")
    f.write('    def MoveDragPos(self,event):\n')
    f.write('        state = self.widget.state()\n')
    f.write('        if state == "normal":\n')
    f.write('            if self.widget == event.widget or event.widget.winfo_class() =="Canvas" or event.widget.winfo_class() =="Label" or event.widget.winfo_class() =="Frame"  or event.widget.winfo_class() =="Labelframe":\n')
    f.write('                formx = self.widget.winfo_x() \n')
    f.write('                formy = self.widget.winfo_y() \n')
    f.write('                if self.x and self.y:\n')
    f.write('                    deltaX = event.x_root - self.x\n')
    f.write('                    deltaY = event.y_root - self.y\n')
    f.write('                    newX = formx + deltaX\n')
    f.write('                    newY = formy + deltaY\n')
    f.write('                    WindowMaster = win32gui.GetParent(self.widget.winfo_id())\n')
    f.write('                    if self.widget.overrideredirect() == True:\n')
    f.write('                        win32gui.MoveWindow(WindowMaster,newX,newY,self.formw,self.formh,False)\n')
    f.write('                    else:\n')
    f.write("                        geoinfo = str('%dx%d+%d+%d'%(self.formw,self.formh,newX,newY))\n")
    f.write('                        self.widget.geometry(geoinfo)\n')
    f.write('                self.x = event.x_root\n')
    f.write('                self.y = event.y_root\n')
    f.write('                return "break"\n')
    f.write('    def MoveDragSize_H1(self,event):\n')
    f.write('        deltaX = event.x_root - self.x\n')
    f.write('        newX = self.widget.winfo_x() + deltaX\n')
    f.write('        newY = self.widget.winfo_y()\n')
    f.write('        newW = self.formw - deltaX\n')
    f.write('        WindowMaster = win32gui.GetParent(self.widget.winfo_id())\n')
    f.write('        if self.widget.overrideredirect() == True:\n')
    f.write('            win32gui.MoveWindow(WindowMaster,newX,newY,newW,self.formh,False)\n')
    f.write('        else:\n')
    f.write("            geoinfo = str('%dx%d+%d+%d'%(newW,self.formh,newX,newY))\n")
    f.write('            self.widget.geometry(geoinfo)\n')
    f.write('        self.left_drag.place(x = 0,y = 0,width = self.bordersize,height = self.widget.winfo_height())\n')
    f.write('        self.x = event.x_root\n')
    f.write("        self.widget.configure(cursor='plus')\n")
    f.write('        self.formw = newW\n')
    f.write('    def MoveDragSize_H2(self,event):\n')
    f.write('        deltaX = event.x_root - self.x\n')
    f.write('        newX = self.widget.winfo_x()\n')
    f.write('        newY = self.widget.winfo_y()\n')
    f.write('        newW = self.formw + deltaX\n')
    f.write('        WindowMaster = win32gui.GetParent(self.widget.winfo_id())\n')
    f.write('        if self.widget.overrideredirect() == True:\n')
    f.write('            win32gui.MoveWindow(WindowMaster,newX,newY,newW,self.formh,False)\n')
    f.write('        else:\n')
    f.write("            geoinfo = str('%dx%d+%d+%d'%(newW,self.formh,newX,newY))\n")
    f.write('            self.widget.geometry(geoinfo)\n')
    f.write('        self.right_drag.place(x = newW-self.bordersize,y = 0,width = self.bordersize,height = formh)\n')
    f.write('        self.x = event.x_root\n')
    f.write("        self.widget.configure(cursor='plus')\n")
    f.write('        self.formw = newW\n')
    f.write('    def MoveDragSize_V1(self,event):\n')
    f.write('        deltaY = event.y_root - self.y\n')
    f.write('        newX = self.widget.winfo_x()\n')
    f.write('        newY = self.widget.winfo_y() + deltaY\n')
    f.write('        newH = self.formh - deltaY\n')
    f.write('        WindowMaster = win32gui.GetParent(self.widget.winfo_id())\n')
    f.write('        if self.widget.overrideredirect() == True:\n')
    f.write('            win32gui.MoveWindow(WindowMaster,newX,newY,self.formw,newH,False)\n')
    f.write('        else:\n')
    f.write("            geoinfo = str('%dx%d+%d+%d'%(self.formw,newH,newX,newY))\n")
    f.write('            self.widget.geometry(geoinfo)\n')
    f.write('        self.top_drag.place(x = 0,y = 0,width = self.formw,height = self.bordersize)\n')
    f.write('        self.y = event.y_root\n')
    f.write("        self.widget.configure(cursor='plus')\n")
    f.write('        self.formh = newH\n')
    f.write('    def MoveDragSize_V2(self,event):\n')
    f.write('        deltaY = event.y_root - self.y\n')
    f.write('        newX = self.widget.winfo_x()\n')
    f.write('        newY = self.widget.winfo_y()\n')
    f.write('        newH = self.formh + deltaY\n')
    f.write('        WindowMaster = win32gui.GetParent(self.widget.winfo_id())\n')
    f.write('        if self.widget.overrideredirect() == True:\n')
    f.write('            win32gui.MoveWindow(WindowMaster,newX,newY,self.formh,newH,False)\n')
    f.write('        else:\n')
    f.write("            geoinfo = str('%dx%d+%d+%d'%(self.formw,newH,newX,newY))\n")
    f.write('            self.widget.geometry(geoinfo)\n')
    f.write('        self.bottom_drag.place(x = 0,y = (newH - self.bordersize),width = self.formw,height = self.bordersize)\n')
    f.write('        self.y = event.y_root\n')
    f.write("        self.widget.configure(cursor='plus')\n")
    f.write('        self.formh = newH\n')
    f.write('    def MotionDragBorder(self,event):\n')
    f.write('        formx = self.widget.winfo_x() \n')
    f.write('        formy = self.widget.winfo_y() \n')
    f.write('        formw = self.widget.winfo_width() \n')
    f.write('        formh = self.widget.winfo_height() \n')
    f.write('        x = event.x_root - formx\n')
    f.write('        y = event.y_root - formy\n')
    f.write('        if event.widget == self.left_drag:\n')
    f.write('            if y >=0 and y <= self.bordersize:\n')
    f.write('                if self.top_drag == None:\n')
    f.write('                    self.top_drag = tkinter.Label(self.widget)\n')
    f.write('                self.top_drag.place(x = 0,y = 0,width = formw,height = self.bordersize)\n')
    f.write("                self.top_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.top_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.top_drag.bind('<B1-Motion>',self.MoveDragSize_TL)\n")
    f.write("                self.top_drag.bind('<Leave>',self.LeaveDragBorder_TL)\n")
    f.write('                if self.left_drag == None:\n')
    f.write('                    self.left_drag = tkinter.Label(self.widget)\n')
    f.write("                self.left_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.left_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.left_drag.bind('<B1-Motion>',self.MoveDragSize_TL)\n")
    f.write("                self.left_drag.bind('<Leave>',self.LeaveDragBorder_TL)\n")
    f.write('            if y >=(formh-self.bordersize) and y <= formh:\n')
    f.write('                if self.bottom_drag == None:\n')
    f.write('                    self.bottom_drag = tkinter.Label(self.widget)\n')
    f.write('                self.bottom_drag.place(x = 0,y = formh-self.bordersize,width = formw,height = self.bordersize)\n')
    f.write("                self.bottom_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.bottom_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.bottom_drag.bind('<B1-Motion>',self.MoveDragSize_BL)\n")
    f.write("                self.bottom_drag.bind('<Leave>',self.LeaveDragBorder_BL)\n")
    f.write('                if self.left_drag == None:\n')
    f.write('                    self.left_drag = tkinter.Label(self.widget)\n')
    f.write("                self.left_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.left_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.left_drag.bind('<B1-Motion>',self.MoveDragSize_BL)\n")
    f.write("                self.left_drag.bind('<Leave>',self.LeaveDragBorder_BL)\n")
    f.write('        if event.widget == self.right_drag:\n')
    f.write('            if y >=0 and y <= self.bordersize:\n')
    f.write('                if self.top_drag == None:\n')
    f.write('                    self.top_drag = tkinter.Label(self.widget)\n')
    f.write('                self.top_drag.place(x = 0,y = 0,width = formw,height = self.bordersize)\n')
    f.write("                self.top_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.top_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.top_drag.bind('<B1-Motion>',self.MoveDragSize_TR)\n")
    f.write("                self.top_drag.bind('<Leave>',self.LeaveDragBorder_TR)\n")
    f.write('                if self.right_drag == None:\n')
    f.write('                    self.right_drag = tkinter.Label(self.widget)\n')
    f.write("                self.right_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.right_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.right_drag.bind('<B1-Motion>',self.MoveDragSize_TR)\n")
    f.write("                self.right_drag.bind('<Leave>',self.LeaveDragBorder_TR)\n")
    f.write('            if y >=(formh-self.bordersize) and y <= formh:\n')
    f.write('                if self.bottom_drag == None:\n')
    f.write('                    self.bottom_drag = tkinter.Label(self.widget)\n')
    f.write('                self.bottom_drag.place(x = 0,y = formh-self.bordersize,width = formw,height = self.bordersize)\n')
    f.write("                self.bottom_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.bottom_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.bottom_drag.bind('<B1-Motion>',self.MoveDragSize_BR)\n")
    f.write("                self.bottom_drag.bind('<Leave>',self.LeaveDragBorder_BR)\n")
    f.write('                if self.right_drag == None:\n')
    f.write('                    self.right_drag = tkinter.Label(self.widget)\n')
    f.write("                self.right_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.right_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.right_drag.bind('<B1-Motion>',self.MoveDragSize_BR)\n")
    f.write("                self.right_drag.bind('<Leave>',self.LeaveDragBorder_BR)\n")
    f.write('        if event.widget == self.top_drag:\n')
    f.write('            if x >=0 and x <= self.bordersize:\n')
    f.write('                if self.top_drag == None:\n')
    f.write('                    self.top_drag = tkinter.Label(self.widget)\n')
    f.write("                self.top_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.top_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.top_drag.bind('<B1-Motion>',self.MoveDragSize_TL)\n")
    f.write("                self.top_drag.bind('<Leave>',self.LeaveDragBorder_TL)\n")
    f.write('                if self.left_drag == None:\n')
    f.write('                    self.left_drag = tkinter.Label(self.widget)\n')
    f.write('                self.left_drag.place(x = 0,y = 0,width = self.bordersize,height = formh)\n')
    f.write("                self.left_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.left_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.left_drag.bind('<B1-Motion>',self.MoveDragSize_TL)\n")
    f.write("                self.left_drag.bind('<Leave>',self.LeaveDragBorder_TL)\n")
    f.write('            if x >=(formw-self.bordersize) and x <= formw:\n')
    f.write('                if self.top_drag == None:\n')
    f.write('                    self.top_drag = tkinter.Label(self.widget)\n')
    f.write("                self.top_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.top_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.top_drag.bind('<B1-Motion>',self.MoveDragSize_TR)\n")
    f.write("                self.top_drag.bind('<Leave>',self.LeaveDragBorder_TR)\n")
    f.write('                if self.right_drag == None:\n')
    f.write('                    self.right_drag = tkinter.Label(self.widget)\n')
    f.write('                self.right_drag.place(x = formw-self.bordersize,y = 0,width = self.bordersize,height = formh)\n')
    f.write("                self.right_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.right_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.right_drag.bind('<B1-Motion>',self.MoveDragSize_TR)\n")
    f.write("                self.right_drag.bind('<Leave>',self.LeaveDragBorder_TR)\n")
    f.write('        if event.widget == self.bottom_drag:\n')
    f.write('            if x >=0 and x <= self.bordersize:\n')
    f.write('                if self.bottom_drag == None:\n')
    f.write('                    self.bottom_drag = tkinter.Label(self.widget)\n')
    f.write("                self.bottom_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.bottom_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.bottom_drag.bind('<B1-Motion>',self.MoveDragSize_BL)\n")
    f.write("                self.bottom_drag.bind('<Leave>',self.LeaveDragBorder_BL)\n")
    f.write('                if self.left_drag == None:\n')
    f.write('                    self.left_drag = tkinter.Label(self.widget)\n')
    f.write('                self.left_drag.place(x = 0,y = 0,width = self.bordersize,height = formh)\n')
    f.write("                self.left_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.left_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.left_drag.bind('<B1-Motion>',self.MoveDragSize_BL)\n")
    f.write("                self.left_drag.bind('<Leave>',self.LeaveDragBorder_BL)\n")
    f.write('            if x >=(formw-self.bordersize) and x <= formw:\n')
    f.write('                if self.bottom_drag == None:\n')
    f.write('                    self.bottom_drag = tkinter.Label(self.widget)\n')
    f.write("                self.bottom_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.bottom_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.bottom_drag.bind('<B1-Motion>',self.MoveDragSize_BR)\n")
    f.write("                self.bottom_drag.bind('<Leave>',self.LeaveDragBorder_BR)  \n")
    f.write('                if self.right_drag == None:\n')
    f.write('                    self.right_drag = tkinter.Label(self.widget)\n')
    f.write('                self.right_drag.place(x = formw-self.bordersize,y = 0,width = self.bordersize,height = formh)\n')
    f.write("                self.right_drag.bind('<ButtonPress-1>',self.StartDrag)\n")
    f.write("                self.right_drag.bind('<ButtonRelease-1>',self.StopDrag)\n")
    f.write("                self.right_drag.bind('<B1-Motion>',self.MoveDragSize_BR)\n")
    f.write("                self.right_drag.bind('<Leave>',self.LeaveDragBorder_BR)\n")
    f.write('    def LeaveDragBorder(self,event):\n')
    f.write('        event.widget.place_forget()\n')
    f.write('    def MoveDragSize_TL(self,event):\n')
    f.write('        deltaX = event.x_root - self.x\n')
    f.write('        deltaY = event.y_root - self.y\n')
    f.write('        newX = self.widget.winfo_x() + deltaX\n')
    f.write('        newY = self.widget.winfo_y() + deltaY\n')
    f.write('        newW = self.formw - deltaX\n')
    f.write('        newH = self.formh - deltaY\n')
    f.write('        WindowMaster = win32gui.GetParent(self.widget.winfo_id())\n')
    f.write('        if self.widget.overrideredirect() == True:\n')
    f.write('            win32gui.MoveWindow(WindowMaster,newX,newY,newW,newH,False)\n')
    f.write('        else:\n')
    f.write("            geoinfo = str('%dx%d+%d+%d'%(newW,newH,newX,newY))\n")
    f.write('            self.widget.geometry(geoinfo)\n')
    f.write('        self.left_drag.place(x = 0,y = 0,width = self.bordersize,height = self.newH)\n')
    f.write('        self.top_drag.place(x = 0,y = 0,width = newW,height = self.bordersize)\n')
    f.write('        self.x = event.x_root\n')
    f.write('        self.y = event.y_root\n')
    f.write("        self.widget.configure(cursor='plus')\n")
    f.write('        self.formw = newW\n')
    f.write('        self.formh = newH\n')
    f.write('    def LeaveDragBorder_TL(self,event):\n')
    f.write('        self.left_drag.place_forget()\n')
    f.write('        self.top_drag.place_forget()\n')
    f.write("        self.widget.configure(cursor='arrow')\n")
    f.write('    def MoveDragSize_TR(self,event):\n')
    f.write('        deltaX = event.x_root - self.x\n')
    f.write('        deltaY = event.y_root - self.y\n')
    f.write('        newX = self.widget.winfo_x()\n')
    f.write('        newY = self.widget.winfo_y() + deltaY\n')
    f.write('        newW = self.widget.winfo_width() + deltaX\n')
    f.write('        newH = self.widget.winfo_height() - deltaY\n')
    f.write('        WindowMaster = win32gui.GetParent(self.widget.winfo_id())\n')
    f.write('        if self.widget.overrideredirect() == True:\n')
    f.write('            win32gui.MoveWindow(WindowMaster,newX,newY,newW,newH,False)\n')
    f.write('        else:\n')
    f.write("            geoinfo = str('%dx%d+%d+%d'%(newW,newH,newX,newY))\n")
    f.write('            self.widget.geometry(geoinfo)\n')
    f.write('        self.right_drag.place(x = newW-self.bordersize,y = 0,width = self.bordersize,height = newH)\n')
    f.write('        self.top_drag.place(x = 0,y = 0,width = newW,height = self.bordersize)\n')
    f.write('        self.x = event.x_root\n')
    f.write('        self.y = event.y_root\n')
    f.write("        self.widget.configure(cursor='plus')\n")
    f.write('        self.formw = newW\n')
    f.write('        self.formh = newH\n')
    f.write('    def LeaveDragBorder_TR(self,event):\n')
    f.write('        self.right_drag.place_forget()\n')
    f.write('        self.top_drag.place_forget()\n')
    f.write("        self.widget.configure(cursor='arrow')\n")
    f.write('    def MoveDragSize_BL(self,event):\n')
    f.write('        deltaX = event.x_root - self.x\n')
    f.write('        deltaY = event.y_root - self.y\n')
    f.write('        newX = self.widget.winfo_x() + deltaX\n')
    f.write('        newY = self.widget.winfo_y()\n')
    f.write('        newW = self.widget.winfo_width() - deltaX\n')
    f.write('        newH = self.widget.winfo_height() + deltaY\n')
    f.write('        WindowMaster = win32gui.GetParent(self.widget.winfo_id())\n')
    f.write('        if self.widget.overrideredirect() == True:\n')
    f.write('            win32gui.MoveWindow(WindowMaster,newX,newY,newW,newH,False)\n')
    f.write('        else:\n')
    f.write("            geoinfo = str('%dx%d+%d+%d'%(newW,newH,newX,newY))\n")
    f.write('            self.widget.geometry(geoinfo)\n')
    f.write('        self.left_drag.place(x = 0,y = 0,width = self.bordersize,height = newH)\n')
    f.write('        self.bottom_drag.place(x = 0,y = newH-self.bordersize,width = newW,height = self.bordersize)\n')
    f.write('        self.x = event.x_root\n')
    f.write('        self.y = event.y_root\n')
    f.write("        self.widget.configure(cursor='plus')\n")
    f.write('        self.formw = newW\n')
    f.write('        self.formh = newH\n')
    f.write('    def LeaveDragBorder_BL(self,event):\n')
    f.write('        self.left_drag.place_forget()\n')
    f.write('        self.bottom_drag.place_forget()\n')
    f.write("        self.widget.configure(cursor='arrow')\n")
    f.write('    def MoveDragSize_BR(self,event):\n')
    f.write('        deltaX = event.x_root - self.x\n')
    f.write('        deltaY = event.y_root - self.y\n')
    f.write('        newX = self.widget.winfo_x()\n')
    f.write('        newY = self.widget.winfo_y()\n')
    f.write('        newW = self.widget.winfo_width() + deltaX\n')
    f.write('        newH = self.widget.winfo_height() + deltaY\n')
    f.write('        WindowMaster = win32gui.GetParent(self.widget.winfo_id())\n')
    f.write('        if self.widget.overrideredirect() == True:\n')
    f.write('            win32gui.MoveWindow(WindowMaster,newX,newY,newW,newH,False)\n')
    f.write('        else:\n')
    f.write("            geoinfo = str('%dx%d+%d+%d'%(newW,newH,newX,newY))\n")
    f.write('            self.widget.geometry(geoinfo)\n')
    f.write('        self.right_drag.place(x = newW-self.bordersize,y = 0,width = self.bordersize,height = newH)\n')
    f.write('        self.bottom_drag.place(x = 0,y = newH-self.bordersize,width = newW,height = self.bordersize)\n')
    f.write('        self.x = event.x_root\n')
    f.write('        self.y = event.y_root\n')
    f.write("        self.widget.configure(cursor='plus')\n")
    f.write('        self.formw = newW\n')
    f.write('        self.formh = newH\n')
    f.write('    def LeaveDragBorder_BR(self,event):\n')
    f.write('        self.right_drag.place_forget()\n')
    f.write('        self.bottom_drag.place_forget() \n')
    f.write("        self.widget.configure(cursor='arrow')\n")


#提示文字函数
def WriteTipTextFunction(f):
    f.write('ToolTipClick_X = 0\n')
    f.write('ToolTipClick_Y = 0\n')
    f.write('#提示类\n')
    f.write('class ToolTip(object):\n')
    f.write("    def __init__(self, widget,bgColor = '#CCCCCC',fgColor='#000000'):\n")
    f.write('        self.widget = widget\n')
    f.write('        self.tipwindow = None\n')
    f.write('        self.bgColor = bgColor\n')
    f.write('        self.fgColor = fgColor\n')
    f.write('        self.id = None\n')
    f.write('        self.x = 0\n')
    f.write('        self.y = 0\n')
    f.write("        self.font = tkinter.font.Font(family=\"Arial\", size=12,weight='normal',slant='roman',underline=0,overstrike=0)\n")
    f.write('    #显示提示\n')
    f.write('    def showtip(self, text ,x ,y):\n')
    f.write('        global ToolTipClick_X\n')
    f.write('        global ToolTipClick_Y\n')
    f.write('        if self.tipwindow or not text:\n')
    f.write('            return\n')
    f.write('        if ToolTipClick_X == x  and ToolTipClick_Y == y:\n')
    f.write('            return \n')
    f.write('        self.tipwindow = tkinter.Toplevel(self.widget)\n')
    f.write('        self.tipwindow.wm_overrideredirect(1)\n')
    f.write('        self.tipwindow.wm_attributes("-topmost", 1)\n')
    f.write('        maxwidth = 0\n')
    f.write('        maxheight = 24\n')
    f.write('        #label = tkinter.Label(self.tipwindow, text=self.text, justify=tkinter.LEFT,background=g_Scheme_FG2,fg=g_Scheme_BG2, relief=tkinter.SOLID, borderwidth=2,font=("Roman", "12", "normal"))\n')
    f.write('        if type(text) == type([]):\n')
    f.write('            self.text = ""\n')
    f.write('            TextLineArray = text\n')
    f.write('            for TextLine in TextLineArray:\n')
    f.write('                maxwidth = max(int(self.font.measure(TextLine)),maxwidth)\n')
    f.write('                self.text = self.text + TextLine \n')
    f.write('                maxheight = maxheight + 24\n')
    f.write('        else: \n')
    f.write('            self.text = text\n')
    f.write('            maxwidth = max(int(self.font.measure(text)),maxwidth)\n')
    f.write('        maxwidth = maxwidth + 24\n')
    f.write("        geoinfo = str('%dx%d+%d+%d'%(maxwidth,maxheight,x-int(maxwidth/2), y-30))\n")
    f.write('        self.tipwindow.wm_geometry(geoinfo)\n')
    f.write('        if type(text) == type([]):\n')
    f.write('            self.Text = tkinter.Text(self.tipwindow, width=maxwidth,background=self.bgColor,fg=self.fgColor, relief=tkinter.SOLID, borderwidth=2,font=self.font)\n')
    f.write('            self.Text.pack(ipadx=1)\n')
    f.write("            self.Text.bind('<Button-1>',self.clicktip)\n")
    f.write('            TextLineArray = text\n')
    f.write('            for TextLine in TextLineArray:\n')
    f.write("                self.Text.insert(tkinter.END,TextLine,'tag0')    \n")
    f.write('        else: \n')
    f.write('            maxwidth = max(self.font.measure(text),maxwidth)\n')
    f.write('            self.label = tkinter.Message(self.tipwindow, text=self.text, anchor=tkinter.W,width=maxwidth,background=self.bgColor,fg=self.fgColor, relief=tkinter.SOLID, borderwidth=2,font=self.font)\n')
    f.write('            self.label.pack(ipadx=1)\n')
    f.write("            self.label.bind('<Button-1>',self.clicktip)\n")
    f.write('    #点击隐藏提示\n')
    f.write('    def clicktip(self,event):\n')
    f.write('        global ToolTipClick_X\n')
    f.write('        global ToolTipClick_Y\n')
    f.write('        ToolTipClick_X = event.x\n')
    f.write('        ToolTipClick_Y = event.y\n')
    f.write('        self.hidetip()\n')
    f.write('    #隐藏提示\n')
    f.write('    def hidetip(self):\n')
    f.write('        tw = self.tipwindow\n')
    f.write('        self.tipwindow = None\n')
    f.write('        if tw:\n')
    f.write('            tw.destroy()\n')
    f.write('#创建提示\n')
    f.write("def CreateToolTip(uiName,elementName,tipText,bgColor = '#CCCCCC',fgColor='#000000'):\n")
    f.write('    Control = GetElement(uiName,elementName)\n')
    f.write('    if Control is None:\n')
    f.write('        return\n')
    f.write('    if hasattr(Control,"GetEntry") == True:\n')
    f.write('        Control = Control.GetEntry()\n')
    f.write('    elif hasattr(Control,"GetWidget") == True:\n')
    f.write('        Control = Control.GetWidget()\n')
    f.write('    toolTip = ToolTip(Control,bgColor,fgColor)\n')
    f.write('    def enter(event):\n')
    f.write('        toolTip.showtip(tipText,event.x_root,event.y_root)\n')
    f.write('    def leave(event):\n')
    f.write('        toolTip.hidetip()\n')
    f.write('    def click(event):\n')
    f.write('        toolTip.hidetip()\n')
    f.write("    Control.bind('<Enter>', enter,add=True)\n")
    f.write("    Control.bind('<Leave>', leave,add=True)\n")
    #f.write("    Control.bind('<Button-1>',click)\n")

#动作函数
def WriteWidgetActionFunction(f):
    f.write('def PlayAction_MoveTo(uiName,elementName,targetX,targetY,duration = 1.0,fps = 50):\n')
    f.write('    """'+Language.G_Language[6576]+'"""\n')
    f.write('    Control = GetElement(uiName,elementName)\n')
    f.write('    if Control is None:\n')
    f.write('        return\n')
    f.write('    InitTime = time.time()\n')
    f.write('    InitX = Control.winfo_x()\n')
    f.write('    InitY = Control.winfo_y()\n')
    f.write('    InitW = Control.winfo_width()\n')
    f.write('    InitH = Control.winfo_height()\n')
    f.write('    Delay = int(1000 / fps)\n')
    f.write('    def MovingLoop():\n')
    f.write('        CurrTime = time.time() - InitTime\n')
    f.write('        Progress = CurrTime / duration \n')
    f.write('        if Progress > 1.0:\n')
    f.write('            CurrX = targetX\n')
    f.write('            CurrY = targetY\n')
    f.write('            Control.place(x=int(CurrX),y=int(CurrY),width=InitW,height=InitH)\n')
    f.write('        else:\n')
    f.write('            CurrX = InitX + (targetX - InitX) * Progress \n')
    f.write('            CurrY = InitY + (targetY - InitY) * Progress \n')
    f.write('            Control.place(x=int(CurrX),y=int(CurrY),width=InitW,height=InitH)\n')
    f.write('            Control.after(Delay,MovingLoop)\n')
    f.write('    Control.after(Delay,MovingLoop)\n')
    f.write('def PlayAction_MoveBy(uiName,elementName,moveX=0,moveY=0,duration = 1.0,fps = 50):\n')
    f.write('    """'+Language.G_Language[6577]+'"""\n')
    f.write('    Control = GetElement(uiName,elementName)\n')
    f.write('    if Control is None:\n')
    f.write('        return\n')
    f.write('    InitTime = time.time()\n')
    f.write('    InitX = Control.winfo_x()\n')
    f.write('    InitY = Control.winfo_y()\n')
    f.write('    InitW = Control.winfo_width()\n')
    f.write('    InitH = Control.winfo_height()\n')
    f.write('    targetX = InitX + moveX\n')
    f.write('    targetY = InitY + moveY\n')
    f.write('    Delay = int(1000 / fps)\n')
    f.write('    def MovingLoop():\n')
    f.write('        CurrTime = time.time() - InitTime\n')
    f.write('        Progress = CurrTime / duration \n')
    f.write('        if Progress > 1.0:\n')
    f.write('            CurrX = targetX\n')
    f.write('            CurrY = targetY\n')
    f.write('            Control.place(x=int(CurrX),y=int(CurrY),width=InitW,height=InitH)\n')
    f.write('        else:\n')
    f.write('            CurrX = InitX + (targetX - InitX) * Progress \n')
    f.write('            CurrY = InitY + (targetY - InitY) * Progress \n')
    f.write('            Control.place(x=int(CurrX),y=int(CurrY),width=InitW,height=InitH)\n')
    f.write('            Control.after(Delay,MovingLoop)\n')
    f.write('    Control.after(Delay,MovingLoop)\n')
    f.write('def PlayAction_ScaleTo(uiName,elementName,anchor = "center",scaleW=1.0,scaleH=1.0,duration = 1.0,fps = 50):\n')
    f.write('    """'+Language.G_Language[6578]+'"""\n')
    f.write('    Control = GetElement(uiName,elementName)\n')
    f.write('    if Control is None:\n')
    f.write('        return\n')
    f.write('    InitTime = time.time()\n')
    f.write('    InitX = Control.winfo_x()\n')
    f.write('    InitY = Control.winfo_y()\n')
    f.write('    InitW = Control.winfo_width()\n')
    f.write('    InitH = Control.winfo_height()\n')
    f.write('    CenterX = InitX + InitW * 0.5\n')
    f.write('    CenterY = InitY + InitH * 0.5\n')
    f.write('    targetW = InitW * scaleW\n')
    f.write('    targetH = InitH * scaleH\n')
    f.write('    if anchor == "nw":\n')
    f.write('        targetX = InitX\n')
    f.write('        targetY = InitY\n')
    f.write('    elif anchor == "n":\n')
    f.write('        targetX = int(CenterX-targetW * 0.5)\n')
    f.write('        targetY = InitY\n')
    f.write('    elif anchor == "ne":\n')
    f.write('        targetX = InitX + InitW - targetW\n')
    f.write('        targetY = InitY\n')
    f.write('    elif anchor == "w":\n')
    f.write('        targetX = InitX\n')
    f.write('        targetY = int(CenterY-targetH * 0.5)\n')
    f.write('    elif anchor == "e":\n')
    f.write('        targetX = InitX + InitW - targetW\n')
    f.write('        targetY = int(CenterY-targetH * 0.5)\n')
    f.write('    elif anchor == "sw":\n')
    f.write('        targetX = InitX\n')
    f.write('        targetY = InitY + InitH - targetH\n')
    f.write('    elif anchor == "s":\n')
    f.write('        targetX = int(CenterX-targetW * 0.5)\n')
    f.write('        targetY = InitY + InitH - targetH\n')
    f.write('    elif anchor == "se":\n')
    f.write('        targetX = InitX + InitW - targetW\n')
    f.write('        targetY = InitY + InitH - targetH\n')
    f.write('    else:\n')
    f.write('        targetX = int(CenterX - targetW*0.5)\n')
    f.write('        targetY = int(CenterY - targetH*0.5)\n')
    f.write('    Delay = int(1000 / fps)\n')
    f.write('    def ScalingLoop():\n')
    f.write('        CurrTime = time.time() - InitTime\n')
    f.write('        Progress = CurrTime / duration \n')
    f.write('        if Progress > 1.0:\n')
    f.write('            Control.place(x=targetX,y=targetY,width=targetW,height=targetH)\n')
    f.write('        else:\n')
    f.write('            CurrX = InitX + (targetX - InitX) * Progress \n')
    f.write('            CurrY = InitY + (targetY - InitY) * Progress \n')
    f.write('            CurrW = InitW + (targetW - InitW) * Progress \n')
    f.write('            CurrH = InitH + (targetH - InitH) * Progress \n')
    f.write('            Control.place(x=int(CurrX),y=int(CurrY),width=CurrW,height=CurrH)\n')
    f.write('            Control.after(Delay,ScalingLoop)\n')
    f.write('    Control.after(Delay,ScalingLoop)\n')
    # f.write('def PlayAction_FadeIn(uiName,duration = 1.0,fps = 50):\n')
    # f.write('    """'+Language.G_Language[6586]+'"""\n')
    # f.write('def PlayAction_FadeOut(uiName,duration = 1.0,fps = 50):\n')  
    # f.write('    """'+Language.G_Language[6587]+'"""\n')
    # f.write('def PlayAction_Popup(uiName,duration = 1.0,fps = 50):\n')
    # f.write('    """'+Language.G_Language[6586]+'"""\n')
    # f.write('def PlayAction_Shrink(uiName,duration = 1.0,fps = 50):\n')  
    # f.write('    """'+Language.G_Language[6587]+'"""\n')


#写入圆角设置位置
def WriteSetRootRoundRectangleFunction(f):
    #f.write(Language.G_Language[1227]+'\n')
    f.write('def SetRootRoundRectangle(canvas,hastitlebar,x1, y1, x2, y2, radius=25,**kwargs):\n')
    f.write('    """'+Language.G_Language[1227]+'"""\n')
    f.write('    rootinfo = canvas.winfo_parent()\n')
    f.write('    root = canvas._nametowidget(rootinfo)\n')
    f.write('    DwmApi = ctypes.windll.dwmapi\n')
    f.write('    DwmSetWindowAttribute = DwmApi.DwmSetWindowAttribute\n')
    f.write('    WindowMaster = win32gui.GetParent(root.winfo_id())\n')
    f.write('    RoundValue = ctypes.c_int(4)\n')
    f.write('    DwmSetWindowAttribute(WindowMaster,33,ctypes.byref(RoundValue),ctypes.sizeof(RoundValue))\n')

    # f.write('    canvas.create_rectangle(x1, y1, x2, y2, fill=kwargs[\'outline\'])\n')
    # f.write('    if hastitlebar == True:\n')
    # f.write('        points = [x1, y1,\n')
    # f.write('              x1, y1,\n')
    # f.write('              x2, y1,\n')
    # f.write('              x2, y1,\n')
    # f.write('              x2, y1,\n')
    # f.write('              x2, y1,\n')
    # f.write('              x2, y1,\n')
    # f.write('              x2, y2-radius,\n')
    # f.write('              x2, y2-radius,\n')
    # f.write('              x2, y2,\n')
    # f.write('              x2-radius, y2,\n')
    # f.write('              x2-radius, y2,\n')
    # f.write('              x1+radius, y2,\n')
    # f.write('              x1+radius, y2,\n')
    # f.write('              x1, y2,\n')
    # f.write('              x1, y2-radius,\n')
    # f.write('              x1, y2-radius,\n')
    # f.write('              x1, y1,\n')
    # f.write('              x1, y1,\n')
    # f.write('              x1, y1]\n')
    # f.write('    else:\n')
    # f.write('        points = [x1+radius, y1,\n')
    # f.write('              x1+radius, y1,\n')
    # f.write('              x2-radius, y1,\n')
    # f.write('              x2-radius, y1,\n')
    # f.write('              x2, y1,\n')
    # f.write('              x2, y1+radius,\n')
    # f.write('              x2, y1+radius,\n')
    # f.write('              x2, y2-radius,\n')
    # f.write('              x2, y2-radius,\n')
    # f.write('              x2, y2,\n')
    # f.write('              x2-radius, y2,\n')
    # f.write('              x2-radius, y2,\n')
    # f.write('              x1+radius, y2,\n')
    # f.write('              x1+radius, y2,\n')
    # f.write('              x1, y2,\n')
    # f.write('              x1, y2-radius,\n')
    # f.write('              x1, y2-radius,\n')
    # f.write('              x1, y1+radius,\n')
    # f.write('              x1, y1+radius,\n')
    # f.write('              x1, y1]\n')
    # f.write('    return canvas.create_polygon(points, smooth=True, **kwargs)\n')

#打开目录
def SelectDirectoryFunction(f):
   f.write('def SelectDirectory(title="'+Language.G_Language[167]+'",initDir = os.path.abspath(\'.\'),parent=None):\n')
   f.write('    """'+Language.G_Language[1557]+'"""\n')
   f.write('    """'+Language.G_Language[9022]+'"""\n')
   f.write('    global G_TopDialog\n')
   f.write('    if G_TopDialog:\n')
   f.write('        parent = G_TopDialog\n')
   f.write('    import tkinter.filedialog\n')
   f.write('    openPath = tkinter.filedialog.askdirectory(title=title,initialdir=initDir,parent=parent)\n')
   f.write('    return openPath\n')

#打开目录
def SelectColorFunction(f):
   f.write('def SelectColor(title="'+Language.G_Language[456]+'"):\n')
   f.write('    """'+Language.G_Language[1558]+'"""\n')
   f.write('    import tkinter.colorchooser\n')
   f.write('    color = tkinter.colorchooser.askcolor(title=title)\n')
   f.write('    return color\n')
#罗列系统所有字体
def WriteEnumFontNameFunction(f):
   f.write('def EnumFontName():\n')
   f.write('    """'+Language.G_Language[1960]+'"""\n')
   f.write('    import tkinter.font\n')
   f.write('    return tkinter.font.families()\n')
#罗列系统所有字体
def WriteEnumFontNameFunction_App(f):
   f.write('def EnumFontName():\n')
   f.write('    """'+Language.G_Language[1960]+'"""\n')
   f.write('    import pygame.font\n')
   f.write("    return pygame.font.get_fonts()\n")
#罗列系统所有字体
def WriteSetCursorFunction_App(f):
    f.write("def SetCursor(uiName,elementName,cursor='hand2'):\n")
    f.write('    """'+Language.G_Language[1490]+'"""\n')
    f.write("    pass\n")
    f.write('def HideCursor(uiName):\n')
    f.write('    """'+Language.G_Language[1491]+'"""\n')
    f.write("    pass\n")
    f.write('def GetCursorPosition(uiName=\'\',elementName=\'root\'):\n')
    f.write('    """'+Language.G_Language[9805]+'"""\n')
    f.write("    pass\n")
#写入读取样式表数据
def WriteReadWriteFileFunction(f):
   #f.write(Language.G_Language[1228]+'\n')
   f.write("def ReadFromFile(filePath,encoding='utf-8',autoEval=False):\n")
   f.write('    """'+Language.G_Language[1228]+'"""\n')
   f.write('    content = None\n')
   f.write('    if filePath != None:\n')
   f.write("        if os.path.exists(filePath) == True: \n")
   f.write("            f = open(filePath,mode='r',encoding=encoding)\n")
   f.write('            if f != None:\n')
   f.write('                content = f.read()\n')
   f.write('                if autoEval == True:\n')
   f.write('                    content = eval(content)\n')
   f.write('                f.close()\n')
   f.write('    return content\n')
   f.write('def OpenFile(title="Open Python File",filetypes=[(\'Python File\',\'*.py\'),(\'All files\',\'*\')],initDir = \'\'):\n')
   f.write('    """'+Language.G_Language[187]+'"""\n')
   f.write('    import tkinter.filedialog\n')
   f.write('    import inspect\n')
   f.write('    parent = None\n')
   f.write('    calling_frame = inspect.currentframe().f_back\n')
   f.write('    if "uiName" in calling_frame.f_locals:\n')
   f.write('        uiName = calling_frame.f_locals["uiName"]\n')
   f.write('        parent = GetElement(uiName,"Form_1")\n')
   f.write('    openPath = tkinter.filedialog.askopenfilename(initialdir=initDir,title=title,filetypes=filetypes,parent=parent)\n')
   f.write('    return openPath\n')

   #f.write(Language.G_Language[1229]+'\n')
   f.write("def WriteToFile(filePath,content,encoding='utf-8',append=False):\n")
   f.write('    """'+Language.G_Language[1229]+'"""\n')
   f.write('    if filePath != None:\n')
   f.write('        f = None\n')
   f.write('        if append == True:\n')
   f.write("            f = open(filePath,mode='a',encoding=encoding)\n")
   f.write('        else:\n')
   f.write("            f = open(filePath,mode='w',encoding=encoding)\n")
   f.write('        if f != None:\n')
   f.write('            if content != None:\n')
   f.write('                f.write(str(content))\n')
   f.write('            f.close()\n')
   f.write('            return True\n')
   f.write('    return False\n')
   f.write('def SaveFile(title="Save Python File",filetypes=[(\'Python File\',\'*.py\'),(\'All files\',\'*\')],initDir = \'\',defaultextension=\'py\'):\n')
   f.write('    """'+Language.G_Language[188]+'"""\n')
   f.write('    import tkinter.filedialog\n')
   f.write('    import inspect\n')
   f.write('    parent = None\n')
   f.write('    calling_frame = inspect.currentframe().f_back\n')
   f.write('    if "uiName" in calling_frame.f_locals:\n')
   f.write('        uiName = calling_frame.f_locals["uiName"]\n')
   f.write('        parent = GetElement(uiName,"Form_1")\n')
   f.write('    savePath = tkinter.filedialog.asksaveasfilename(initialdir=initDir,title=title,filetypes=filetypes,defaultextension=defaultextension,parent=parent)\n')
   f.write('    return savePath\n')
#写入读取样式表数据
def WriteReadWriteFileFunction_Moblie(f):
   #f.write(Language.G_Language[1228]+'\n')
   f.write("def ReadFromFile(filePath,encoding='utf-8',autoEval=False):\n")
   f.write('    """'+Language.G_Language[1228]+'"""\n')
   f.write('    content = None\n')
   f.write('    if filePath != None:\n')
   f.write("        if os.path.exists(filePath) == True: \n")
   f.write("            f = open(filePath,mode='r',encoding=encoding)\n")
   f.write('            if f != None:\n')
   f.write('                content = f.read()\n')
   f.write('                if autoEval == True:\n')
   f.write('                    content = eval(content)\n')
   f.write('                f.close()\n')
   f.write('    return content\n')
   #f.write(Language.G_Language[1229]+'\n')
   f.write("def WriteToFile(filePath,content,encoding='utf-8'):\n")
   f.write('    """'+Language.G_Language[1229]+'"""\n')
   f.write('    if filePath != None:\n')
   f.write("        f = open(filePath,mode='w',encoding=encoding)\n")
   f.write('        if f != None:\n')
   f.write('            if content != None:\n')
   f.write('                f.write(str(content))\n')
   f.write('            f.close()\n')
   f.write('            return True\n')
   f.write('    return False\n')
#写入读取样式表数据
def WriteNativeCallBackFunction_Mobile(f):
   f.write('NativeCallBackDataList = {}\n')
   f.write('def NativeCallBack(eventName,eventdata):\n')
   f.write('    global NativeCallBackDataList\n')
   f.write('    NativeCallBackDataList[eventName] = eventdata\n')
   f.write('def OpenFile(title="Open Python File",filetypes=[(\'Python File\',\'*.py\'),(\'All files\',\'*\')],initDir = os.path.abspath(\'.\')):\n')
   f.write('    """'+Language.G_Language[187]+'"""\n')
   f.write('    global NativeCallBackDataList\n')
   f.write('    NativeCallBackDataList["openPhoto"]=None\n')
   f.write('    GameLib.gameAppInstance.GetCurrentScene().SetNativeCallBackFunction(NativeCallBack)\n')
   f.write('    GameLib.gameAppInstance.GetCurrentScene().CallNativeEvent("openPhoto")\n')
   f.write('    while NativeCallBackDataList["openPhoto"] is None:\n')
   f.write('        time.sleep(100)\n')
   f.write('    openPath = NativeCallBackDataList["openPhoto"]\n')
   f.write('    NativeCallBackDataList["openPhoto"]=None\n')
   f.write('    return openPath\n')
   f.write('def QuitApplication():\n')
   f.write('    GameLib.gameAppInstance.GetCurrentScene().CallNativeEvent("quit")\n')

#写入读取样式表数据
def WriteReadStyleFileFunction(f,exportMode=False,StyleArray=None):
    #f.write(Language.G_Language[1230]+'\n')
    if exportMode and StyleArray is not None:
        f.write('def ReadStyleFile(filePath):\n')
        f.write('    """'+Language.G_Language[1230]+'"""\n')
        f.write('    StyleArray = {}\n')
        for keyName in StyleArray.keys():
            f.write("    StyleArray['"+keyName+"'] = "+str(StyleArray[keyName])+"\n")
            f.write("    if 'font_family' in StyleArray['"+keyName+"'] and 'font_size' in StyleArray['"+keyName+"']  and 'font_weight' in StyleArray['"+keyName+"'] :\n")
            f.write("        StyleArray['"+keyName+"']['font'] = tkinter.font.Font(family=StyleArray['"+keyName+"']['font_family'], size=int(StyleArray['"+keyName+"']['font_size']),weight=StyleArray['"+keyName+"']['font_weight'])\n")
        f.write("    return StyleArray \n")
    else:
        f.write('def ReadStyleFile(filePath):\n')
        f.write('    """'+Language.G_Language[1230]+'"""\n')
        f.write('    global G_ExeDir\n')
        f.write('    StyleArray = {}\n')
        f.write('    if len(filePath)==0 :\n')
        f.write('        return StyleArray\n')
        f.write('    if os.path.exists(filePath) == False:\n')
        f.write('        PathName, FileName = os.path.split(filePath)\n')
        f.write('        filePath = os.path.join(G_ExeDir,FileName)\n')
        f.write('        if os.path.exists(filePath) == False:\n')
        f.write('            return StyleArray\n')
        f.write("    f = open(filePath,encoding='utf-8')\n")
        f.write('    line =""\n')
        f.write('    while True:\n')
        f.write('        line = f.readline()\n')
        f.write('        if not line:\n')
        f.write('            break\n')
        f.write('        text = line.strip()\n')
        f.write('        if not text:\n')
        f.write('            continue\n')
        f.write("        if text.find('style = tkinter.ttk.Style()') >= 0:\n")
        f.write("            continue\n")
        f.write("        if text.find('style.configure(') >= 0:\n")
        f.write("            splitarray1 = text.partition('style.configure(')\n")
        f.write("            stylename = None\n")
        f.write("            splitarray2 = None\n")
        f.write("            if splitarray1[2].find(',') >= 0:\n")
        f.write("                splitarray2 = splitarray1[2].partition(',')\n")
        f.write("                stylename = splitarray2[0].replace('\"','')\n")
        f.write("            else:\n")
        f.write("                splitarray2 = splitarray1[2].partition(')')\n")
        f.write("                stylename = splitarray2[0].replace('\"','')\n")
        f.write("            sytleValueText = splitarray2[2]\n")
        f.write("            fontindex_begin = sytleValueText.find('font=(')\n")
        f.write("            fontindex_end = fontindex_begin\n")
        f.write("            StyleArray[stylename] = {}\n")
        f.write("            othertext = sytleValueText\n")
        f.write("            if fontindex_begin >= 0:\n")
        f.write("                fontindex_end = sytleValueText.find(')')\n")
        f.write("                fonttext = sytleValueText[fontindex_begin+6:fontindex_end]\n")
        f.write("                fontsplitarray = fonttext.split(',')\n")
        f.write("                StyleArray[stylename]['font'] = tkinter.font.Font(family=fontsplitarray[0].replace('\"','').strip(), size=int(fontsplitarray[1].replace('\"','').strip()),weight=fontsplitarray[2].replace('\"','').strip())\n")
        f.write("                othertext = sytleValueText[0:fontindex_begin] + sytleValueText[fontindex_end+1:-1]\n")
        f.write("            else:\n")
        f.write("                splitarray4 = sytleValueText.partition(')')\n")
        f.write("                othertext = splitarray4[0]\n")
        f.write("            splitarray3 = othertext.split(',')\n")
        f.write("            for stylecfgtext in splitarray3:\n")
        f.write("                if stylecfgtext.find('=') > 0:\n")
        f.write("                    splitarray4 = stylecfgtext.partition('=')\n")
        f.write("                    key = splitarray4[0].replace('\"','').strip()\n")
        f.write("                    value = splitarray4[2].replace('\"','').strip()\n")
        f.write("                    StyleArray[stylename][key] = value\n")
        f.write("            continue\n")
        f.write("        if text.find('style.map(') >= 0:\n")
        f.write("            continue\n")
        f.write("    f.close()\n")
        f.write("    return StyleArray \n")

#数据源处理
def WriteDataBaseClass(f):
    #f.write('#Data DataBase Class\n')
    f.write('class DataBase:\n')
    f.write('    """'+Language.G_Language[1781]+'"""\n')
    f.write('    def __init__(self):\n')
    f.write('        self.SourceData = None\n')
    f.write('        self.SourceType = None\n')
    f.write('        self.Filename = None\n')
    f.write('        self.SheetName = None\n')
    f.write('        self.PageIndex = 0\n')
    f.write('        self.RecordCount = 0\n')
    f.write('        self.PageCount = 0\n')
    f.write('        self.RPP = 10\n')
    f.write('        self.Connect = None\n')
    f.write('        self.Cursor = None\n')
    f.write('        self.SQLiteTableColNameList = []\n')
    f.write('    def __del__(self):\n')
    f.write('        if self.Cursor:\n')
    f.write('             self.Cursor.close()\n')
    f.write('        if self.Connect:\n')
    f.write('             self.Connect.close()\n')
    f.write('    def OpenSQLITE(self,filename=None):\n')
    f.write('        """'+Language.G_Language[2619]+'"""\n')
    f.write('        Connect = None\n')
    f.write('        ConnectText = filename\n')
    f.write("        if filename == None or filename == '':\n")
    f.write('            ConnectText = ":memory:"\n')
    f.write('        try:\n')
    f.write('            import sqlite3\n')
    f.write('            Connect = sqlite3.connect(ConnectText)\n')
    f.write('            self.Connect = Connect\n')
    f.write('            self.Cursor = self.Connect.cursor()\n')
    f.write("            self.SourceType = 'SQLite'\n")
    f.write('            return True\n')
    f.write('        except sqlite3.Error:\n')
    f.write('            self.SourceData = None\n')
    f.write('        return False\n')
    f.write('    def OpenMYSQL(self,ip,port,user,password,database):\n')
    f.write('        """'+Language.G_Language[2619]+'"""\n')
    f.write('        try:\n')
    f.write('            import pymysql\n')
    f.write("            Connect = pymysql.connect(host=ip,port=int(port),user=user,password=password,database=database,charset='utf8',connect_timeout=3)\n")
    f.write('            self.Connect = Connect\n')
    f.write('            self.Cursor = self.Connect.cursor()\n')
    f.write("            self.SourceType = 'MySql'\n")
    f.write('            return True\n')
    f.write('        except Exception as Ex:\n')
    f.write('            print(Ex)\n')
    f.write('            self.SourceData = None\n')
    f.write('        return False\n')
    f.write('    def OpenSQLSERVER(self,ip,port,user,password,database):\n')
    f.write('        """'+Language.G_Language[2619]+'"""\n')
    f.write('        try:\n')
    f.write('            import pymssql\n')
    f.write("            Connect = pymssql.connect(host=ip,port=int(port),user=user,password=password,database=database,charset='utf8',timeout=3)\n")
    f.write("            self.SourceType = 'SQLServer'\n")
    f.write('            self.Connect = Connect\n')
    f.write('            self.Cursor = self.Connect.cursor()\n')
    f.write('            return True\n')
    f.write('        except Exception as Ex:\n')
    f.write('            print(Ex)\n')
    f.write('            self.SourceData = None\n')
    f.write('        return False\n')
    # f.write('    def ListDataBase(self):\n')
    # f.write('        """'+Language.G_Language[3460]+'"""\n')
    # f.write('        if self.SourceType:n')
    # f.write('            try:\n')
    # f.write('                if self.SourceType == "SQLite":\n')
    # f.write('                    self.Cursor.execute(\'show databases\')\n')
    # f.write('                if self.SourceType == "MYSQL":\n')
    # f.write('                    self.Cursor.execute(\'show databases\')\n')
    # f.write('                if self.SourceType == "SQLSERVER"\n')
    # f.write('                    self.Cursor.execute(\'select Name from master.dbo.sysdatabases\')\n')
    # f.write('                database_array = []\n')
    # f.write('                for database_name in self.Cursor.fetchall():\n')
    # f.write('                    database_array.append(database_name[0])\n')
    # f.write('                return database_array\n')
    # f.write('            except Exception as Ex:\n')
    # f.write('                print(Ex)\n')
    # f.write('        return False\n')
    f.write('    def ListTables(self):\n')
    f.write('        """'+Language.G_Language[3461]+'"""\n')
    f.write('        if self.SourceType:\n')
    f.write('            try:\n')
    f.write('                if self.SourceType == "SQLite":\n')
    f.write('                    self.Cursor.execute("select * from sqlite_master where type=\'table\'")\n')
    f.write('                    table_array = []\n')
    f.write('                    for table_name in self.Cursor.fetchall():\n')
    f.write('                        table_array.append(table_name[0])\n')
    f.write('                    return table_array\n')
    f.write('                if self.SourceType == "MYSQL":\n')
    f.write('                    self.Cursor.execute(\'show tables\')\n')
    f.write('                    table_array = []\n')
    f.write('                    for table_name in self.Cursor.fetchall():\n')
    f.write('                        table_array.append(table_name[0])\n')
    f.write('                    return table_array\n')
    f.write('                if self.SourceType == "SQLSERVER":\n')
    f.write('                    self.Cursor.execute("select name from sysobjects where xType=\'U\'")\n')
    f.write('                    table_array = []\n')
    f.write('                    for table_name in self.Cursor.fetchall():\n')
    f.write('                        table_array.append(table_name[0])\n')
    f.write('                    return table_array\n')
    f.write('            except Exception as Ex:\n')
    f.write('                print(Ex)\n')
    f.write('        return False\n')
    f.write('    def CreateTable(self,tablename,fieldlist=[]):\n')
    f.write('        """'+Language.G_Language[2611]+'"""\n')
    f.write('        if self.Connect and tablename:\n')
    f.write('            try:\n')
    f.write('                CreateCMDText = "CREATE TABLE IF NOT EXISTS "+tablename+"("\n')
    f.write('                FieldCount = len(fieldlist)\n')
    f.write('                FieldIndex = 0\n')
    f.write('                for field in fieldlist:\n')
    f.write('                    CreateCMDText = CreateCMDText + field \n')
    f.write('                    if FieldIndex < (FieldCount-1):\n')
    f.write('                        CreateCMDText = CreateCMDText + ","\n')
    f.write('                    FieldIndex = FieldIndex + 1\n')
    f.write('                CreateCMDText = CreateCMDText + ")"\n')
    f.write('                self.Cursor.execute(CreateCMDText)\n')
    f.write('                self.Connect.commit()\n')
    f.write('                return True\n')
    f.write('            except Exception as Ex:\n')
    f.write('                print(Ex)\n')
    f.write('        return False\n')
    f.write('    def SQLQuery(self,sqlString=None,params=None):    \n')
    f.write('        """'+Language.G_Language[2617]+'"""\n')
    f.write('        if self.Connect is not None and sqlString is not None:\n')
    f.write('            try:\n')
    f.write('                ResultArray = []\n')
    f.write('                if params:\n')
    f.write('                    self.Cursor.execute(sqlString,params)\n')
    f.write('                else:\n')
    f.write('                    self.Cursor.execute(sqlString)\n')
    f.write('                for row in self.Cursor.fetchall():\n')
    f.write('                    ResultArray.append(row)\n')
    f.write('                return ResultArray\n')
    f.write('            except Exception as Ex:\n')
    f.write('                print(Ex)\n')
    f.write('                self.SourceData = None\n')
    f.write('        return []\n')
    f.write('    def SQLCMD(self,sqlString=None,params=None):    \n')
    f.write('        """'+Language.G_Language[2618]+'"""\n')
    f.write('        if self.Connect is not None and sqlString is not None:\n')
    f.write('            try:\n')
    f.write('                if params:\n')
    f.write('                    self.Cursor.execute(sqlString,params)\n')
    f.write('                else:\n')
    f.write('                    self.Cursor.execute(sqlString)\n')
    f.write('                self.Connect.commit()\n')
    f.write('                return True\n')
    f.write('            except Exception as Ex:\n')
    f.write('                print(Ex)\n')
    f.write('        return False\n')
    f.write('    def CallProc(self,procName:"str",inParams:list = [],outParams:list = []):\n')
    f.write('        """'+Language.G_Language[2635]+'"""\n')
    f.write('        if self.Connect is not None and procName is not None:\n')
    f.write('            try:\n')
    f.write('                inParamsLength = 0\n')
    f.write('                params_list = []\n')
    f.write('                if inParams:\n')
    f.write('                    params_list = params_list + inParams\n')
    f.write('                    inParamsLength = len(inParams)\n')
    f.write('                if outParams:\n')
    f.write('                    params_list = params_list + outParams\n')
    f.write('                self.Cursor.callproc(procName,params_list)\n')
    f.write('                resParams = []\n')
    f.write('                if outParams:\n')
    f.write('                    out_parm_string = "select "\n')
    f.write('                    for x in range(len(outParams)):\n')
    f.write('                        out_parm_string = "{pre} @_{p}_{i},".format(pre=out_parm_string, p=procName, i=inParamsLength)\n')
    f.write('                        inParamsLength += 1\n')
    f.write('                    self.Connect.execute(out_parm_string[:-1])\n')
    f.write('                    resParams = list(self.Connect.fetchall()[0])\n')
    f.write('                return True,resParams\n')
    f.write('            except Exception as Ex:\n')
    f.write('                print(Ex)\n')
    f.write('        return False,[]\n')
    f.write('    def DropTable(self,tablename):\n')
    f.write('        """'+Language.G_Language[2612]+'"""\n')
    f.write('        if tablename is not None and self.Connect is not None:\n')
    f.write('            sqlString = "drop table " + tablename\n')
    f.write('            try:\n')
    f.write('                self.Cursor.execute(sqlString)\n')
    f.write('                self.Connect.commit()\n')
    f.write('                return True\n')
    f.write('            except Exception as Ex:\n')
    f.write('                print(Ex)\n')
    f.write('                self.SourceData = None\n')
    f.write('        return False\n')
    f.write('    def CalculatePages(self,recordcount,recordcountprepage):\n')
    f.write('        """'+Language.G_Language[1977]+'"""\n')
    f.write('        self.RecordCount = recordcount\n')
    f.write('        self.RPP = recordcountprepage\n')
    f.write('        self.PageCount = int(recordcount/self.RPP)\n')
    f.write('        if self.RecordCount > self.RPP*self.PageCount:\n')
    f.write('            self.PageCount = self.PageCount + 1\n')
    f.write('        self.PageIndex = 0\n')
    f.write('    def GetRecordCount(self):\n')
    f.write('        """'+Language.G_Language[1979]+'"""\n')
    f.write('        return self.RecordCount\n')
    f.write('    def GetPageCount(self):\n')
    f.write('        """'+Language.G_Language[1978]+'"""\n')
    f.write('        return self.PageCount\n')
    f.write('    def GetPageIndex(self):\n')
    f.write('        """'+Language.G_Language[1975]+'"""\n')
    f.write('        return self.PageIndex\n')
    f.write('    def SetPageIndex(self,pageindex):\n')
    f.write('        """'+Language.G_Language[1976]+'"""\n')
    f.write('        self.PageIndex = pageindex\n')
    f.write('    def GetBeginRecordIndex(self):\n')
    f.write('        """'+Language.G_Language[1980]+'"""\n')
    f.write('        return self.PageIndex*self.RPP\n')
    f.write('    def GetEndRecordIndex(self):\n')
    f.write('        """'+Language.G_Language[1981]+'"""\n')
    f.write('        EndRecordIndex = self.PageIndex*self.RPP + self.RPP\n')
    f.write('        if EndRecordIndex >= self.RecordCount:\n')
    f.write('            EndRecordIndex = self.RecordCount\n')
    f.write('        return EndRecordIndex-1\n')
    f.write('def LoadDynamicColumn(uiName,listViewName):\n')   
    f.write('    """'+Language.G_Language[1988]+'"""\n')
    f.write('    ListView_4 = GetElement(uiName,listViewName)\n')   
    f.write("    ColumnNameList = copy.deepcopy(ListView_4.cget('columns'))\n")   
    f.write("    NewColumnList = []\n")   
    f.write("    NewColumnNameList = []\n")   
    f.write("    for ColumnName in ColumnNameList:\n")   
    f.write('        ColumnAnchor = ListView_4.column(ColumnName,"anchor")\n')  
    f.write('        ColumnWidth = ListView_4.column(ColumnName,"width")\n')  
    f.write("        if ColumnName.find('>>') >= 0:\n")  
    f.write("            ColumnSplitArray = ColumnName.split('>>')\n")  
    f.write("            if len(ColumnSplitArray) == 3:\n")  
    f.write("                DataBaseName = ColumnSplitArray[0]\n")  
    f.write("                TableName = ColumnSplitArray[1]\n")  
    f.write("                FieldName = ColumnSplitArray[2]\n")  
    f.write("                DataBase = GetElement(uiName,DataBaseName)\n")  
    f.write('                RecordsetList = DataBase.SQLQuery("select "+FieldName+" from "+TableName)\n')  
    f.write('                for Recordset in RecordsetList:\n')  
    f.write('                    NewColumnList.append([Recordset[0],ColumnAnchor,ColumnWidth])\n')  
    f.write('                    NewColumnNameList.append(Recordset[0])\n')  
    f.write("            if len(ColumnSplitArray) == 4:\n")  
    f.write("                DataBaseName = ColumnSplitArray[0]\n")  
    f.write("                TableName = ColumnSplitArray[1]\n")  
    f.write("                FieldName = ColumnSplitArray[2]\n")  
    f.write("                WhereText = ColumnSplitArray[3]\n")  
    f.write("                DataBase = GetElement(uiName,DataBaseName)\n")  
    f.write('                RecordsetList = DataBase.SQLQuery("select "+FieldName+" from "+TableName+" where "+WhereText)\n')  
    f.write('                for Recordset in RecordsetList:\n')  
    f.write('                    NewColumnList.append([Recordset[0],ColumnAnchor,ColumnWidth])\n')  
    f.write('                    NewColumnNameList.append(Recordset[0])\n') 
    f.write('        else:\n')  
    f.write('            NewColumnList.append([ColumnName,ColumnAnchor,ColumnWidth])\n')  
    f.write('            NewColumnNameList.append(ColumnName)\n')  
    f.write('    ListView_4.configure(columns = NewColumnNameList)\n')  
    f.write('    for ColumnInfo in NewColumnList: \n')  
    f.write('        ListView_4.column(ColumnInfo[0],anchor=ColumnInfo[1],width=ColumnInfo[2])\n')  
    f.write('        ListView_4.heading(ColumnInfo[0],anchor=ColumnInfo[1],text=ColumnInfo[0])\n')  

#数据表
def WriteDataTableClass(f):
    #f.write('#Data Table Class\n')
    f.write('class DataTable:\n')
    f.write('    """'+Language.G_Language[1782]+'"""\n')
    f.write('    def __init__(self):\n')
    f.write('        self.TableData = None\n')
    f.write('        self.TableType = None\n')
    f.write('        self.Filename = None\n')
    f.write('        self.SheetName = None\n')
    f.write('        self.host = None\n')
    f.write('        self.port = None\n')
    f.write('        self.username = None\n')
    f.write('        self.password = None\n')
    f.write('        self.database = None\n')
    f.write('        self.Connect = None\n')
    f.write('        self.ListView = None\n')
    f.write('    def __del__(self):\n')
    f.write('        if self.Connect:\n')
    f.write('             self.Connect.close()\n')
    f.write('    def OpenExcel(self,filename,sheetname):\n')
    f.write('        if os.path.exists(filename) == True:\n')
    f.write('            try:\n')
    f.write('                self.TableData = pd.read_excel(filename,sheet_name=sheetname)\n')
    f.write("                self.TableType = 'Excel'\n")
    f.write('                self.Filename = filename\n')
    f.write('                self.SheetName = sheetname\n')
    f.write('                if self.SheetName and self.ListView:\n')
    f.write('                    self.LoadData(sheetname)\n')
    f.write('                return True\n')
    f.write('            except Exception as Ex:\n')
    f.write('                print(Ex)\n')
    f.write('                self.TableData = None\n')
    f.write('                return False\n')
    f.write('        else:\n')
    f.write('            return False\n')
    f.write('    def OpenSQLITE(self,fileormemory,sheetname):\n')
    f.write('        Connect = None\n')
    f.write('        ConnectText = fileormemory\n')
    f.write('        if ConnectText == "memory":\n')
    f.write('            ConnectText = ":memory:"\n')
    f.write('        try:\n')
    f.write('            import sqlite3\n')
    f.write('            Connect = sqlite3.connect(ConnectText)\n')
    f.write('        except sqlite3.Error:\n')
    f.write('            self.TableData = None\n')
    f.write('            return False\n')
    f.write('        if sheetname is not None and Connect is not None:\n')
    f.write('            sqlString = "selete * from " + sheetname\n')
    f.write('            try:\n')
    f.write('                self.TableData = pd.read_sql(sqlString,Connect)\n')
    f.write("                self.TableType = 'SQLite'\n")
    f.write('                self.Connect = Connect\n')
    f.write('                self.Filename = ConnectText\n')
    f.write('                self.SheetName = sheetname\n')
    f.write('                if self.SheetName and self.ListView:\n')
    f.write('                    self.LoadData(sheetname)\n')
    f.write('                return True\n')
    f.write('            except Exception as Ex:\n')
    f.write('                print(Ex)\n')
    f.write('                self.TableData = None\n')
    f.write('        return False\n')
    f.write('    def OpenMYSQL(self,ip,port,user,password,database,sheetname):\n')
    f.write('        try:\n')
    f.write('            import pymysql\n')
    f.write("            Connect = pymysql.connect(host=ip,port=int(port),user=user,password=password,database=database,charset='utf8')\n")
    f.write('        except :\n')
    f.write('            self.TableData = None\n')
    f.write('            return False\n')
    f.write('        if sheetname is not None and Connect is not None:\n')
    f.write('            try:\n')
    f.write('                sqlString = "selete * from " + sheetname\n')
    f.write('                self.TableData = pd.read_sql(sqlString,Connect)\n')
    f.write("                self.TableType = 'Mysql'\n")
    f.write('                self.Connect = Connect\n')
    f.write('                self.SheetName = sheetname\n')
    f.write('                self.host = ip\n')
    f.write('                self.port = port\n')
    f.write('                self.username = user\n')
    f.write('                self.password = password\n')
    f.write('                self.database = database\n')
    f.write('                if self.SheetName and self.ListView:\n')
    f.write('                    self.LoadData(sheetname)\n')
    f.write('                return True\n')
    f.write('            except Exception as Ex:\n')
    f.write('                print(Ex)\n')
    f.write('                self.TableData = None\n')
    f.write('        return True\n')
    f.write('    def OpenSQLSERVER(self,ip,port,user,password,database,sheetname):\n')
    f.write('        try:\n')
    f.write('            import pymssql\n')
    f.write("            Connect = pymssql.connect(host=ip,port=int(port),user=user,password=password,database=database,charset='utf8')\n")
    f.write('        except :\n')
    f.write('            self.TableData = None\n')
    f.write('            return False\n')
    f.write('        if sheetname is not None and Connect is not None:\n')
    f.write('            try:\n')
    f.write('                sqlString = "selete * from " + sheetname\n')
    f.write('                self.TableData = pd.read_sql(sqlString,Connect)\n')
    f.write("                self.TableType = 'SQLServer'\n")
    f.write('                self.Connect = Connect\n')
    f.write('                self.SheetName = sheetname\n')
    f.write('                self.host = ip\n')
    f.write('                self.port = port\n')
    f.write('                self.username = user\n')
    f.write('                self.password = password\n')
    f.write('                self.database = database\n')
    f.write('                if self.SheetName and self.ListView:\n')
    f.write('                    self.LoadData(sheetname)\n')
    f.write('                return True\n')
    f.write('            except Exception as Ex:\n')
    f.write('                print(Ex)\n')
    f.write('                self.TableData = None\n')
    f.write('        return True\n')
    f.write('    def getSQLResult(self):\n')
    f.write('        return self.TableData\n')
    f.write('    def BindingListView(self,uiName = None,elementName = None):\n')
    f.write('        if uiName and elementName:\n')
    f.write('            if GetElementType(uiName,elementName) == "ListView":\n')
    f.write('                self.ListView = GetElement(uiName,elementName)\n')
    f.write('                return True\n')
    f.write('        return False\n')
    f.write("    def LoadData(self,sheetname):\n")
    f.write('        if self.ListView is not None:\n')
    f.write('            self.DeleteAllLines()\n')
    f.write('            if sheetname is not None:\n')
    f.write('                try:\n')
    f.write('                    if sheetname != self.SheetName:\n')
    f.write("                        if self.TableType == 'Excel':\n")
    f.write('                            if os.path.exists(self.Filename) == True:\n')
    f.write('                                self.TableData = pd.read_excel(self.Filename,sheet_name=sheetname)\n')
    f.write('                            else:\n')
    f.write('                                return False\n')
    f.write("                        if self.TableType == 'SQLite' or self.TableType == 'Mysql' or self.TableType == 'SQLServer':\n")
    f.write('                            sqlString = "selete * from " + sheetname\n')
    f.write('                            if self.Connect is not None:\n')
    f.write('                                self.TableData = pd.read_sql(sqlString,self.Connect)   \n')
    f.write('                            else:\n')
    f.write('                                return False\n')
    f.write('                        self.SheetName = sheetname\n')
    f.write('                    self.ListView.configure(show = "headings")\n')
    f.write('                    self.ListView.configure(selectmode = "extended")\n')
    f.write('                    columns_list = self.TableData.columns.tolist()\n')
    f.write('                    self.ListView.configure(columns = columns_list)\n')
    f.write('                    placeinfo = self.ListView.place_info()\n')
    f.write('                    columnWidth = int(placeinfo["width"])\n')
    f.write('                    if len(columns_list) > 0:\n')
    f.write('                        columnWidth = int(columnWidth / len(columns_list))\n')
    f.write('                    for column_name in columns_list:\n')
    f.write('                        self.ListView.column(column_name,anchor="center",width=columnWidth)\n')
    f.write('                        self.ListView.heading(column_name,text=column_name)\n')
    f.write('                    if len(self.TableData.values):\n')
    f.write('                        i = 0\n')
    f.write('                        for item in self.TableData.values:\n')
    f.write("                            self.ListView.insert('',i,values=item.tolist())\n")
    f.write('                            i = i + 1\n')
    f.write('                    return True\n')
    f.write('                except :\n')
    f.write('                    self.TableData = None\n')
    f.write('        return False\n')
    f.write('    def SaveData(self,sheetname = None):\n')
    f.write('        if self.ListView is not None:\n')
    f.write('            self.TableData = self.TableData.drop(index = self.TableData.index)\n')
    f.write('            for item in self.ListView.get_children():\n')
    f.write("                item_value = self.ListView.item(item,'values')  \n")
    f.write('                self.TableData.append(item_value) \n')
    f.write("            if self.TableType == 'Excel':\n")
    f.write('                self.TableData.to_excel(self.Filename, sheet_name=sheetname)\n')
    f.write("            elif self.TableType == 'SQLite':\n")
    f.write('                con_engine = create_engine("sqlite:///"+self.Filename)\n')
    f.write("                self.TableData.to_sql(sheetname, con=engine, if_exists='replace', index=False)\n")
    f.write("            elif self.TableType == 'MySQL':\n")
    f.write("                from sqlalchemy import create_engine\n")
    f.write("                con_engine = create_engine('mysql+pymysql://{}:{}@{}/{}'.format(self.username, self.password, self.host, self.database)) \n")
    f.write("                self.TableData.to_sql(sheetname, con=engine, if_exists='replace', index=False)\n")
    f.write("            elif self.TableType == 'MSSQL':\n")
    f.write("                from sqlalchemy import create_engine\n")
    f.write("                import urllib\n")
    f.write("                params = urllib.parse.quote_plus('DRIVER={ODBC Driver 13 for SQL Server};'+'SERVER='+self.host+';DATABASE='+self.database+';UID='+self.username+';PWD='+ self.password)\n")
    f.write('                engine = create_engine("mssql+pyodbc:///?odbc_connect=%s" % params)\n')
    f.write('                reload(sys)\n')
    f.write("                sys.setdefaultencoding('utf8')\n")
    f.write("                self.TableData.to_sql(sheetname, con=engine, if_exists='replace', index=False)\n")
    f.write('    def InsertLine(self,row,values):\n')
    f.write('        if self.ListView is not None:\n')
    f.write("            self.ListView.insert('',row,values=values)\n")
    f.write('    def AppendLine(self,values):\n')
    f.write('        if self.ListView is not None:\n')
    f.write("            self.ListView.insert('',-1,values=values)\n")
    f.write('    def DeleteLine(self,row):\n')
    f.write('        if self.ListView is not None:\n')
    f.write('            index = 0\n')
    f.write('            for item in self.ListView.get_children():\n')
    f.write('                if index == row:\n')
    f.write('                    self.ListView.delete(item)\n')
    f.write('                    return \n')
    f.write('                index = index + 1\n')
    f.write('    def DeleteAllLines(self):\n')
    f.write('        if self.ListView is not None:\n')
    # f.write('            for item in self.ListView.get_children():\n')
    # f.write('                self.ListView.delete(item)\n')
    f.write('            if len(self.ListView.get_children()) > 0:\n')
    f.write('                self.ListView.delete(*self.ListView.get_children())\n')

    f.write('    def ModifyValue(self,row,column,text):\n')
    f.write('        if self.ListView is not None:\n')
    f.write('            self.ListView.item(row,column=column,text=text)\n')
    f.write('    #Read EXCEL File\n')
    f.write('    def ReadEXCELFile(self,filename,encoding,sheetname = "Sheet1",uiName = None,elementName = None):\n')
    f.write('        if self.BindingListView(uiName,elementName) == False:\n')
    f.write('            return False\n')
    f.write('        if self.OpenExcel(filename,sheetname) == False:\n')
    f.write('            return False\n')
    f.write('        return self.LoadData(sheetname)\n')
    f.write('    #Read MYSQL \n')
    f.write("    def ReadMYSQL(self,ip='localhost',port=3306,user='root',password='123456',database='',sheetname = '',uiName = None,elementName = None):\n")
    f.write('        if self.BindingListView(uiName,elementName) == False:\n')
    f.write('            return False\n')
    f.write('        return self.OpenMYSQL(ip,port,user,password,database,sheetname)\n')
    f.write('    #Read SQLServer \n')
    f.write("    def ReadSQLSERVER(self,ip='localhost',port=1433,user='sa',password='123456',database='',sheetname = '',uiName = None,elementName = None):\n")
    f.write('        if self.BindingListView(uiName,elementName) == False:\n')
    f.write('            return False\n')
    f.write('        return self.OpenSQLSERVER(ip,port,user,password,database,sheetname)\n')

#读取TXT            
def WriteFileReader_ReadTXT(f,runMode,exportMode):
    #f.write('#Read TXT File\n')
    f.write('def FileReader_ReadTXTFile(filename = None,encoding="utf-8",uiName = None,elementName = None):\n')
    f.write('    """Read TXT File"""\n')
    f.write('    global G_ResDir\n')
    f.write('    if filename is None:\n')
    f.write("       return ['TXT','No File']\n")
    if exportMode:
        if runMode == 'android':
            f.write('    realpath = GameLib.Res.GetResPath(filename)\n')
            f.write('    if realpath is not None:\n')
        else:
            f.write('    realpath = os.path.join(G_ResDir,filename)\n')
            f.write('    if os.path.exists(realpath) == True:\n')
    else:
        if runMode == 'android':
            f.write('    realpath = GameLib.Res.GetResPath(filename)\n')
            f.write('    if realpath is not None:\n')
        else:
            f.write('    realpath = filename\n')
            f.write('    if os.path.exists(realpath) == True:\n')
    f.write('        try:\n')
    f.write('            with open(realpath,encoding = encoding) as f:\n')
    f.write('                content = f.read()\n')
    f.write('                if uiName and elementName:\n')
    f.write('                    SetText(uiName,elementName,content)\n')
    f.write("                    return ['TXT',content]\n")
    f.write('        except FileNotFoundError:\n')
    f.write('            if uiName and elementName:\n')
    f.write('                    SetText(uiName,elementName,"FileNotFoundError:"+realpath)\n')
    f.write("            return ['TXT',\"FileNotFoundError:\"+realpath]\n")
    f.write('    if uiName and elementName:\n')
    f.write('            SetText(uiName,elementName,"FileNotFoundError:"+realpath)\n')
    f.write("    return ['TXT',\"FileNotFoundError:\"+realpath]\n")
#读取CSV
def WriteFileReader_ReadCSV(f,runMode,exportMode):
    #f.write('#Read CSV File\n')
    f.write('def FileReader_ReadCSVFile(filename,encoding,uiName = None,elementName = None):\n')
    f.write('    """Read CSV File"""\n')
    f.write('    global G_ResDir\n')
    f.write('    if filename is None:\n')
    f.write("       return ['CSV','No File']\n")
    if exportMode:
        if runMode == 'android':
            f.write('    realpath = GameLib.Res.GetResPath(filename)\n')
            f.write('    if realpath is not None:\n')
        else:
            f.write('    realpath = os.path.join(G_ResDir,filename)\n')
            f.write('    if os.path.exists(realpath) == True:\n')
    else:
        if runMode == 'android':
            f.write('    realpath = GameLib.Res.GetResPath(filename)\n')
            f.write('    if realpath is not None:\n')
        else:
            f.write('    realpath = filename\n')
            f.write('    if os.path.exists(realpath) == True:\n')
    f.write('        try:\n')
    f.write('            with open(realpath,encoding = encoding) as f:\n')
    f.write('                content = f.read()\n')
    f.write('                if uiName and elementName:\n')
    f.write('                    SetText(uiName,elementName,content)\n')
    f.write("                    return ['CSV',content]\n")
    f.write('        except FileNotFoundError:\n')
    f.write('            if uiName and elementName:\n')
    f.write('                    SetText(uiName,elementName,"FileNotFoundError:"+realpath)\n')
    f.write("            return ['CSV',\"FileNotFoundError:\"+realpath]\n")
    f.write('    if uiName and elementName:\n')
    f.write('            SetText(uiName,elementName,"FileNotFoundError:"+realpath)\n')
    f.write("    return ['CSV',\"FileNotFoundError:\"+realpath]\n")
#读取JSON
def WriteFileReader_ReadJSON(f,runMode,exportMode):
    #f.write('#Read JSON File\n')
    f.write('def FileReader_ReadJSONFile(fileorurl,encoding,uiName = None,elementName = None):\n')
    f.write('    """Read JSON File"""\n')
    f.write('    global G_ResDir\n')
    f.write('    if fileorurl is None:\n')
    f.write("       return ['JSON','No File']\n")
    f.write('    if fileorurl.find("http:") >= 0 or fileorurl.find("https:") >= 0 :\n')
    f.write('        content = requests.get(fileorurl).json()\n')
    f.write('        if uiName and elementName:\n')
    f.write('            SetText(uiName,elementName,content)\n')
    f.write('        return [\'JSON\',content]\n')
    if exportMode:
        if runMode == 'android':
            f.write('    realpath = GameLib.Res.GetResPath(fileorurl)\n')
            f.write('    if realpath is not None:\n')
        else:
            f.write('    realpath = os.path.join(G_ResDir,fileorurl)\n')
            f.write('    if os.path.exists(realpath) == True:\n')
    else:
        if runMode == 'android':
            f.write('    realpath = GameLib.Res.GetResPath(fileorurl)\n')
            f.write('    if realpath is not None:\n')
        else:
            f.write('    realpath = fileorurl\n')
            f.write('    if os.path.exists(realpath) == True:\n')
    f.write('        try:\n')
    f.write('            with open(realpath,encoding = encoding) as f:\n')
    f.write('                content = f.read()\n')
    f.write('                if uiName and elementName:\n')
    f.write('                    SetText(uiName,elementName,content)\n')
    f.write("                    return ['JSON',content]\n")
    f.write('        except FileNotFoundError:\n')
    f.write('            if uiName and elementName:\n')
    f.write('                    SetText(uiName,elementName,"FileNotFoundError:"+realpath)\n')
    f.write("            return ['JSON',\"FileNotFoundError:\"+realpath]\n")
    f.write('    if uiName and elementName:\n')
    f.write('            SetText(uiName,elementName,"FileNotFoundError:"+realpath)\n')
    f.write("    return ['JSON',\"FileNotFoundError:\"+realpath]\n")
#读取JSON
def WriteFileReader_ReadXML(f,runMode,exportMode):
    #f.write('#Read XML File\n')
    f.write('def FileReader_ReadXMLFile(filename,encoding,uiName = None,elementName = None):\n')
    f.write('    """Read XML File"""\n')
    f.write('    global G_ResDir\n')
    f.write('    if filename is None:\n')
    f.write("       return ['XML','No File']\n")
    if exportMode:
        if runMode == 'android':
            f.write('    realpath = GameLib.Res.GetResPath(filename)\n')
            f.write('    if realpath is not None:\n')
        else:
            f.write('    realpath = os.path.join(G_ResDir,filename)\n')
            f.write('    if os.path.exists(realpath) == True:\n')
    else:
        if runMode == 'android':
            f.write('    realpath = GameLib.Res.GetResPath(filename)\n')
            f.write('    if realpath is not None:\n')
        else:
            f.write('    realpath = filename\n')
            f.write('    if os.path.exists(realpath) == True:\n')
    f.write('        try:\n')
    f.write('            with open(realpath,encoding = encoding) as f:\n')
    f.write('                content = f.read()\n')
    f.write('                if uiName and elementName:\n')
    f.write('                    SetText(uiName,elementName,content)\n')
    f.write("                    return ['XML',content]\n")
    f.write('        except FileNotFoundError:\n')
    f.write('            if uiName and elementName:\n')
    f.write('                SetText(uiName,elementName,"FileNotFoundError:"+realpath)\n')
    f.write("            return ['XML',\"FileNotFoundError:\"+realpath]\n")
    f.write('    if uiName and elementName:\n')
    f.write('            SetText(uiName,elementName,"FileNotFoundError:"+realpath)\n')
    f.write("    return ['XML',\"FileNotFoundError:\"+realpath]\n")
#读取WEB
def WriteFileReader_ReadWEB(f):
    #f.write('#Read WEBFile\n')
    f.write('def FileReader_ReadWEBFile(fileorurl,encoding,uiName = None,elementName = None):\n')
    f.write('    """Read WEB File"""\n')
    f.write('    if fileorurl is None:\n')
    f.write("       return ['WEB','No File']\n")
    f.write('    if fileorurl.find("http:") >= 0 or fileorurl.find("https:") >= 0 :\n')
    f.write('        try:\n')
    f.write('            response = request.urlopen(fileorurl)\n')
    f.write('            if response is not None:\n')
    f.write('                content = response.read()\n')
    f.write('                if uiName and elementName:\n')
    f.write('                    SetText(uiName,elementName,content)\n')
    f.write('                return [\'WEB\',content]\n')
    f.write('            else:\n')
    f.write("                return ['WEB','Can\'t visit '+fileorurl]\n")
    f.write('        except :\n')
    f.write('            if uiName and elementName:\n')
    f.write('               SetText(uiName,elementName,"Find visit:"+fileorurl)\n')
    f.write("            return ['WEB','Can\'t visit '+fileorurl]\n")
    f.write('    elif os.path.exists(fileorurl) == True:\n')
    f.write('        f = open(fileorurl,mode=\'r\',encoding=encoding)\n')
    f.write('        content = f.read()\n')
    f.write('        f.close()\n')
    f.write('        if uiName and elementName:\n')
    f.write('            SetText(uiName,elementName,content)\n')
    f.write('        return [\'WEB\',content]\n')
    f.write("    return ['WEB','No File']\n")
#读取SOCKET
def WriteFileReader_ReadSOCKET(f):
    #f.write('#Read Socket\n')
    f.write('def FileReader_ReadSOCKET(IP,port,uiName = None,elementName = None):\n')
    f.write('    """Read Data From Socket """\n')
    f.write('    if IP is None:\n')
    f.write("       return ['SOCKET','No IP']\n")
    f.write('    if IP.find(".") >= 0:\n')
    f.write('        socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n')
    f.write('        result = socket.connect((IP,port))\n')
    f.write('        if result == 0:\n')
    f.write('            content = self.socket.recv(1024)\n')
    f.write('            if uiName and elementName:\n')
    f.write('                SetText(uiName,elementName,content)\n')
    f.write('        return [\'SOCKET\',content]\n')
    f.write('    return None\n')
#读取SQLITE
def WriteFileReader_ReadSQLITE(f):
    #f.write('#Read SQLITE\n')
    f.write('def FileReader_ReadSQLITE(fileormemory,sqlstring = None,uiName = None,elementName = None):\n')
    f.write('    """Read Data From SQLITE """\n')
    f.write('    Connect = None\n')
    f.write('    ConnectText = fileormemory\n')
    f.write('    if ConnectText == "memory":\n')
    f.write('        ConnectText = ":memory:"\n')
    f.write('    try:\n')
    f.write('        Connect = sqlite3.connect(ConnectText)\n')
    f.write('    except sqlite3.Error:\n')
    f.write('        return None\n')
    f.write('    if sqlstring is not None and Connect is not None:\n')
    f.write('        content = pd.read_sql(sqlstring,Connect)\n')
    f.write('        if uiName and elementName:\n')
    f.write('            SetText(uiName,elementName,content)\n')
    f.write('        return [\'SQLITE\',Connect]\n')
    f.write('    return None\n')
#读取MYSQL
def WriteFileReader_ReadMYSQL(f):
    #f.write('#Read MYSQL\n')
    f.write('def FileReader_ReadMYSQL(host,port,user,password,database,sqlstring,uiName = None,elementName = None):\n')
    f.write('    """Read Data From MYSQL """\n')
    f.write('    Connect = pymysql.connect(host=host,port=port,user=user,password=password,database=database,charset=\'utf8\')\n')
    f.write('    if sqlstring is not None and Connect is not None:\n')
    f.write('        content = pd.read_sql(sqlstring,Connect)\n')
    f.write('        if uiName and elementName:\n')
    f.write('            SetText(uiName,elementName,content)\n')
    f.write('        return [\'MYSQL\',Connect]\n')
    f.write('    return None\n')
#读取SQLSERVER
def WriteFileReader_ReadSQLSERVER(f):
    #f.write('#Read SQLSERVER\n')
    f.write('def FileReader_ReadSQLSERVER(host,port,user,password,database,sqlstring,uiName = None,elementName = None):\n')
    f.write('    """Read Data From SQLSERVER """\n')
    f.write('    Connect = pymssql.connect(host=host,port=port,user=user,password=password,database=database,charset=\'utf8\')\n')
    f.write('    if sqlstring is not None and Connect is not None:\n')
    f.write('        content = pd.read_sql(sqlstring,Connect)\n')
    f.write('        if uiName and elementName:\n')
    f.write('            SetText(uiName,elementName,content)\n')
    f.write('        return [\'SQLSERVER\',Connect]\n')
    f.write('    return None\n')
#读取MONGODB
def WriteFileReader_ReadMONGODB(f):
    #f.write('#Read MONGODB\n')
    f.write('def FileReader_ReadMONGODB(host,port,user,password,database,sqlstring,uiName = None,elementName = None):\n')
    f.write('    """Read Data From MONGODB """\n')
    f.write('    if user and password:\n')
    f.write('        mongo_uri = \'mongodb://%s:%s@%s:%s/%s\' % (username, password, host, port, database)\n')
    f.write('        Connect = MongoClient(mongo_uri)\n')
    f.write('    else:\n')
    f.write('        Connect = MongoClient(host=host,port=port)\n')
    f.write('    if sqlstring is not None and Connect is not None:\n')
    f.write('        dbObj = Connect[database]\n')
    f.write('        content = self.dbObj[querystring]\n')
    f.write('        if uiName and elementName:\n')
    f.write('            SetText(uiName,elementName,content)\n')
    f.write('        return [\'MONGODB\',dbObj]\n')
    f.write('    return None\n')
#摄像头
def WriteFileReader(f):
    f.write('#Create A Empty FileReader\n')
    f.write('def FileReader():\n')
    f.write('    return None\n')
#播放器
def WriteAudioPlayer(f,runMode='windows'):
    #f.write('#Create AudioPlayer\n')
    f.write('class AudioPlayer():\n')
    f.write('    """'+Language.G_Language[1785]+'"""\n')
    f.write('    def __init__(self,filename=None):\n')
    f.write('        self.filename = None\n')
    f.write('        self.state_flag = 0\n')
    f.write('        self.time_total = 0\n')
    f.write("        self.isbgm = True\n")
    f.write('        self.channel = None\n')
    f.write('        self.soundID = 0\n')
    f.write('        if filename:\n')
    f.write('            self.LoadFile(filename)\n')
    f.write('    def LoadFile(self,filename,isbgm=True):\n')
    f.write('        """'+Language.G_Language[1250]+'"""\n')
    f.write('        global G_ResDir\n')
    f.write('        try:\n')
    if runMode == 'android':
        f.write('            audioPath, autioFile = os.path.split(filename)\n')
        f.write('            realpath = GameLib.Res.GetResPath(autioFile)\n')
        f.write('            if realpath is not None:\n')
    else:
        f.write('            realpath = filename\n')
        f.write('            if os.path.exists(realpath) == False:\n')
        f.write('                realpath = os.path.join(G_ResDir,filename)\n')
        f.write('            if os.path.exists(realpath) == True:\n')
    f.write('                if isbgm == True:\n')
    f.write('                    mixer.music.load(realpath)\n')
    f.write('                else:\n')
    f.write('                    self.channel = mixer.find_channel()\n')
    f.write('                    self.soundID = mixer.Sound(realpath)\n')
    if runMode == 'windows':
        f.write('                media_info = MediaInfo.parse(realpath)\n')
        f.write('                data = media_info.to_json()\n')
        f.write('                data2 = json.loads(data)\n')
        f.write("                if 'tracks' in data2:\n")
        f.write("                    track0 = data2['tracks'][0]\n")
        f.write('                    duration = track0["duration"]\n')
        f.write('                    self.time_total = duration * 1000\n')
    else:
        f.write('                    self.time_total = 0\n')
    f.write('                self.isbgm = isbgm\n')
    f.write('                self.filename = realpath\n')
    f.write('                return True\n')
    f.write('        except Exception as e:\n')
    f.write('            print(e)\n')
    f.write('        return False\n')
    #f.write('    '+Language.G_Language[1251]+'\n')
    f.write('    def Play(self):\n')
    f.write('        """'+Language.G_Language[1251]+'"""\n')
    f.write('        try:\n')
    f.write('            if self.filename is not None:\n')
    f.write('                if self.isbgm == False:\n')
    f.write('                    if self.channel: \n')
    f.write('                        self.channel.play(self.soundID)\n')
    f.write('                else:\n')
    f.write('                    mixer.music.play()\n')
    f.write('                self.state_flag = 1\n')
    f.write('                return True\n')
    f.write('        except Exception as e:\n')
    f.write('            print(e)\n')
    f.write('        return False\n')
    #f.write('    '+Language.G_Language[1273]+'\n')
    f.write('    def Pause(self):\n')
    f.write('        """'+Language.G_Language[1273]+'"""\n')
    f.write('        try:\n')
    f.write('            if self.state_flag == 1:\n')
    f.write('                if self.isbgm == False:\n')
    f.write('                    if self.channel:  \n')
    f.write('                        self.channel.pause()\n')
    f.write('                else:\n')
    f.write('                    mixer.music.pause()\n')
    f.write('                return True\n')
    f.write('        except Exception as e:\n')
    f.write('            print(e)\n')
    f.write('        return False\n')
    #f.write('    '+Language.G_Language[1274]+'\n')
    f.write('    def Resume(self):\n')
    f.write('        """'+Language.G_Language[1274]+'"""\n')
    f.write('        try:\n')
    f.write('            if self.state_flag == 1:\n')
    f.write('                if self.isbgm == False:\n')
    f.write('                    if self.channel:  \n')
    f.write('                        self.channel.unpause()\n')
    f.write('                else:\n')
    f.write('                    mixer.music.unpause()\n')
    f.write('                return True\n')
    f.write('        except Exception as e:\n')
    f.write('            print(e)\n')
    f.write('        return False\n')
    #f.write('    '+Language.G_Language[1255]+'\n')
    f.write('    def Stop(self):\n')
    f.write('        """'+Language.G_Language[1255]+'"""\n')
    f.write('        try:\n')
    f.write('            if self.state_flag == 1:\n')
    f.write('                if self.isbgm == False:\n')
    f.write('                    if self.channel:  \n')
    f.write('                        self.channel.stop()\n')
    f.write('                else:\n')
    f.write('                    mixer.music.stop()\n')
    f.write('                self.state_flag = 0\n')
    f.write('                return True\n')
    f.write('        except Exception as e:\n')
    f.write('            print(e)\n')
    f.write('        return False\n')
    f.write('    def SetVolume(self,volume):\n')
    f.write('        """'+Language.G_Language[1275]+'"""\n')
    f.write('        try:\n')
    f.write('            if self.isbgm == False:\n')
    f.write('                if self.channel:  \n')
    f.write('                    self.channel.set_volume(volume)\n')
    f.write('            else:\n')
    f.write('                mixer.music.set_volume(volume)\n')
    f.write('            return True\n')
    f.write('        except Exception as e:\n')
    f.write('            print(e)\n')
    f.write('        return False\n')
    f.write('    def GetVolume(self):\n')
    f.write('        """'+Language.G_Language[1276]+'"""\n')
    f.write('        try:\n')
    f.write('            if self.isbgm == False:\n')
    f.write('                if self.channel:  \n')
    f.write('                    return  self.channel.get_volume()\n')
    f.write('            else:\n')
    f.write('                return mixer.music.get_volume()\n')
    f.write('        except Exception as e:\n')
    f.write('            print(e)\n')
    f.write('        return 0.0\n')
    f.write('    def GetDuration(self):\n')
    f.write('        """'+Language.G_Language[1277]+'"""\n')
    f.write('        return self.time_total\n')
    f.write('    def SetCurrTime(self,time):\n')
    f.write('        """'+Language.G_Language[1278]+'"""\n')
    f.write('        try:\n')
    f.write('            if self.isbgm == False:\n')
    f.write('                if self.channel:  \n')
    f.write('                    self.channel.set_pos(time)\n')
    f.write('            else:\n')
    f.write('                mixer.music.set_pos(time)\n')
    f.write('            return True\n')
    f.write('        except Exception as e:\n')
    f.write('            print(e)\n')
    f.write('        return False\n')
    f.write('    def GetCurrTime(self):\n')
    f.write('        """'+Language.G_Language[1279]+'"""\n')
    f.write('        try:\n')
    f.write('            if self.isbgm == False:\n')
    f.write('                if self.channel:  \n')
    f.write('                    return self.channel.get_pos()\n')
    f.write('            else:\n')
    f.write('                return mixer.music.get_pos()\n')
    f.write('        except Exception as e:\n')
    f.write('            print(e)\n')
    f.write('        return 0.0\n')

#播放器
def WriteVideoPlayer(f):
    f.write('class VideoPlayer():\n')
    f.write('    """'+Language.G_Language[1786]+'"""\n')
    f.write("    def __init__(self,uiName = None,elementName = None,filename = None,vlcpath = ''):\n")
    f.write('        super().__init__()\n')
    f.write('        self.canvas = GetElement(uiName,elementName)\n')
    f.write('        self.canvas_winfo = None\n')
    f.write('        self.player = None\n')
    f.write('        self.metadata = None\n')
    f.write('        self.fps = 30\n')
    f.write('        self.state_flag = 0\n')
    f.write('        self.filename = None\n')
    f.write('        self.image_frame = None\n')
    f.write('        self.image_canvas = None\n')
    f.write('        self.volume = -1.0\n')
    f.write('        self.loopnumber = 1\n')
    f.write('        self.duration = 0\n')
    f.write('        self.current_time = 0 \n')
    f.write('        self.includeAudio = False\n')
    f.write('        self.isMute = False\n')
    f.write('        self.vlcpath = vlcpath\n')
    f.write("        if self.vlcpath !='':\n")
    f.write('            os.environ[\'PYTHON_VLC_MODULE_PATH\'] = self.vlcpath\n')
    f.write('            import vlc\n')
    f.write('            self.PLAY_STATE = vlc.State.Playing\n')
    f.write('            self.PAUSE_STATE = vlc.State.Paused\n')
    f.write('            self.player = vlc.MediaPlayer()\n')
    f.write('            self.player.set_hwnd(self.canvas.winfo_id())\n')
    f.write('        self.PlayFile(filename)\n')
    f.write('    #Thread \n')
    f.write('    def thread_playvideo(self):\n')
    f.write('        try:\n')
    f.write('            if self.canvas is None:\n')
    f.write('                return\n')
    f.write('            if self.state_flag == -1:\n')
    f.write('                return \n')
    f.write('            if self.player is None:\n')
    f.write('                return\n')
    f.write('            if self.state_flag == 1:\n')
    f.write('                autio_frame,val = self.player.get_frame()\n')
    f.write("                if val != 'eof' and autio_frame is not None:\n")
    f.write('                    self.image_frame, self.current_time = autio_frame\n')
    f.write('                    width = self.canvas.winfo_width()\n')
    f.write('                    height = self.canvas.winfo_height()\n')
    f.write('                    img_resize = Image.frombytes("RGB", (self.image_frame.get_size()[0], self.image_frame.get_size()[1]), bytes(self.image_frame.to_bytearray()[0])).resize((width, height))\n')
    f.write('                    self.image_canvas = ImageTk.PhotoImage(img_resize)\n')
    f.write("                    self.canvas.create_image(0,0,anchor=tkinter.NW,image=self.image_canvas,tag='image')\n")
    f.write('                    self.canvas.update()\n')
    f.write('                    self.player.set_volume(self.volume)\n')
    f.write("            if val == 'eof':\n")
    f.write('                if self.loopnumber > 1:\n')
    f.write('                    self.loopnumber -= 1\n')
    f.write('                    self.SetCurrTime(0)\n')
    f.write('                    self.canvas.after(self.wait_time,self.thread_playvideo)\n')
    f.write('                else:\n')
    f.write('                    self.Stop()\n')
    f.write('                return \n')
    f.write('            self.canvas.after(self.wait_time,self.thread_playvideo)\n')
    f.write('        except Exception as e:\n')
    f.write('            self.canvas.after(self.wait_time,self.thread_playvideo)\n')
    f.write('    def PlayFile(self,filename,loopnumber=1):\n')
    f.write('        """'+Language.G_Language[1250]+'"""\n')
    f.write('        global G_ResDir\n')
    f.write('        global G_ResourcesFileList\n')
    f.write('        if filename is not None:\n')
    f.write('            sameFile = False\n')
    f.write('            oldfilename_lower = self.filename\n')
    f.write('            if oldfilename_lower:\n')
    f.write('                oldfilename_lower = oldfilename_lower.lower()\n')
    f.write('            if os.path.exists(filename) == True:\n')
    f.write('                filename_lower = filename.lower()\n')
    f.write('                if oldfilename_lower == filename_lower:\n')
    f.write('                    sameFile = True\n')
    f.write('                else:\n')
    f.write('                    self.filename = filename\n')
    f.write('            else:\n')
    f.write('                projpath, resdirname = os.path.split(G_ResDir)\n')
    f.write('                filepath, filename = os.path.split(filename)\n')
    f.write('                filepath = os.path.join(projpath,filename)\n')
    f.write('                if os.path.exists(filepath) == True:\n')
    f.write('                    filename_lower = filepath.lower()\n')
    f.write('                    if oldfilename_lower == filename_lower:\n')
    f.write('                        sameFile = True\n')
    f.write('                    else:\n')
    f.write('                        self.filename = filepath\n')
    f.write('                else:\n')
    f.write('                    filename_Lower = filename.lower()\n')
    f.write('                    if filename_Lower in G_ResourcesFileList:\n')
    f.write('                        filepath = G_ResourcesFileList[filename_Lower]\n')
    f.write('                        if os.path.exists(filepath) == True:\n')
    f.write('                            filename_lower = filepath.lower()\n')
    f.write('                            if oldfilename_lower == filename_lower:\n')
    f.write('                                sameFile = True\n')
    f.write('                            else:\n')
    f.write('                                self.filename = filepath\n')
    f.write('            if sameFile == True:\n')
    f.write('                if self.IsPause() == True:\n')
    f.write('                    self.Resume()\n')
    f.write('            else:\n')
    f.write('                if self.player is not None:\n')
    f.write('                    self.Stop()\n')
    f.write('                try:\n')
    f.write('                    self.duration = 0\n')
    f.write('                    video = VideoFileClip(self.filename)\n')
    f.write('                    self.includeAudio = (video.audio != None)\n')
    f.write('                    if self.vlcpath:\n')
    f.write('                        self.player.set_mrl(self.filename)\n')
    f.write('                        self.player.play()\n')
    f.write('                    else:\n')
    f.write('                        self.player = MediaPlayer(self.filename,paused = True)\n')
    f.write('                        self.metadata = self.player.get_metadata()\n')
    f.write('                        if self.isMute == True:\n')
    f.write('                            self.volume = 0\n')
    f.write('                        if self.includeAudio == True:\n')
    f.write('                            if self.volume == -1.0:\n')
    f.write('                                self.volume = self.player.get_volume()\n')
    f.write('                    self.fps = 30\n')
    f.write('                    self.wait_time = int(1000 / self.fps)\n')
    f.write('                    self.state_flag = 1\n')
    f.write('                    self.loopnumber = loopnumber\n')
    f.write('                    self.thread_playvideo()\n')
    f.write('                except Exception as e:\n')
    f.write('                    print(e)\n')
    f.write('    def HasAudio(self):\n')
    f.write('        """'+Language.G_Language[1273]+'"""\n')
    f.write('        return self.includeAudio\n')
    f.write('    def IsPlaying(self):\n')
    f.write('        """'+Language.G_Language[1330]+'"""\n')
    f.write('        if self.player is not None:\n')
    f.write('            if self.state_flag == 1:\n')
    f.write('                if self.vlcpath:\n')
    f.write('                    return self.player.is_playing()\n')
    f.write('                else:\n')
    f.write('                    if self.player.get_pause() == False:\n')
    f.write('                        return True\n')
    f.write('        return False\n')
    f.write('    def Pause(self):\n')
    f.write('        """'+Language.G_Language[1273]+'"""\n')
    f.write('        if self.player is not None:\n')
    f.write('            if self.state_flag == 1:\n')
    f.write('                if self.vlcpath:\n')
    f.write('                    self.player.pause()\n')
    f.write('                else:\n')
    f.write('                    self.player.set_pause(True)\n')
    f.write('    def IsPause(self):\n')
    f.write('        """'+Language.G_Language[1331]+'"""\n')
    f.write('        if self.player is not None:\n')
    f.write('            if self.state_flag == 1:\n')
    f.write('                if self.vlcpath:\n')
    f.write('                    if self.player.is_playing() == False:\n')
    f.write('                        return True\n')
    f.write('                else:\n')
    f.write('                    return self.player.get_pause()\n')
    f.write('        return False\n')
    f.write('    def Resume(self):\n')
    f.write('        """'+Language.G_Language[1274]+'"""\n')
    f.write('        if self.player is not None:\n')
    f.write('            if self.state_flag == 1:\n')
    f.write('                if self.vlcpath:\n')
    f.write('                    self.player.set_pause(0)\n')
    f.write('                else:\n')
    f.write('                    self.player.set_pause(False)\n')
    f.write('    def Toggle_Pause(self):\n')
    f.write('        """'+Language.G_Language[1332]+'"""\n')
    f.write('        if self.player is not None:\n')
    f.write('            if self.state_flag == 1:\n')
    f.write('                if self.vlcpath:\n')
    f.write('                    state = self.player.get_state()\n')
    f.write('                    if state == self.PLAY_STATE:\n')
    f.write('                        self.player.pause(0)\n')
    f.write('                    else:\n')
    f.write('                        self.player.pause(1)\n')
    f.write('                else:\n')
    f.write('                    self.player.toggle_pause() \n')
    f.write('    def FullScreen(self):\n')
    f.write('        """'+Language.G_Language[1324]+'"""\n')
    f.write('        if self.vlcpath:\n')
    f.write('            self.player.set_fullscreen(True)\n')
    f.write('        else:\n')
    f.write('            self.canvas_winfo = [self.canvas.winfo_x(),self.canvas.winfo_y(),self.canvas.winfo_width(),self.canvas.winfo_height()]\n')
    f.write('            user32 = ctypes.windll.user32\n')
    f.write('            sw = user32.GetSystemMetrics(0)\n')
    f.write('            sh = user32.GetSystemMetrics(1)\n')
    f.write('            self.canvas.place(x=0,y=0,width=sw,height=sh)\n')
    f.write('            if self.image_frame:\n')
    f.write('                img_resize = Image.frombytes("RGB", (self.image_frame.get_size()[0], self.image_frame.get_size()[1]), bytes(self.image_frame.to_bytearray()[0])).resize((sw, sh))\n')
    f.write('                self.image_canvas = ImageTk.PhotoImage(img_resize)\n')
    f.write("                self.canvas.create_image(0,0,anchor=tkinter.NW,image=self.image_canvas,tag='image')\n")
    f.write("                self.canvas.update()\n")
    f.write('    def RecoveryWindow(self):\n')
    f.write('        """'+Language.G_Language[1325]+'"""\n')
    f.write('        if self.vlcpath:\n')
    f.write('            self.player.set_fullscreen(True)\n')
    f.write('        else:\n')
    f.write('            if self.canvas_winfo:\n')
    f.write('                self.canvas.place(x=self.canvas_winfo[0],y=self.canvas_winfo[1],width=self.canvas_winfo[2],height=self.canvas_winfo[3])\n')
    f.write('                if self.image_frame:\n')
    f.write('                    img_resize = Image.frombytes("RGB", (self.image_frame.get_size()[0], self.image_frame.get_size()[1]), bytes(self.image_frame.to_bytearray()[0])).resize((self.canvas_winfo[2], self.canvas_winfo[3]))\n')
    f.write('                    self.image_canvas = ImageTk.PhotoImage(img_resize)\n')
    f.write("                    self.canvas.create_image(0,0,anchor=tkinter.NW,image=self.image_canvas,tag='image')\n")
    f.write("                    self.canvas.update()\n")
    f.write('            self.canvas_winfo = None\n')
    f.write('    def Stop(self):\n')
    f.write('        """'+Language.G_Language[1252]+'"""\n')
    f.write('        if self.state_flag == 1:\n')
    f.write('            self.state_flag = -1\n')
    f.write('            if self.vlcpath:\n')
    f.write('                self.player.stop()\n')
    f.write('            else:\n')
    f.write('                self.player.set_pause(True) \n')
    f.write('            self.canvas.after_cancel(self.thread_playvideo)\n')
    f.write('            time.sleep(self.wait_time/1000.0)\n')
    f.write('            if self.vlcpath:\n')
    f.write('                pass\n')
    f.write('            else:\n')
    f.write('                self.player.close_player() \n')
    f.write('            self.player = None\n')
    f.write('            self.filename = None\n')
    f.write('    def IsStop(self):\n')
    f.write('        """'+Language.G_Language[1333]+'"""\n')
    f.write('        if self.state_flag == -1:\n')
    f.write('            return True\n')
    f.write('        return True \n')
    f.write('    def SetVolume(self,volume):\n')
    f.write('        """'+Language.G_Language[1275]+'"""\n')
    f.write('        if self.includeAudio == True:\n')
    f.write('            self.volume = volume \n')
    f.write('            if self.player is not None:\n')
    f.write('                if self.vlcpath:\n')
    f.write('                    self.player.audio_set_volume(volume)\n')
    f.write('                else:\n')
    f.write('                    self.player.set_volume(volume)\n')
    f.write('            self.isMute = False\n')
    f.write('    def GetVolume(self):\n')
    f.write('        """'+Language.G_Language[1276]+'"""\n')
    f.write('        if self.includeAudio == True:\n')
    f.write('            if self.player is not None:\n')
    f.write('                if self.vlcpath:\n')
    f.write('                    return self.player.audio_get_volume()\n')
    f.write('                else:\n')
    f.write('                    return self.player.get_volume()\n')
    f.write('            return self.volume\n')
    f.write('        return 0.0\n')
    f.write('    def Mute(self):\n')
    f.write('        """'+Language.G_Language[1315]+'"""\n')
    f.write('        if self.player is not None:\n')
    f.write('            if self.vlcpath:\n')
    f.write('                self.player.audio_set_volume(0)\n')
    f.write('            else:\n')
    f.write('                self.player.set_volume(0)\n')
    f.write('        self.isMute = True\n')
    f.write('    def IsMute(self):\n')
    f.write('        """'+Language.G_Language[1316]+'"""\n')
    f.write('        return self.isMute\n')
    f.write('    def Restore(self):\n')
    f.write('        """'+Language.G_Language[1317]+'"""\n')
    f.write('        return self.SetVolume(self.volume)\n')
    f.write('    def GetDuration(self):\n')
    f.write('        """'+Language.G_Language[1277]+'"""\n')
    f.write('        if self.duration == 0:\n')
    f.write('            if self.vlcpath:\n')
    f.write('                self.duration = self.player.get_length()/1000.0\n')
    f.write('            else:\n')
    f.write('                import subprocess\n')
    f.write("                if 'duration' in self.metadata:\n")
    f.write("                    self.duration =  self.metadata['duration']\n")
    f.write('                    if self.duration  is None:\n')
    f.write("                        ffprobe_cmd = 'ffprobe -i {} -show_entries format=duration -v quiet -of csv=\"p=0\"'\n")
    f.write('                        p = subprocess.Popen(\n')
    f.write('                            ffprobe_cmd.format(self.filename),\n')
    f.write('                            stdout=subprocess.PIPE,\n')
    f.write('                            stderr=subprocess.PIPE,\n')
    f.write('                            shell=True)\n')
    f.write('                        out, err = p.communicate()\n')
    f.write("                        self.duration = float(str(out, 'utf-8').strip())\n")
    f.write('        return self.duration\n')
    f.write('    def SetCurrTime(self,time):\n')
    f.write('        """'+Language.G_Language[1278]+'"""\n')
    f.write('        if self.player is not None:\n')
    f.write('            if self.vlcpath:\n')
    f.write('                self.player.set_time(int(time*1000))\n')
    f.write('            else:\n')
    f.write('                self.player.seek(pts=time,relative=False,seek_by_bytes=False,accurate=False) \n')
    f.write('    def GetCurrTime(self):\n')
    f.write('        """'+Language.G_Language[1279]+'"""\n')
    f.write('        if self.player is not None:\n')
    f.write('            if self.vlcpath:\n')
    f.write('                self.current_time = self.player.get_time()/1000.0\n')
    f.write('        return self.current_time\n')


#摄像头
def WriteVideoCapture(f):
    f.write('class VideoCapture():\n')
    f.write('    """'+Language.G_Language[1787]+'"""\n')
    f.write('    def __init__(self,uiName = None,elementName = None):\n')
    f.write('        super().__init__()\n')
    f.write('        global G_ResDir\n')
    f.write('        self.uiName = uiName\n')
    f.write('        self.canvas = GetElement(uiName,elementName)\n')
    f.write('        self.framefps = 30\n')
    f.write('        self.framefps_delay = 1000//self.framefps\n')
    f.write('        self.imageFormat = cv2.COLOR_BGR2RGBA\n')
    f.write('        self.imageFrame = None\n')
    f.write('        self.photoImage = None\n')
    f.write('        self.capture = None\n')
    f.write('        self.savePath = ""\n')
    f.write('        self.saveFinishCallBackFunction = None\n')
    f.write('        self.frameCallBackFunction = None\n')
    f.write('        self.face_detectionArray = {}\n')
    f.write('        self.CascadesDir = G_ResDir\n')
    f.write('    def SetFps(self,fps):\n')
    f.write('        """'+Language.G_Language[1301]+'"""\n')
    f.write('        self.framefps = fps\n')
    f.write('        self.framefps_delay = 1000//fps\n')
    f.write('    def GetFps(self):\n')
    f.write('        """'+Language.G_Language[1302]+'"""\n')
    f.write('        return self.framefps\n')
    f.write('    def SetImageFormat(self,format):\n')
    f.write('        """'+Language.G_Language[1304]+'"""\n')
    f.write('        checkformat = format.lower()\n')
    f.write('        if checkformat == "rgb":\n')
    f.write('            format = cv2.COLOR_BGR2RGB\n')
    f.write('        elif checkformat == "rgba":\n')
    f.write('            format = cv2.COLOR_BGR2RGBA\n')
    f.write('        elif checkformat == "gray":\n')
    f.write('            format = cv2.COLOR_BGR2GRAY\n')
    f.write('        elif checkformat == "yuv":\n')
    f.write('            format = cv2.COLOR_BGR2YUV\n')
    f.write('        elif checkformat == "i420":\n')
    f.write('            format = cv2.COLOR_BGR2YUV_I420\n')
    f.write('        self.imageFormat = format\n')
    f.write('    def GetImageFormat(self):\n')
    f.write('        """'+Language.G_Language[1305]+'"""\n')
    f.write('        return self.imageFormat\n')
    f.write('    def SaveImageToFile(self,filePath,callbackFunction = None):\n')
    f.write('        """'+Language.G_Language[1303]+'"""\n')
    f.write('        self.savePath = filePath\n')
    f.write('        self.saveFinishCallBackFunction = callbackFunction\n')
    f.write('    def SaveFrameCallBackFunction(self,callbackFunction = None):\n')
    f.write('        """'+Language.G_Language[9500]+'"""\n')
    f.write('        self.frameCallBackFunction = callbackFunction\n')
    f.write('    def SetCascadesDir(self,cascadesDir):\n')
    f.write('        """'+Language.G_Language[1306]+'"""\n')
    f.write('        global G_ResDir\n')
    f.write('        self.CascadesDir = cascadesDir\n')
    f.write('        if os.path.exists(self.CascadesDir) == False:\n')
    f.write('           projpath, resdirname = os.path.split(G_ResDir)\n')
    f.write('           self.CascadesDir = os.path.join(projpath,cascadesDir)\n')
    f.write('           if os.path.exists(self.CascadesDir) == False:\n')
    f.write('               self.CascadesDir = os.path.join(G_ResDir,cascadesDir)\n')
    f.write("    def AddDetector(self,detectorName = 'face',xmlfile = 'haarcascade_frontalface_default.xml',bordercolor='red'):\n")
    f.write('        """'+Language.G_Language[1307]+'"""\n')
    f.write('        xmlPath = os.path.join(self.CascadesDir,xmlfile)\n')
    f.write('        match = zhPattern.search(xmlPath)\n')
    f.write('        if match:\n')
    f.write('            MessageBox("检测XML数据文件需要放在英文路径下才能识别!")\n')
    f.write('        else:\n')
    f.write('            if os.path.exists(xmlPath) == True:\n')
    f.write('                detector = cv2.CascadeClassifier(xmlPath)\n')
    f.write('                detector_param = {}\n')
    f.write('                detector_param[\'scaleFactor\'] = None\n')
    f.write('                detector_param[\'minNeighbors\'] = None\n')
    f.write('                #利用Canny边缘检测器排除一些边缘很少或很多的图像区域\n')
    f.write('                #cv2.CASCADE_DO_CANNY_PRUNING\n')
    f.write('                #只做初步检测\n')
    f.write('                #cv2.CASCADE_DO_ROUGH_SEARCH\n')
    f.write('                #只检测最大物体\n')
    f.write('                #cv2.CASCADE_FIND_BIGGEST_OBJECT\n')
    f.write('                #按比例检测\n')
    f.write('                #cv2.CASCADE_SCALE_IMAGE\n')
    f.write('                detector_param[\'flags\'] = None\n')
    f.write('                detector_param[\'minSize\'] = None\n')
    f.write('                detector_param[\'maxSize\'] = None\n')
    f.write('                detector_param[\'color\'] = bordercolor\n')
    f.write('                self.face_detectionArray[detectorName] = [detector,detector_param]\n')
    f.write("    def DelDetector(self,detectorName = 'face'):\n")
    f.write('        """'+Language.G_Language[1308]+'"""\n')
    f.write('        if detectorName in self.face_detectionArray:\n')
    f.write('            self.face_detectionArray.pop(detectorName)\n')
    f.write("    def SetDetectorScaleFactor(self,detectorName,scaleFactor):\n")
    f.write('        """'+Language.G_Language[2649]+'"""\n')
    f.write('        if detectorName in self.face_detectionArray:\n')
    f.write('            if \'scaleFactor\' in self.face_detectionArray[detectorName][1]:\n')
    f.write('                self.face_detectionArray[detectorName][1][\'scaleFactor\'] = scaleFactor\n')
    f.write("    def GetDetectorScaleFactor(self,detectorName):\n")
    f.write('        """'+Language.G_Language[2650]+'"""\n')
    f.write('        if detectorName in self.face_detectionArray:\n')
    f.write('            if \'scaleFactor\' in self.face_detectionArray[detectorName][1]:\n')
    f.write('                return self.face_detectionArray[detectorName][1][\'scaleFactor\']\n')
    f.write('        return None\n')
    f.write("    def SetDetectorMinNeighbors(self,detectorName,minNeighbors):\n")
    f.write('        """'+Language.G_Language[2651]+'"""\n')
    f.write('        if detectorName in self.face_detectionArray:\n')
    f.write('            if \'minNeighbors\' in self.face_detectionArray[detectorName][1]:\n')
    f.write('                self.face_detectionArray[detectorName][1][\'minNeighbors\'] = minNeighbors\n')
    f.write("    def GetDetectorMinNeighbors(self,detectorName):\n")
    f.write('        """'+Language.G_Language[2652]+'"""\n')
    f.write('        if detectorName in self.face_detectionArray:\n')
    f.write('            if \'minNeighbors\' in self.face_detectionArray[detectorName][1]:\n')
    f.write('                return self.face_detectionArray[detectorName][1][\'minNeighbors\']\n')
    f.write('        return None\n')
    f.write("    def SetDetectorMinSize(self,detectorName,minSize):\n")
    f.write('        """'+Language.G_Language[2653]+'"""\n')
    f.write('        if detectorName in self.face_detectionArray:\n')
    f.write('            if \'minSize\' in self.face_detectionArray[detectorName][1]:\n')
    f.write('                if type(minSize) == type(()):\n')
    f.write('                    self.face_detectionArray[detectorName][1][\'minSize\'] = minSize\n')
    f.write('                elif type(minSize) == type(1):\n')
    f.write('                    self.face_detectionArray[detectorName][1][\'minSize\'] = (minSize,minSize)\n')
    f.write("    def GetDetectorMinSize(self,detectorName):\n")
    f.write('        """'+Language.G_Language[2654]+'"""\n')
    f.write('        if detectorName in self.face_detectionArray:\n')
    f.write('            if \'minSize\' in self.face_detectionArray[detectorName][1]:\n')
    f.write('                return self.face_detectionArray[detectorName][1][\'minSize\']\n')
    f.write('        return None\n')
    f.write("    def SetDetectorMaxSize(self,detectorName,maxSize):\n")
    f.write('        """'+Language.G_Language[2655]+'"""\n')
    f.write('        if detectorName in self.face_detectionArray:\n')
    f.write('            if \'maxSize\' in self.face_detectionArray[detectorName][1]:\n')
    f.write('                if type(maxSize) == type(()):\n')
    f.write('                    self.face_detectionArray[detectorName][1][\'maxSize\'] = maxSize\n')
    f.write('                elif type(maxSize) == type(1):\n')
    f.write('                    self.face_detectionArray[detectorName][1][\'maxSize\'] = (maxSize,maxSize)\n')
    f.write("    def GetDetectorMaxSize(self,detectorName):\n")
    f.write('        """'+Language.G_Language[2656]+'"""\n')
    f.write('        if detectorName in self.face_detectionArray:\n')
    f.write('            if \'maxSize\' in self.face_detectionArray[detectorName][1]:\n')
    f.write('                return self.face_detectionArray[detectorName][1][\'maxSize\']\n')
    f.write('        return None\n')
    f.write("    def SetDetectorColor(self,detectorName,color):\n")
    f.write('        """'+Language.G_Language[2657]+'"""\n')
    f.write('        if detectorName in self.face_detectionArray:\n')
    f.write('            if \'color\' in self.face_detectionArray[detectorName][1]:\n')
    f.write('                self.face_detectionArray[detectorName][1][\'color\'] = color\n')
    f.write("    def GetDetectorColor(self,detectorName):\n")
    f.write('        """'+Language.G_Language[2658]+'"""\n')
    f.write('        if detectorName in self.face_detectionArray:\n')
    f.write('            if \'color\' in self.face_detectionArray[detectorName][1]:\n')
    f.write('                return self.face_detectionArray[detectorName][1][\'color\']\n')
    f.write('        return None\n')
    f.write("    def ChooseDetectorFlags_NONE(self,detectorName = 'face'):\n")
    f.write('        """'+Language.G_Language[2643]+'"""\n')
    f.write('        if detectorName in self.face_detectionArray:\n')
    f.write('            if \'flags\' in self.face_detectionArray[detectorName][1]:\n')
    f.write('                self.face_detectionArray[detectorName][1][\'flags\'] = None\n')
    f.write("    def ChooseDetectorFlags_CANNY_PRUNING(self,detectorName = 'face'):\n")
    f.write('        """'+Language.G_Language[2644]+'"""\n')
    f.write('        if detectorName in self.face_detectionArray:\n')
    f.write('            if \'flags\' in self.face_detectionArray[detectorName][1]:\n')
    f.write('                self.face_detectionArray[detectorName][1][\'flags\'] = cv2.CASCADE_DO_CANNY_PRUNING\n')
    f.write("    def ChooseDetectorFlags_ROUGH_SEARCH(self,detectorName = 'face'):\n")
    f.write('        """'+Language.G_Language[2645]+'"""\n')
    f.write('        if detectorName in self.face_detectionArray:\n')
    f.write('            if \'flags\' in self.face_detectionArray[detectorName][1]:\n')
    f.write('                self.face_detectionArray[detectorName][1][\'flags\'] = cv2.CASCADE_DO_ROUGH_SEARCH\n')
    f.write("    def ChooseDetectorFlags_FIND_BIGGEST(self,detectorName = 'face'):\n")
    f.write('        """'+Language.G_Language[2646]+'"""\n')
    f.write('        if detectorName in self.face_detectionArray:\n')
    f.write('            if \'flags\' in self.face_detectionArray[detectorName][1]:\n')
    f.write('                self.face_detectionArray[detectorName][1][\'flags\'] = cv2.CASCADE_FIND_BIGGEST_OBJECT\n')
    f.write("    def ChooseDetectorFlags_SCALE_IMAGE(self,detectorName = 'face'):\n")
    f.write('        """'+Language.G_Language[2647]+'"""\n')
    f.write('        if detectorName in self.face_detectionArray:\n')
    f.write('            if \'flags\' in self.face_detectionArray[detectorName][1]:\n')
    f.write('                self.face_detectionArray[detectorName][1][\'flags\'] = cv2.CASCADE_SCALE_IMAGE\n')
    f.write("    def GetDetectorFlags(self,detectorName = 'face'):\n")
    f.write('        """'+Language.G_Language[2648]+'"""\n')
    f.write('        if detectorName in self.face_detectionArray:\n')
    f.write('            if \'flags\' in self.face_detectionArray[detectorName][1]:\n')
    f.write('                if self.face_detectionArray[detectorName][1][\'flags\'] == cv2.CASCADE_DO_CANNY_PRUNING:\n')
    f.write('                    return "CANNY_PRUNING"\n')
    f.write('                if self.face_detectionArray[detectorName][1][\'flags\'] == cv2.CASCADE_DO_ROUGH_SEARCH:\n')
    f.write('                    return "ROUGH_SEARCH"\n')
    f.write('                if self.face_detectionArray[detectorName][1][\'flags\'] == cv2.CASCADE_FIND_BIGGEST_OBJECT:\n')
    f.write('                    return "FIND_BIGGEST"\n')
    f.write('                if self.face_detectionArray[detectorName][1][\'flags\'] == cv2.CASCADE_SCALE_IMAGE:\n')
    f.write('                    return "SCALE_IMAGE"\n')
    f.write('        return None\n')
    f.write('    def Detect(self,frame,scale_w,scale_h):\n')
    f.write('        """'+Language.G_Language[1313]+'"""\n')
    f.write('        grayImage = None\n')
    f.write('        for detectorName in self.face_detectionArray.keys():\n')
    f.write('            detectorInfo = self.face_detectionArray[detectorName]\n')
    f.write('            if grayImage is None:\n')
    f.write('                grayImage = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n')
    f.write("            face_array = detectorInfo[0].detectMultiScale(grayImage,scaleFactor = detectorInfo[1]['scaleFactor'],minNeighbors = detectorInfo[1]['minNeighbors'],flags = detectorInfo[1]['flags'],minSize = detectorInfo[1]['minSize'],maxSize = detectorInfo[1]['maxSize'])\n")
    f.write('            for x,y,w,h in face_array:\n')
    f.write('                l = int(x * scale_w)\n')
    f.write('                t = int(y * scale_h)\n')
    f.write('                r = int((x + w) * scale_w)\n')
    f.write('                b = int((y + h) * scale_h)\n')
    f.write("                self.canvas.create_rectangle(l,t,r,b,outline=detectorInfo[1]['color'],width=1,tag=\"detector\")\n")
    f.write("                self.canvas.create_text(l,t,text=detectorName,anchor=tkinter.NW,fill = detectorInfo[1]['color'],tag=\"detector\")\n")
    f.write('    #Thread\n')
    f.write('    def thread_playvideo(self):\n')
    f.write('        try:\n')
    f.write('            if self.canvas is None:\n')
    f.write('                return\n')
    f.write('            frame = None\n')
    f.write('            if (type(self.imageFrame) is np.ndarray):\n')
    f.write('                frame = self.imageFrame\n')
    f.write('                #行是高度，列是宽度\n')
    f.write('                frame_h,frame_w,channels = frame.shape\n')
    f.write('            else:\n')
    f.write('                if self.stopFlag:\n')
    f.write('                    return\n')
    f.write('                ret,frame = self.capture.read()\n')
    f.write('                frame_w = int(self.capture.get(cv2.CAP_PROP_FRAME_WIDTH))\n')
    f.write('                frame_h = int(self.capture.get(cv2.CAP_PROP_FRAME_HEIGHT))\n')
    f.write('            if self.frameCallBackFunction:\n')
    f.write('                self.frameCallBackFunction(frame,frame_w,frame_h)\n')
    f.write('            cv2image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n')
    f.write('            canvas_w = self.canvas.winfo_width()\n')
    f.write('            canvas_h = self.canvas.winfo_height()\n')
    f.write('            img = Image.fromarray(cv2image).resize((canvas_w, canvas_h))\n')
    f.write('            self.photoImage = ImageTk.PhotoImage(img)\n')
    f.write('            self.canvas.delete("image")\n')
    f.write('            self.canvas.delete("detector")\n')
    f.write("            self.canvas.create_image(0,0,anchor=tkinter.NW,image=self.photoImage,tag='image')\n")
    f.write('            self.Detect(frame,canvas_w/frame_w,canvas_h/frame_h)\n')
    f.write('            if self.savePath != "":\n')
    f.write('                root = GetElement(self.uiName,"root")\n')
    f.write('                dpi = root.winfo_fpixels(\'1i\')\n')
    #f.write('                dpi_scale = dpi/72.0\n')
    f.write('                dpi_scale = 1.0\n')
    f.write('                parentID = self.canvas.winfo_parent()\n')
    f.write('                parentWidget = self.canvas._nametowidget(parentID)\n')
    f.write('                x = self.canvas.winfo_x()\n')
    f.write('                y = self.canvas.winfo_y()\n')
    f.write('                while parentWidget != root:\n')
    f.write('                    px = parentWidget.winfo_rootx()\n')
    f.write('                    py = parentWidget.winfo_rooty()\n')
    f.write('                    x = x + px\n')
    f.write('                    y = y + py\n')
    f.write('                    parentID = parentWidget.winfo_parent()\n')
    f.write('                    parentWidget = parentWidget._nametowidget(parentID)\n')
    f.write('                x1 = x + int(canvas_w * dpi_scale)\n')
    f.write('                y1 = y + int(canvas_h * dpi_scale)\n')
    f.write('                from PIL import ImageGrab\n')
    f.write('                ImageGrab.grab().crop((x, y, x1, y1)).save(self.savePath)\n')
    f.write('                self.savePath = ""\n')
    f.write('                if self.saveFinishCallBackFunction:\n')
    f.write('                    self.saveFinishCallBackFunction()\n')
    f.write('            self.canvas.update()\n')
    f.write('            self.canvas.after(self.framefps_delay,self.thread_playvideo)\n')
    f.write('        except Exception as e:\n')
    f.write('            print(e)\n')
    f.write('    def StartCapture(self,captureIndex = 0,fps = 30,format = "rgb"):\n')
    f.write('        """'+Language.G_Language[1253]+'"""\n')
    f.write('        self.SetFps(fps)\n')
    f.write('        self.imageFrame = None\n')
    f.write('        self.SetImageFormat(format)\n')
    f.write('        try:\n')
    f.write('            self.capture = cv2.VideoCapture(captureIndex)\n')
    f.write('            if self.capture is None:\n')
    f.write('                return False\n')
    f.write('            self.stopFlag = False\n')
    f.write('            self.thread_playvideo()\n')
    f.write('            return True\n')
    f.write('        except Exception as e:\n')
    f.write('            print(e)\n')
    f.write('        return False\n')
    f.write('    def Stop(self):\n')
    f.write('        """'+Language.G_Language[1252]+'"""\n')
    f.write('        self.stopFlag = True\n')
    f.write('        if self.capture:\n')
    f.write('            self.capture = None\n')
    f.write('    def UseImageFile(self,fileName):\n')
    f.write('        """'+Language.G_Language[2659]+'"""\n')
    f.write('        try:\n')
    f.write('            self.imageFrame = cv2.imread(fileName)\n')
    f.write('        except Exception as e:\n')
    f.write('            print(e)\n')
#写入SOCKET
def WriteSocket(f):
    f.write('class Socket():\n')
    f.write('    """'+Language.G_Language[1783]+'"""\n')
    f.write("    def __init__(self,protocol='tcp',ip='127.0.0.1',port=8888,encoding='utf-8',listen=10,buffsize=1024,netMsgTable=None):\n")
    f.write('        super().__init__()\n')
    f.write('        self.protocol = protocol\n')
    f.write('        self.ip = ip\n')
    f.write('        self.port = port\n')
    f.write('        self.encoding = encoding\n')
    f.write('        self.listen = listen\n')
    f.write('        self.buffsize = buffsize\n')
    f.write('        self.socket = None\n')
    f.write('        self.connSocketList = []\n')
    f.write('        self.socketAddrDic = {}\n')
    f.write('        self.recvAddrList = []\n')
    f.write('        self.recvMessageDic = {}\n')
    f.write('        self.recvNetMsgDic = {}\n')
    f.write('        self.netMsgTable = netMsgTable\n')
    f.write('        self.netMsgFuncDict = {}\n')
    f.write('        self.stopFlag = False\n')
    f.write('        self.uiName = None\n')
    f.write('        self.elementName = None\n')
    f.write('        self.MsgListBox = None\n')
    f.write('        if self.protocol == "udp":\n')
    f.write('            self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n')
    f.write('            self.socket.bind((self.ip, int(self.port)))\n')
    f.write('            self.run_thread = threading.Thread(target=self.thread_Udp_recMsg, args=[])\n')
    f.write('            self.run_thread.Daemon = True\n')
    f.write('            self.run_thread.start()  \n')
    f.write('    def GetLocalIP(self):\n')
    f.write('        """'+Language.G_Language[1471]+'"""\n')
    f.write('        testSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n')
    f.write('        try:\n')
    f.write("            testSocket.connect(('10.255.255.255',1))\n")
    f.write('            IP = testSocket.getsockname()[0]\n')
    f.write('        except Exception as e:\n')
    f.write("            IP = '127.0.0.1'\n")
    f.write('        finally:\n')
    f.write("            testSocket.close()\n")
    f.write('        return IP\n')
    f.write('    def GetPort(self):\n')
    f.write('        """'+Language.G_Language[1472]+'"""\n')
    f.write('        return self.port\n')
    f.write('    def CreateServer(self,port=8888):\n')
    f.write('        """'+Language.G_Language[1254]+'"""\n')
    f.write('        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n')
    f.write('        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n')
    f.write('        self.port = port\n')
    f.write('        try:\n')
    f.write('            self.socket.bind((self.ip, int(self.port)))\n')
    f.write('            self.socket.listen(self.listen)\n')
    f.write('        except Exception as e:\n')
    f.write('            print(e)\n')
    f.write('            self.stopFlag = True\n')
    f.write('            self.Print("'+Language.G_Language[1885]+'")\n')
    f.write('            return\n')
    f.write('        else:\n')
    f.write('            self.Print("'+Language.G_Language[1886]+'")\n')
    f.write('            self.connSocketList.append(self.socket)\n')
    f.write('            self.run_thread = threading.Thread(target=self.thread_Tcp_Server, args=[])\n')
    f.write('            self.run_thread.Daemon = True\n')
    f.write('            self.run_thread.start()\n')
    f.write('    def ConvertStringToParamList(self,text):\n')
    f.write("        while text[-1] == '\\n':\n")
    f.write("            text = text[0:-1]\n")
    f.write("        return text.split(',')\n")
    f.write('    def GetNetMsgList(self,tableName):\n')
    f.write('        """'+Language.G_Language[1898]+'"""\n')
    f.write('        global G_ResDir\n')
    f.write('        projpath, resdirname = os.path.split(G_ResDir)\n')
    f.write('        MsgDBFile = os.path.join(projpath,"netmsg.db")\n')
    f.write('        allColumnList = []\n')
    f.write('        if os.path.exists(MsgDBFile) == True:\n')
    f.write('            dbInstance = sqlite3.connect(MsgDBFile)\n')
    f.write('            sqliteCursor = dbInstance.cursor()\n')
    f.write('            SQLString = "select * from "+tableName\n')
    f.write('            sqliteCursor.execute(SQLString)\n')
    f.write('            allColumnList = sqliteCursor.fetchall()\n')
    # f.write('            for columnInfo in allColumnList:\n')
    # f.write('                MsgID = columnInfo[1]\n')
    # f.write('                MsgSending = columnInfo[2]\n')
    # f.write('                MsgName = columnInfo[3]\n')
    # f.write('                Remark = columnInfo[4]\n')
    # f.write('                if MsgSending == 0:\n')
    # f.write('                    ItemText = str("%d_%s_REQUEST"%(MsgID,MsgName))\n')
    # f.write('                elif MsgSending == 1:\n')
    # f.write('                    ItemText = str("%d_%s_RESPONSE"%(MsgID,MsgName))\n')
    # f.write('                else:\n')
    # f.write('                    ItemText = str("%d_%s_NOTICE"%(MsgID,MsgName))\n')
    f.write('            dbInstance.close()\n')
    f.write('        return allColumnList\n')
    f.write('    def SetNetMsgCallback(self,msg_id,msg_sending,callback):\n')
    f.write('        global G_UIElementDictionary\n')
    f.write('        if msg_id not in self.netMsgFuncDict:\n')
    f.write('            self.netMsgFuncDict[msg_id] = {}\n')
    f.write('        self.netMsgFuncDict[msg_id][msg_sending] = callback\n')
    f.write('        if self.uiName is None or self.elementName is None:\n')
    f.write('            for uiName in G_UIElementDictionary.keys():\n')
    f.write('                for elementName in G_UIElementDictionary[uiName]:\n')
    f.write('                    if G_UIElementDictionary[uiName][elementName] is self:\n')
    f.write('                        self.uiName = uiName\n')
    f.write('                        self.elementName = elementName\n')
    f.write('                        return\n')
    f.write('    def ParseNetMsg(self,conn_socket,data_str):\n')
    f.write('        if self.netMsgTable:\n')
    f.write('            begin = data_str.find("\\n")\n')
    f.write('            if begin >= 0 :\n')
    f.write('                data_split_array = data_str.split("\\n")\n')
    f.write('                data_count = len(data_split_array)\n')
    f.write('                if data_str[-1]!="\\n":\n')
    f.write('                    data_count = data_count - 1\n')
    f.write('                    self.recvNetMsgDic[conn_socket] = data_split_array[-1]\n')
    f.write('                for data_index in range(data_count):\n')
    f.write('                    netmsg = data_split_array[data_index]\n')
    f.write('                    if netmsg:\n')
    f.write('                        if data_index == 0 and self.recvNetMsgDic[conn_socket]:\n')
    f.write('                            netmsg = self.recvNetMsgDic[conn_socket] + data_split_array[data_index]\n')
    f.write('                            self.recvNetMsgDic[conn_socket] = None\n')
    f.write('                        if netmsg.find(",") > 0:\n')
    f.write('                            netmsg_split = netmsg.split(",")\n')
    f.write('                            if len(netmsg_split) > 2:\n')
    f.write('                                if netmsg_split[0].isdigit() == False:\n')
    f.write('                                    return\n')
    f.write('                                if netmsg_split[1].isdigit() == False:\n')
    f.write('                                    return\n')
    f.write('                                msg_id = int(netmsg_split[0])\n')
    f.write('                                msg_sending = int(netmsg_split[1])\n')
    f.write('                                if msg_id in self.netMsgFuncDict:\n')
    f.write('                                    if msg_sending in self.netMsgFuncDict[msg_id]:\n')
    f.write('                                        self.netMsgFuncDict[msg_id][msg_sending](self.uiName,self.elementName,conn_socket,netmsg_split[2:])\n')
    f.write('                                    else:\n')
    f.write('                                        msg_sendingText = str(msg_sending)\n')
    f.write('                                        if msg_sending == 0:\n')
    f.write('                                            msg_sendingText = "'+Language.G_Language[1880]+'"\n')
    f.write('                                        elif msg_sending == 1:\n')
    f.write('                                            msg_sendingText = "'+Language.G_Language[1881]+'"\n')
    f.write('                                        elif msg_sending == 2:\n')
    f.write('                                            msg_sendingText = "'+Language.G_Language[1882]+'"\n')
    f.write('                                        msg = "'+Language.G_Language[1883]+'" + str(msg_id)+" : "+msg_sendingText\n')
    f.write('                                        self.Print(msg)\n')
    f.write('                            else:\n')
    f.write('                                msg = "'+Language.G_Language[1883]+'" + str(msg_id)\n')
    f.write('                                self.Print(msg)\n')
    f.write('            else:\n')
    f.write('                self.recvNetMsgDic[conn_socket] = self.recvNetMsgDic[conn_socket] + data_str\n')
    f.write('    def PackNetMsg(self,msg_id,msg_sending,paramList):\n')
    f.write('        data_str = str(msg_id)+","+str(msg_sending)\n')
    f.write('        paramIndex = 0\n')
    f.write('        for paramText in paramList:\n')
    f.write('            data_str = data_str + "," + paramText\n')
    f.write('            paramIndex = paramIndex + 1\n')
    f.write('        data_str = data_str + "\\n"\n')
    f.write('        return data_str\n')
    f.write('    def thread_Udp_recMsg(self):\n')
    f.write('        while True:\n')
    f.write('            if(self.stopFlag):\n')
    f.write('                break\n')
    f.write('            data_bytes, addr = self.socket.recvfrom(self.buffsize)\n')
    f.write('            if (data_bytes == b""):\n')
    f.write('                self.socket.close()\n')
    f.write('                self.stopFlag = True\n')
    f.write('                time.sleep(1)\n')
    f.write('                self.Print("'+Language.G_Language[1900]+':" + str(addr))\n')
    f.write('                index = 0\n')
    f.write('                for addr_saved in self.recvAddrList:\n')
    f.write('                    if addr_saved == addr:\n')
    f.write('                        self.recvAddrList.pop(index)\n')
    f.write('                    index = index + 1\n')
    f.write('                break\n')
    f.write('            msg = "'+Language.G_Language[1884]+':" + data_bytes.decode(self.encoding)\n')
    f.write('            self.Print(msg)\n')
    f.write('            if addr not in self.recvAddrList:\n')
    f.write('                self.recvAddrList.append(addr)\n')
    f.write('        self.socket.close()\n')
    f.write('        print("'+Language.G_Language[1901]+'")\n')
    f.write('    def thread_Tcp_Server(self):\n')
    f.write('        msg = "'+Language.G_Language[1887]+'"\n')
    f.write('        self.Print(msg)\n')
    f.write('        while True:\n')
    f.write('            if(self.stopFlag):\n')
    f.write('                break\n')
    f.write('            r_list, w_list, e_list = select.select(self.connSocketList, [], self.connSocketList, 1)\n')
    f.write('            for sk1_or_conn in r_list:\n')
    f.write('                if sk1_or_conn == self.socket:\n')
    f.write('                    conn, address = sk1_or_conn.accept()\n')
    f.write('                    self.connSocketList.append(conn)\n')
    f.write('                    self.recvMessageDic[conn] = []\n')
    f.write('                    self.recvNetMsgDic[conn] = ""\n')
    f.write('                    self.socketAddrDic[conn] = address\n')
    f.write('                    msg = "'+Language.G_Language[1888]+':" + str(address)\n')
    f.write('                    self.Print(msg)\n')
    f.write('                else:\n')
    f.write('                    try:\n')
    f.write('                        data_bytes = sk1_or_conn.recv(1024)\n')
    f.write('                        # 对方断开连接\n')
    f.write('                        if (data_bytes == b""):\n')
    f.write('                            sk1_or_conn.close()\n')
    f.write('                            self.connSocketList.remove(sk1_or_conn)\n')
    f.write('                            self.Print("'+Language.G_Language[1889]+'")\n')
    f.write('                            continue\n')
    f.write('                        data_str = str(data_bytes, encoding=self.encoding)\n')
    f.write('                        msg = "'+Language.G_Language[1890]+'["+str(self.socketAddrDic[sk1_or_conn])+"]:" + data_str\n')
    f.write('                        self.Print(msg)\n')
    f.write('                        self.ParseNetMsg(sk1_or_conn,data_str)\n')
    f.write('                        #sk1_or_conn.sendall(bytes(data_str, encoding=self.encoding))\n')
    f.write('                    except Exception as ex:\n')
    f.write('                        errorText = "'+Language.G_Language[1891]+'["+str(self.socketAddrDic[sk1_or_conn])+"]:" + str(ex)+",'+Language.G_Language[1892]+'"\n')
    f.write('                        self.Print(errorText)\n')
    f.write('                        self.connSocketList.remove(sk1_or_conn)\n')
    f.write('                    else:\n')
    f.write('                        data_str = str(data_bytes, encoding=self.encoding)\n')
    f.write('                        self.recvMessageDic[sk1_or_conn].append(data_str)\n')

    f.write('                for conn in w_list:\n')
    f.write('                    recv_str = self.recvMessageDic[conn][0]\n')
    f.write('                    del self.recvMessageDic[conn][0]\n')
    f.write('                    conn.sendall(bytes(recv_str, encoding=self.encoding))\n')

    f.write('                for sk in e_list:\n')
    f.write('                    self.connSocketList.remove(sk)\n')
    f.write('                    self.recvNetMsgDic.remove(sk)\n')
    f.write('        self.socket.close()\n')
    f.write('        self.connSocketList.clear()\n')
    f.write('        self.recvMessageDic.clear()\n')
    f.write('        print("'+Language.G_Language[1893]+'")\n')
    f.write('    def StopServer(self):\n')
    f.write('        """'+Language.G_Language[1255]+'"""\n')
    f.write('        self.stopFlag = True\n')
    f.write('    def ConnServer(self):\n')
    f.write('        """'+Language.G_Language[1256]+'"""\n')
    f.write('        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n')
    f.write('        try:\n')
    f.write('            self.socket.connect((self.ip, int(self.port)))\n')
    f.write('        except Exception as e :\n')
    f.write('            print(e)\n')
    f.write('            self.Print("'+Language.G_Language[1894]+'")\n')
    f.write('            self.stopFlag = True\n')
    f.write('            return\n')
    f.write('        else:\n')
    f.write('            self.recvNetMsgDic[self.socket] = ""\n')
    f.write('            self.Print("'+Language.G_Language[1895]+'")\n')
    f.write('            self.run_thread = threading.Thread(target=self.thread_Tcp_Client, args=[])\n')
    f.write('            self.run_thread.Daemon = True\n')
    f.write('            self.run_thread.start()  \n')
    f.write('    #Thread\n')
    f.write('    def thread_Tcp_Client(self):\n')
    f.write('        while True:\n')
    f.write('            if(self.stopFlag):\n')
    f.write('                break\n')
    f.write('            try:\n')
    f.write('                data_bytes = self.socket.recv(self.buffsize)\n')
    f.write('                if (data_bytes == b""):\n')
    f.write('                    self.socket.close()\n')
    f.write('                    self.stopFlag = True\n')
    f.write('                    time.sleep(1)\n')
    f.write('                    self.Print("'+Language.G_Language[1896]+'")\n')
    f.write('                    break\n')
    f.write('                data_str = data_bytes.decode(self.encoding)\n')
    f.write('                msg = "'+Language.G_Language[1884]+':" + data_str\n')
    f.write('                self.Print(msg)\n')
    f.write('                self.ParseNetMsg(self.socket,data_str)\n')
    f.write('            except Exception as ex:\n')
    f.write('                errorText = "'+Language.G_Language[1897]+':" + str(ex)\n')
    f.write('                self.Print(errorText)\n')
    f.write('        self.socket.close()\n')
    f.write('        print("'+Language.G_Language[1889]+'")\n')
    f.write('    def GetConnSocketList(self):\n')
    f.write('        """'+Language.G_Language[1257]+'"""\n')
    f.write('        return self.connSocketList\n')
    f.write('    def GetRecvAddrList(self):\n')
    f.write('        """'+Language.G_Language[1258]+'"""\n')
    f.write('        return self.recvAddrList\n')
    f.write('    def SendTcpMsgToClient(self,client,sndText):\n')
    f.write('        """'+Language.G_Language[1259]+'"""\n')
    f.write('        msg = sndText.encode(self.encoding)\n')
    f.write('        print("'+Language.G_Language[1259]+':"+sndText)\n')
    f.write('        client.send(msg)\n')
    f.write('    def SendTcpMsgToAllClient(self,sndText):\n')
    f.write('        """'+Language.G_Language[1260]+'"""\n')
    f.write('        msg = sndText.encode(self.encoding)\n')
    f.write('        print("'+Language.G_Language[1260]+':"+sndText)\n')
    f.write('        for client in self.connSocketList:\n')
    f.write('            client.send(msg)\n')
    f.write('    def SendTcpMsgToServer(self,sndText):\n')
    f.write('        """'+Language.G_Language[1261]+'"""\n')
    f.write('        msg = sndText.encode(self.encoding)\n')
    f.write('        print("'+Language.G_Language[1261]+':"+sndText)\n')
    f.write('        if self.socket:\n')
    f.write('            self.socket.send(msg)\n')
    f.write('        else:\n')
    f.write('            print("'+Language.G_Language[1843]+'")\n')
    f.write('    def SendUdpMsgToAddr(self,ip,port,sndText):\n')
    f.write('        """'+Language.G_Language[1262]+'"""\n')
    f.write('        msg = sndText.encode(self.encoding)\n')
    f.write('        print("'+Language.G_Language[1262]+':"+sndText)\n')
    f.write('        sendArr = (ip,port)\n')
    f.write('        if self.socket:\n')
    f.write('            self.socket.sendto(msg,sendArr)\n')
    f.write('        else:\n')
    f.write('            print("'+Language.G_Language[1843]+'")\n')
    f.write('    def SendUdpMsgToAllAddr(self,sndText):\n')
    f.write('        """'+Language.G_Language[1263]+'"""\n')
    f.write('        msg = sndText.encode(self.encoding)\n')
    f.write('        print("'+Language.G_Language[1263]+':"+sndText)\n')
    f.write('        for sendArr in self.recvAddrList:\n')
    f.write('            #sendArr = (ip,port)\n')
    f.write('            if self.socket:\n')
    f.write('                self.socket.sendto(msg,sendArr)\n')
    f.write('            else:\n')
    f.write('                print("'+Language.G_Language[1843]+'")\n')
    f.write('    def SendTcpRequestToClient(self,socket,msg_id,paramList):\n')
    f.write('        """'+Language.G_Language[1874]+'"""\n')
    f.write('        if type(paramList) == type(""):\n')
    f.write('            paramList = self.ConvertStringToParamList(paramList)\n')
    f.write('        sndText = self.PackNetMsg(msg_id,0,paramList)\n')
    f.write('        msg = sndText.encode(self.encoding)\n')
    f.write('        socket.send(msg)\n')
    f.write('    def SendTcpRequestToServer(self,msg_id,paramList):\n')
    f.write('        """'+Language.G_Language[1874]+'"""\n')
    f.write('        if type(paramList) == type(""):\n')
    f.write('            paramList = self.ConvertStringToParamList(paramList)\n')
    f.write('        sndText = self.PackNetMsg(msg_id,0,paramList)\n')
    f.write('        msg = sndText.encode(self.encoding)\n')
    f.write('        if self.socket:\n')
    f.write('            self.socket.send(msg)\n')
    f.write('        else:\n')
    f.write('            print("'+Language.G_Language[1843]+'")\n')
    f.write('    def SendTcpResponseToClient(self,socket,msg_id,paramList):\n')
    f.write('        """'+Language.G_Language[1875]+'"""\n')
    f.write('        if type(paramList) == type(""):\n')
    f.write('            paramList = self.ConvertStringToParamList(paramList)\n')
    f.write('        sndText = self.PackNetMsg(msg_id,1,paramList)\n')
    f.write('        msg = sndText.encode(self.encoding)\n')
    f.write('        socket.send(msg)\n')
    f.write('    def SendTcpResponseToServer(self,msg_id,paramList):\n')
    f.write('        """'+Language.G_Language[1875]+'"""\n')
    f.write('        if type(paramList) == type(""):\n')
    f.write('            paramList = self.ConvertStringToParamList(paramList)\n')
    f.write('        sndText = self.PackNetMsg(msg_id,1,paramList)\n')
    f.write('        msg = sndText.encode(self.encoding)\n')
    f.write('        if self.socket:\n')
    f.write('            self.socket.send(msg)\n')
    f.write('        else:\n')
    f.write('            print("'+Language.G_Language[1843]+'")\n')
    f.write('    def SendTcpNotice(self,msg_id,paramList):\n')
    f.write('        """'+Language.G_Language[1876]+'"""\n')
    f.write('        if type(paramList) == type(""):\n')
    f.write('            paramList = self.ConvertStringToParamList(paramList)\n')
    f.write('        sndText = self.PackNetMsg(msg_id,2,paramList)\n')
    f.write('        msg = sndText.encode(self.encoding)\n')
    f.write('        for client in self.connSocketList:\n')
    f.write('            client.send(msg)\n')
    f.write('    def SendUdpRequest(self,ip,port,msg_id,paramList):\n')
    f.write('        """'+Language.G_Language[1877]+'"""\n')
    f.write('        if type(paramList) == type(""):\n')
    f.write('            paramList = self.ConvertStringToParamList(paramList)\n')
    f.write('        sndText = self.PackNetMsg(msg_id,0,paramList)\n')
    f.write('        msg = sndText.encode(self.encoding)\n')
    f.write('        sendArr = (ip,port)\n')
    f.write('        if self.socket:\n')
    f.write('            self.socket.sendto(msg,sendArr)\n')
    f.write('        else:\n')
    f.write('            print("'+Language.G_Language[1843]+'")\n')
    f.write('    def SendUdpResponse(self,ip,port,msg_id,paramList):\n')
    f.write('        """'+Language.G_Language[1878]+'"""\n')
    f.write('        if type(paramList) == type(""):\n')
    f.write('            paramList = self.ConvertStringToParamList(paramList)\n')
    f.write('        sndText = self.PackNetMsg(msg_id,1,paramList)\n')
    f.write('        msg = sndText.encode(self.encoding)\n')
    f.write('        sendArr = (ip,port)\n')
    f.write('        if self.socket:\n')
    f.write('            self.socket.sendto(msg,sendArr)\n')
    f.write('        else:\n')
    f.write('            print("'+Language.G_Language[1843]+'")\n')
    f.write('    def SendUdpNotice(self,msg_id,paramList):\n')
    f.write('        """'+Language.G_Language[1879]+'"""\n')
    f.write('        if type(paramList) == type(""):\n')
    f.write('            paramList = self.ConvertStringToParamList(paramList)\n')
    f.write('        sndText = self.PackNetMsg(msg_id,2,paramList)\n')
    f.write('        msg = sndText.encode(self.encoding)\n')
    f.write('        for sendArr in self.recvAddrList:\n')
    f.write('            #sendArr = (ip,port)\n')
    f.write('            if self.socket:\n')
    f.write('                self.socket.sendto(msg,sendArr)\n')
    f.write('            else:\n')
    f.write('                print("'+Language.G_Language[1843]+'")\n')
    f.write('    def SetListBox(self,listBox):\n')
    f.write('        """'+Language.G_Language[1264]+'"""\n')
    f.write('        self.MsgListBox = listBox\n')
    f.write('    def Print(self,msgText):\n')
    f.write('        """'+Language.G_Language[1265]+'"""\n')
    f.write('        if self.MsgListBox is not None:\n')
    f.write('            self.MsgListBox.insert(tkinter.END, msgText)\n')
#MQTT通讯
def WriteMQTT(f):
    f.write('class MQTT():\n')
    f.write('    """'+Language.G_Language[1795]+'"""\n')
    f.write("    def __init__(self,broker='',port=1383,username=None,password=None,keeplive=600,encoding='utf-8',block=False):\n")
    f.write('        super().__init__()\n')
    f.write('        self.MsgListBox = None\n')
    f.write('        self.client = mqtt.Client()\n')
    f.write('        self.client.on_connect = self.on_connect\n')
    f.write('        self.client.on_message  = self.on_message\n')
    f.write('        self.client.on_disconnect = self.on_disconnect\n')
    f.write('        self.client.on_subscribe = self.on_subscribe\n')
    f.write('        self.client.on_unsubscribe = self.on_unsubscribe\n')
    f.write('        self.client.on_publish = self.on_publish\n')
    f.write('        self.ReceiveMsgCallBack = None\n')
    f.write('        self.DisconnectCallBack = None\n')
    f.write('        self.encoding = encoding\n')
    f.write('        self.Connect(broker,port,username,password,keeplive,block)\n')
    f.write("    def __exit__(self):\n")
    f.write('        if self.client:\n')
    f.write('            self.client.close()\n')
    f.write('            self.connected = False\n')
    f.write('    def on_connect(self, client, userdata, flags, rc):\n')
    f.write('        if rc == 0:\n')
    f.write('            self.connected = True\n')
    f.write('            self.Print("'+Language.G_Language[9830]+'")\n')
    f.write('        else:\n')
    f.write('            self.Print("'+Language.G_Language[9831]+':rc="+str(rc))\n')
    f.write('    def on_message(self, client, userdata, msg):\n')
    f.write('        if self.ReceiveMsgCallBack is not None:\n')
    f.write('            self.ReceiveMsgCallBack(msg.topic,msg.payload)\n')
    f.write('        self.Print("'+Language.G_Language[9832]+'"+msg.topic+"'+Language.G_Language[9833]+'"+str(msg.payload.decode(self.encoding)))\n')
    f.write('    def on_disconnect(self, client, userdata, rc):\n')
    f.write('        self.connected = False\n')
    f.write('        if self.DisconnectCallBack is not None:\n')
    f.write('            self.DisconnectCallBack()\n')    
    f.write('        self.Print("'+Language.G_Language[9834]+'")\n')
    f.write('    def on_subscribe(self, client, userdata, mid, granted_qos):\n')
    f.write('        self.Print("'+Language.G_Language[9835]+'")\n')
    f.write('    def on_unsubscribe(self, client, userdata, mid):\n')
    f.write('        self.Print("'+Language.G_Language[9836]+'")\n')
    f.write('    def on_publish(self, client, userdata, mid):\n')
    f.write('        self.Print("'+Language.G_Language[9837]+'")\n')
    f.write('    def Connect(self,broker,port,username,password,keeplive,block):\n')
    f.write('        """'+Language.G_Language[9838]+'"""\n')
    f.write('        if username is not None and password is not None:\n')
    f.write('            self.client.username_pw_set(username,password)\n')
    f.write('        self.client.connect(broker,port,keeplive)\n')
    f.write('        if block:\n')
    f.write('            self.client.loop_forever()\n')
    f.write('        else:\n')
    f.write('            self.client.loop_start()\n')
    f.write('        self.connected = True\n')
    f.write('    def Disconnect(self):\n')
    f.write('        """'+Language.G_Language[9834]+'"""\n')
    f.write('        self.client.disconnect()\n')
    f.write('        self.connected = False\n')
    f.write('    def Subscribe(self,topic,qos=0):\n')
    f.write('        """'+Language.G_Language[9835]+'"""\n')
    f.write('        self.client.subscribe(topic,qos=0)\n')
    f.write('    def Unsubscribe(self,topic):\n')
    f.write('        """'+Language.G_Language[9836]+'"""\n')
    f.write('        self.client.unsubscribe(topic)\n')
    f.write('    def Publish(self,topic,msg,qos=0):\n')
    f.write('        """'+Language.G_Language[9837]+'"""\n')
    f.write('        self.client.publish(topic,msg,qos=0)\n')
    f.write('    def SetCallBack_onReceiveMsg(self,callBack):\n')
    f.write('        """'+Language.G_Language[9840]+'"""\n')
    f.write('        self.ReceiveMsgCallBack = callBack\n')
    f.write('    def SetCallBack_onDisconnect(self,callBack):\n')
    f.write('        """'+Language.G_Language[9841]+'"""\n')
    f.write('        self.DisconnectCallBack = callBack\n')
    f.write('    def SetListBox(self,listBox):\n')
    f.write('        """'+Language.G_Language[1264]+'"""\n')
    f.write('        self.MsgListBox = listBox\n')
    f.write('    def Print(self,msgText):\n')
    f.write('        """'+Language.G_Language[1265]+'"""\n')
    f.write('        try:\n')
    f.write('            if self.ReceiveMsgCallBack:\n')
    f.write('                self.ReceiveMsgCallBack(msgText)\n')
    f.write('            if self.MsgListBox is not None:\n')
    f.write('                self.MsgListBox.insert(tkinter.END, msgText)\n')
    f.write('            else:\n')
    f.write('                print(msgText)\n')
    f.write('        except Exception as Ex:\n')
    f.write('            print(msgText)\n')
#SSH通讯
def WriteSSH(f):
    f.write('class SSH():\n')
    f.write('    """'+Language.G_Language[1791]+'"""\n')
    f.write("    def __init__(self,hostname='',port=22,username='',password='',encoding='utf-8'):\n")
    f.write('        super().__init__()\n')
    f.write('        self.MsgListBox = None\n')
    f.write('        self.client = paramiko.SSHClient()\n')
    f.write('        self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n')
    f.write('        self.channel = None\n')
    f.write('        self.ReceiveMsgCallBack = None\n')
    f.write('        self.Connect(hostname,port,username,password,encoding)\n')
    f.write("    def __exit__(self):\n")
    f.write('        if self.client:\n')
    f.write('            self.client.close()\n')
    f.write('            if self.channel:\n')
    f.write('                self.channel.close()\n')
    f.write('                self.channel = None\n')
    f.write('            self.connected = False\n')
    # f.write('    def Execute(self,command):\n')
    # f.write('        """'+Language.G_Language[1818]+'"""\n')
    # f.write('        if self.connected == True:\n')
    # f.write('            stdin, stdout, stderr = self.client.exec_command(command)\n')
    # f.write('            stdoutLines = stdout.readlines()\n')
    # f.write('            for line in stdoutLines:\n')
    # f.write('                self.Print(line.encode(self.encoding))\n')
    # f.write('            stderrLines = stderr.readlines()\n')
    # f.write('            for line in stderrLines:\n')
    # f.write('                self.Print(line.encode(self.encoding))\n')
    # f.write('        else:\n')
    # f.write('            self.Print("'+Language.G_Language[1825]+'")\n')
    f.write('    #Thread\n')
    f.write('    def thread_read_data(self):\n')
    f.write('        try:\n')
    f.write('            lastline = ""\n')
    f.write('            while True:\n')
    f.write('                if(self.stopFlag):\n')
    f.write('                    break\n')
    f.write('                resp = self.channel.recv(1024)\n')
    f.write('                output = resp.decode(self.encoding)\n')
    f.write('                outputLines = output.split("\\n")\n')
    f.write('                if lastline != "":\n')
    f.write('                    outputLines[0] = lastline + outputLines[0]\n')
    f.write('                    lastline = ""\n')
    f.write("                if  output.endswith('# ') or output.endswith('\\n'):\n")
    f.write('                    pass\n')
    f.write("                else:\n")
    f.write('                    lastline = outputLines[-1]\n')
    f.write('                    outputLines.pop(-1)\n')
    f.write('                for line in outputLines:\n')
    f.write('                    self.Print(line)\n')
    f.write('            self.channel.close()\n')
    f.write('            self.channel = None\n')
    f.write('        except Exception as Ex:\n')
    f.write('            self.Print(Ex)\n')
    f.write("    def Connect(self,hostname='',port=22,username='',password='',encoding='utf-8'):\n")
    f.write('        """'+Language.G_Language[1832]+'"""\n')
    f.write('        self.hostname = hostname\n')
    f.write('        self.port = port\n')
    f.write('        self.username = username\n')
    f.write('        self.password = password\n')
    f.write('        self.encoding = encoding\n')
    f.write('        self.stopFlag = False\n')
    f.write('        self.connected = False\n')
    f.write('        try:\n')
    f.write("            if self.hostname != '':\n")
    f.write('                self.client.connect(self.hostname,port=self.port ,username=self.username,password=self.password)\n')
    f.write('                self.channel = self.client.invoke_shell()\n')
    f.write('                self.run_thread = threading.Thread(target=self.thread_read_data, args=[])\n')
    f.write('                self.run_thread.Daemon = True\n')
    f.write('                self.run_thread.start()\n')
    f.write('                self.connected = True\n')
    f.write('                return True\n')
    f.write('        except paramiko.AuthenticationException as Ex:\n')
    f.write('            self.Print("'+Language.G_Language[1824]+'"+str(Ex))\n')
    f.write('        except Exception as Ex:\n')
    f.write('            self.Print(str(Ex))\n')
    f.write('        return False\n')
    f.write('    def SetCallBack_onReceiveMsg(self,callBack):\n')
    f.write('        """'+Language.G_Language[1837]+'"""\n')
    f.write('        self.ReceiveMsgCallBack = callBack\n')
    f.write('    def SendCmd(self,command,echoMode = False):\n')
    f.write('        """'+Language.G_Language[1818]+'"""\n')
    f.write('        if self.connected == True:\n')
    f.write('            if echoMode == True:\n')
    f.write("                self.channel.send('echo \"'+ command+'\"\\n')\n")
    f.write('            else:\n')
    f.write("                self.channel.send(command+'\\n')\n")
    f.write('        else:\n')
    f.write('            self.Print("'+Language.G_Language[1825]+'")\n')
    f.write('    def UpLoadFile(self,localpath,remotepath):\n')
    f.write('        """'+Language.G_Language[1819]+'"""\n')
    f.write('        if self.connected == True:\n')
    f.write('            sftp = self.client.open_sftp()\n')
    f.write('            #sftp = paramiko.SFTPClient.from_transport(self.client.get_transport())\n')
    f.write('            result = sftp.put(localpath,remotepath)\n')
    f.write('            sftp.close()\n')
    f.write('            return result\n')
    f.write('        else:\n')
    f.write('            self.Print("'+Language.G_Language[1825]+'")\n')
    f.write('            return None\n')
    f.write('    def DownLoadFile(self,remotepath,localpath):\n')
    f.write('        """'+Language.G_Language[1820]+'"""\n')
    f.write('        if self.connected == True:\n')
    f.write('            sftp = self.client.open_sftp()\n')
    f.write('            result = sftp.get(remotepath,localpath)\n')
    f.write('            sftp.close()\n')
    f.write('            return result\n')
    f.write('        else:\n')
    f.write('            self.Print("'+Language.G_Language[1825]+'")\n')
    f.write('            return None\n')
    f.write('    def GetCurrWorkDir(self):\n')
    f.write('        """'+Language.G_Language[1826]+'"""\n')
    f.write('        if self.connected == True:\n')
    f.write('            sftp = self.client.open_sftp()\n')
    f.write('            currPath = sftp.getcwd()\n')
    f.write('            sftp.close()\n')
    f.write('            return currPath\n')
    f.write('        else:\n')
    f.write('            self.Print("'+Language.G_Language[1825]+'")\n')
    f.write('            return None\n')
    f.write('    def ListDir(self,remotepath):\n')
    f.write('        """'+Language.G_Language[1821]+'"""\n')
    f.write('        if self.connected == True:\n')
    f.write('            sftp = self.client.open_sftp()\n')
    f.write('            fileList = sftp.listdir(remotepath)\n')
    f.write('            sftp.close()\n')
    f.write('            return fileList\n')
    f.write('        else:\n')
    f.write('            self.Print("'+Language.G_Language[1825]+'")\n')
    f.write('            return None\n')
    f.write('    def RemoveFile(self,remotepath):\n')
    f.write('        """'+Language.G_Language[1822]+'"""\n')
    f.write('        if self.connected == True:\n')
    f.write('            sftp = self.client.open_sftp()\n')
    f.write('            sftp.remove(remotepath)\n')
    f.write('            sftp.close()\n')
    f.write('        else:\n')
    f.write('            self.Print("'+Language.G_Language[1825]+'")\n')
    f.write('    def RenameFile(self,oldremotepath,newremotepath):\n')
    f.write('        """'+Language.G_Language[1827]+'"""\n')
    f.write('        if self.connected == True:\n')
    f.write('            sftp = self.client.open_sftp()\n')
    f.write('            sftp.rename(oldremotepath,newremotepath)\n')
    f.write('            sftp.close()\n')
    f.write('        else:\n')
    f.write('            self.Print("'+Language.G_Language[1825]+'")\n')
    f.write('    def CreateDir(self,remotepath):\n')
    f.write('        """'+Language.G_Language[1828]+'"""\n')
    f.write('        if self.connected == True:\n')
    f.write('            sftp = self.client.open_sftp()\n')
    f.write('            sftp.mkdir(remotepath)\n')
    f.write('            sftp.close()\n')
    f.write('        else:\n')
    f.write('            self.Print("'+Language.G_Language[1825]+'")\n')
    f.write('    def DeleteDir(self,remotepath):\n')
    f.write('        """'+Language.G_Language[1829]+'"""\n')
    f.write('        if self.connected == True:\n')
    f.write('            sftp = self.client.open_sftp()\n')
    f.write('            sftp.rmdir(remotepath)\n')
    f.write('            sftp.close()\n')
    f.write('        else:\n')
    f.write('            self.Print("'+Language.G_Language[1825]+'")\n')
    f.write('    def SetListBox(self,listBox):\n')
    f.write('        """'+Language.G_Language[1264]+'"""\n')
    f.write('        self.MsgListBox = listBox\n')
    f.write('    def Print(self,msgText):\n')
    f.write('        """'+Language.G_Language[1265]+'"""\n')
    f.write('        try:\n')
    f.write('            if self.ReceiveMsgCallBack:\n')
    f.write('                self.ReceiveMsgCallBack(msgText)\n')
    f.write('            if self.MsgListBox is not None:\n')
    f.write('                self.MsgListBox.insert(tkinter.END, msgText)\n')
    f.write('            else:\n')
    f.write('                print(msgText)\n')
    f.write('        except Exception as Ex:\n')
    f.write('            print(msgText)\n')
    
#串口
def WriteSerial(f):
    f.write('class Serial():\n')
    f.write('    """'+Language.G_Language[1784]+'"""\n')
    f.write("    def __init__(self,serialport='',baudrate=9600,databit=8,parity=None,stopbit=None,readbufsize=4096,sendbufsize=4096,encoding='utf-8'):\n")
    f.write('        super().__init__()\n')
    f.write('        self.MsgListBox = None\n')
    f.write('        self.ReceiveMsgCallBack = None\n')
    f.write('        self.Connect(serialport,baudrate,databit,parity,stopbit,readbufsize,sendbufsize,encoding)\n')
    f.write("    def __exit__(self):\n")
    f.write('        self.stopFlag = True\n')
    f.write('    #Thread\n')
    f.write('    def thread_read_data(self):\n')
    f.write('        try:\n')
    f.write('            while True:\n')
    f.write('                if(self.stopFlag):\n')
    f.write('                    break\n')
    f.write('                read_data = self.ser.readline()\n')
    f.write('                msg = read_data.decode(self.encoding)\n')
    f.write('                self.Print(msg)\n')
    f.write('            self.ser.close()\n')
    f.write('            self.ser = None\n')
    f.write('        except Exception as e:\n')
    f.write('            self.Print(e)\n')
    f.write("    def ListPorts(self):\n")
    f.write('        """'+Language.G_Language[1838]+'"""\n')
    f.write("        return list(serial.tools.list_ports.comports())\n")
    f.write("    def Connect(self,serialport='',baudrate=9600,databit=8,parity=None,stopbit=None,readbufsize=4096,sendbufsize=4096,encoding='utf-8'):\n")
    f.write('        """'+Language.G_Language[1832]+'"""\n')
    f.write('        self.serialport = serialport\n')
    f.write("        beginIndex = self.serialport.find('COM')\n")
    f.write("        if beginIndex >= 0:\n")
    f.write("            endIndex = self.serialport.find(' ')\n")
    f.write("            if endIndex > 0:\n")
    f.write("                self.serialport = self.serialport[beginIndex:endIndex]\n")
    f.write('        self.baudrate = baudrate\n')
    f.write('        self.encoding = encoding\n')
    f.write('        self.stopFlag = False\n')
    f.write('        self.ser = None\n')
    f.write('        if self.serialport is not None and len(self.serialport) > 0:\n')
    f.write('            self.ser = serial.Serial(self.serialport,self.baudrate)\n')
    f.write('            try:\n')
    f.write('                self.ser.close()\n')
    f.write("                if databit == 7:\n")
    f.write("                    self.ser.bytesize = serial.SEVENBITS\n")
    f.write("                else:\n")
    f.write("                    self.ser.bytesize= serial.EIGHTBITS\n")
    f.write("                if parity == 'EVEN':\n")
    f.write('                    self.ser.parity = serial.PARITY_EVEN\n')
    f.write("                elif parity == 'ODD':\n")
    f.write('                    self.ser.parity = serial.PARITY_ODD\n')
    f.write("                else:\n")
    f.write('                    self.ser.parity = serial.PARITY_NONE\n')
    f.write("                if stopbit == 'ONE':\n")
    f.write('                    self.ser.stopbits = serial.STOPBITS_ONE\n')
    f.write("                elif stopbit == 'TWO':\n")
    f.write('                    self.ser.stopbits = serial.STOPBITS_TWO\n')
    f.write('                self.ser.read_buffer_size  = readbufsize\n')
    f.write('                self.ser.write_buffer_size = sendbufsize\n')
    f.write('                self.ser.read_buffer_size  = readbufsize\n')
    f.write('                self.ser.open()\n')
    f.write('                self.run_thread = threading.Thread(target=self.thread_read_data, args=[])\n')
    f.write('                self.run_thread.Daemon = True\n')
    f.write('                self.run_thread.start()\n')
    f.write('                return True\n')
    f.write('            except Exception as e:\n')
    f.write('                self.Print(e)\n')
    f.write('        return False\n')
    f.write('    def SetCallBack_onReceiveMsg(self,callBack):\n')
    f.write('        """'+Language.G_Language[1837]+'"""\n')
    f.write('        self.ReceiveMsgCallBack = callBack\n')
    f.write('    def Stop(self):\n')
    f.write('        """'+Language.G_Language[1252]+'"""\n')
    f.write('        self.stopFlag = True\n')
    f.write('    def SendData(self,sndText):\n')
    f.write('        """'+Language.G_Language[1266]+'"""\n')
    f.write('        if self.ser is not None and self.ser.is_open:\n')
    f.write('            msg = sndText.encode(self.encoding)\n')
    f.write('            print("'+Language.G_Language[1831]+'"+sndText)\n')
    f.write('            self.ser.write(msg)\n')
    f.write('            self.ser.flush()\n')
    f.write('    def SetListBox(self,listBox):\n')
    f.write('        """'+Language.G_Language[1264]+'"""\n')
    f.write('        self.MsgListBox = listBox\n')
    f.write('    def Print(self,msgText):\n')
    f.write('        """'+Language.G_Language[1265]+'"""\n')
    f.write('        try:\n')
    f.write('            if self.ReceiveMsgCallBack:\n')
    f.write('                self.ReceiveMsgCallBack(msgText)\n')
    f.write('            if self.MsgListBox is not None:\n')
    f.write('                self.MsgListBox.insert(tkinter.END, msgText)\n')
    f.write('            else:\n')
    f.write('                print(msgText)\n')
    f.write('        except Exception as Ex:\n')
    f.write('            print(msgText)\n')
#USB
def WriteUSB(f):
    f.write('class USB():\n')
    f.write('    """'+Language.G_Language[1784]+'"""\n')
    f.write("    def __init__(self,readbufsize=4096,sendbufsize=4096,encoding='utf-8'):\n")
    f.write('        super().__init__()\n')
    f.write('        self.idVendor = None\n')
    f.write('        self.idProduct = None\n')
    f.write('        self.currDevice = None\n')
    f.write("        self.devicesList = []\n")
    f.write('        self.read_buffer_size  = readbufsize\n')
    f.write('        self.write_buffer_size = sendbufsize\n')
    f.write("        self.encoding = encoding\n")
    f.write("        self.MsgListBox = None\n")
    # f.write('        self.ReceiveMsgCallBack = None\n')
    f.write("    def __exit__(self):\n")
    f.write('        self.stopFlag = True\n')
    # f.write("    def DiscoverDevices(self,threadCallback=None):\n")
    # f.write('        """'+Language.G_Language[9089]+'"""\n')
    # f.write("        def DiscoverThread():\n")
    # f.write("            self.devicesList = usb.core.find(find_all=True)\n")
    # f.write("            for device in self.devicesList:\n")
    # f.write('                print("Device VendorID=#%x,ProductID=#%x"%(hex(device.idVendor),hex(device.idProduct)))\n')
    # f.write("            if threadCallback:\n")
    # f.write("                threadCallback(self.devicesList)\n")
    # f.write("        if threadCallback:\n")
    # f.write("            t = threading.Thread(target=DiscoverThread)\n")
    # f.write("            t.setDaemon(True)\n")
    # f.write("            t.start()\n")
    # f.write("        else:\n")
    # f.write("            DiscoverThread()\n")
    # f.write("        return self.devicesList\n")
    # f.write('    #Thread\n')
    # f.write('    def thread_read_data(self):\n')
    # f.write('        try:\n')
    # f.write('            while True:\n')
    # f.write('                if(self.stopFlag):\n')
    # f.write('                    break\n')
    # f.write('                read_data = self.currDevice.read(0x82,self.read_buffer_size)\n')
    # f.write('                msg = read_data.decode(self.encoding)\n')
    # f.write('                self.Print(msg)\n')
    # f.write('        except Exception as e:\n')
    # f.write('            self.Print(e)\n')
    f.write("    def ListDevices(self):\n")
    f.write('        """'+Language.G_Language[1839]+'"""\n')
    f.write("        self.devicesList = usb.core.find(find_all=True)\n")
    f.write("        return self.devicesList\n")
    f.write("    def Connect(self,idVendor=None,idProduct=None,readbufsize=4096,sendbufsize=4096,encoding='utf-8'):\n")
    f.write('        """'+Language.G_Language[1840]+'"""\n')
    f.write('        self.currDevice = None\n')
    f.write('        if idVendor is not None and idProduct is not None:\n')
    f.write('            self.idVendor = idVendor\n')
    f.write('            self.idProduct = idProduct\n')
    f.write('            self.read_buffer_size  = readbufsize\n')
    f.write('            self.write_buffer_size = sendbufsize\n')
    f.write("            self.encoding = encoding\n")
    f.write('            self.currDevice = usb.core.find(idVendor = idVendor,idProduct = idProduct)\n')
    f.write('            if self.currDevice != None:\n')
    f.write('                self.currDevice.set_configuration()\n')
    f.write('                return True\n')
    f.write('        return False\n')
    f.write('    def Stop(self):\n')
    f.write('        """'+Language.G_Language[1252]+'"""\n')
    f.write('        self.stopFlag = True\n')
    f.write('    def ReadData(self,endPoint):\n')
    f.write('        """'+Language.G_Language[1841]+'"""\n')
    f.write('        if self.currDevice:\n')
    f.write('            read_data = self.currDevice.read(endPoint,self.read_buffer_size)\n')
    f.write('            msg = read_data.decode(self.encoding)\n')
    f.write('            self.Print(msg)\n')
    f.write('            return msg\n')
    f.write('        return None\n')
    f.write('    def SendData(self,endPoint,sndText):\n')
    f.write('        """'+Language.G_Language[1842]+'"""\n')
    f.write('        if self.currDevice:\n')
    f.write('            msg = sndText.encode(self.encoding)\n')
    f.write('            print("'+Language.G_Language[1831]+'"+sndText)\n')
    f.write('            write_len = self.currDevice.write(endPoint,sndText)\n')
    f.write('            return write_len\n')
    f.write('        return 0\n')
    f.write('    def SetListBox(self,listBox):\n')
    f.write('        """'+Language.G_Language[1264]+'"""\n')
    f.write('        self.MsgListBox = listBox\n')
    f.write('    def Print(self,msgText):\n')
    f.write('        """'+Language.G_Language[1265]+'"""\n')
    f.write('        try:\n')
    f.write('            if self.MsgListBox is not None:\n')
    f.write('                self.MsgListBox.insert(tkinter.END, msgText)\n')
    f.write('            else:\n')
    f.write('                print(msgText)\n')
    f.write('        except Exception as Ex:\n')
    f.write('            print(msgText)\n')
#蓝牙
def WriteBluetooth(f):
    f.write('class Bluetooth():\n')
    f.write('    """'+Language.G_Language[1792]+'"""\n')
    f.write("    def __init__(self,encoding='utf-8'):\n")
    f.write("        self.encoding = encoding\n")
    f.write("        self.devicesList = []\n")
    f.write("        self.MsgListBox = None\n")
    f.write("        self.stopFlag = False\n")
    f.write("        self.sock = bluetooth.BluetoothSocket(bluetooth.RFCOMM)\n")
    f.write("        self.sock.settimeout(1)\n")
    f.write("        self.sock.bind(('',bluetooth.PORT_ANY))\n")
    f.write("        self.sock.listen(1)\n")
    f.write('        self.ReceiveMsgCallBack = None\n')
    f.write("    def __exit__(self):\n")
    f.write('        if self.sock:\n')
    f.write('            self.sock.close()\n')
    f.write('            self.sock = None\n')
    f.write('        self.stopFlag = True\n')
    f.write("    def DiscoverDevices(self,threadCallback=None):\n")
    f.write('        """'+Language.G_Language[9089]+'"""\n')
    f.write("        def DiscoverThread():\n")
    f.write("            self.devicesList = bluetooth.discover_devices()\n")
    f.write("            for device in self.devicesList:\n")
    f.write('                print("Device Name:",bluetooth.lookup_name(device),"(",device,")")\n')
    f.write("            if threadCallback:\n")
    f.write("                threadCallback(self.devicesList)\n")
    f.write("        if threadCallback:\n")
    f.write("            t = threading.Thread(target=DiscoverThread)\n")
    f.write("            t.setDaemon(True)\n")
    f.write("            t.start()\n")
    f.write("        else:\n")
    f.write("            DiscoverThread()\n")
    f.write("        return self.devicesList\n")
    f.write('    #Thread\n')
    f.write('    def thread_read_data(self):\n')
    f.write('        try:\n')
    f.write('            while True:\n')
    f.write('                if(self.stopFlag):\n')
    f.write('                    break\n')
    f.write('                read_data = self.sock.recv(1024)\n')
    f.write('                msg = read_data.decode(self.encoding)\n')
    f.write('                self.Print(msg)\n')
    f.write('            self.sock.close()\n')
    f.write('            self.sock = None\n')
    f.write('        except Exception as e:\n')
    f.write('            self.Print(e)\n')
    f.write("    def Connect(self,device_addr):\n")
    f.write('        """'+Language.G_Language[9088]+'"""\n')
    f.write("        self.sock.connect(device_addr)\n")
    f.write("        services = bluetooth.find_service(address=device_addr)\n")
    f.write("        for service in services:\n")
    f.write('            print("Service Name:",service["name"])\n')
    f.write('            print("Host:",service["host"])\n')
    f.write('            print("Description:",service["description"])\n')
    f.write('            print("Protocol:",service["protocol"])\n')
    f.write('            print("Port:",service["port"])\n')
    f.write('            print("Service Classes:",service["service-classes"])\n')
    f.write('            print()\n')
    f.write("        self.run_thread = threading.Thread(target=self.thread_read_data, args=[])\n")
    f.write("        self.run_thread.Daemon = True\n")
    f.write("        self.run_thread.start()\n")
    f.write('        return True\n')
    f.write('    def SetCallBack_onReceiveMsg(self,callBack):\n')
    f.write('        """'+Language.G_Language[1837]+'"""\n')
    f.write('        self.ReceiveMsgCallBack = callBack\n')
    f.write("    def Stop(self):\n")
    f.write('        self.stopFlag = True\n')
    f.write("    def SendData(self,sndText):\n")
    f.write("        msg = sndText.encode(self.encoding)\n")
    f.write("        self.sock.send(msg)\n")
    f.write("    def SetListBox(self,listBox):\n")
    f.write('        self.MsgListBox = listBox\n')
    f.write("    def Print(self,msgText):\n")
    f.write("        try:\n")
    f.write("            if self.ReceiveMsgCallBack:\n")
    f.write("                self.ReceiveMsgCallBack(msgText)\n")
    f.write("            if self.MsgListBox is not None:\n")
    f.write("                self.MsgListBox.insert(tkinter.END, msgText)\n")
    f.write("            else:\n")
    f.write("                print(msgText)\n")
    f.write("        except Exception as Ex:\n")
    f.write("            print(msgText)\n")
#SMTP
def WriteSMTP(f):
    f.write('class SMTP():\n')
    f.write('    """'+Language.G_Language[1793]+'"""\n')
    f.write("    def __init__(self,server=None,port=0,email='',password=''):\n")
    f.write("        self.Login(server,port,email,password)\n")
    f.write("    def __exit__(self):\n")
    f.write('        smtp.quit()\n')
    f.write("    def Login(self,server=None,port=0,email='',password=''):\n")
    f.write('        """'+Language.G_Language[9090]+'"""\n')
    f.write("        self.server = server\n")
    f.write("        self.port = port\n")
    f.write("        self.email = email\n")
    f.write("        self.password = password\n")
    f.write("        self.smtp = None\n")
    f.write("        if self.server and port != 0:\n")
    f.write("            self.smtp = smtplib.SMTP(server,port)\n")
    f.write("            self.smtp.starttls()\n")
    f.write("            self.smtp.login(email,password)\n")
    f.write("    def SendMail(self,toMail,subject,content):\n")
    f.write('        """'+Language.G_Language[9091]+'"""\n')
    f.write("        if self.smtp:\n")
    f.write("            msg = MIMEMultipart()\n")
    f.write("            msg['From']=self.email\n")
    f.write("            msg['To']=toMail\n")
    f.write("            msg['Subject']=subject\n")
    f.write("            msg.attach(MIMEText(content,'plain'))\n")
    f.write("            smtp.send_message(msg)\n")
    f.write("    def Quit(self):\n")
    f.write('        """'+Language.G_Language[9092]+'"""\n')
    f.write("        smtp.quit()\n")
#SMTP
def WriteDHT(f):
    f.write('class DHT():\n')
    f.write('    """'+Language.G_Language[1793]+'"""\n')
    f.write("    def __init__(self,sensor=Adafruit_DHT.DHT11,pin=4):\n")
    f.write("        self.sensor = sensor\n")
    f.write("        self.pin = pin\n")
    f.write("    def __exit__(self):\n")
    f.write('        smtp.quit()\n')
    f.write("    def Read(self):\n")
    f.write('        """'+Language.G_Language[9095]+'"""\n')
    f.write("        humidity, temperature = Adafruit_DHT.read_retry(self.sensor, self.pin)\n")
    f.write("        return humidity,temperature\n")
#浏览器
def WriteSelenium(f):
    f.write('class Selenium():\n')
    f.write('    """'+Language.G_Language[1790]+'"""\n')
    f.write("    def __init__(self,drivertype='',url='',headless=False,profile_dir='',proxy_path='',server_path=''):\n")
    f.write('        super().__init__()\n')
    f.write('        self.browser = None\n')
    f.write('        self.wait = None\n')
    f.write('        self.proxy = None\n')
    f.write('        if profile_dir != "":\n')
    f.write('            if profile_dir.find(":") < 0:\n')
    f.write('                profile_dir = os.path.join(os.getcwd(),profile_dir)\n')
    f.write('                profile_dir = profile_dir.replace("\\\\", "/")\n')
    f.write('            if os.path.exists(profile_dir) == False:\n')
    f.write('                os.mkdir(profile_dir)\n')
    f.write('        if proxy_path != "":\n')
    f.write('            if proxy_path.find(":") < 0:\n')
    f.write('                proxy_path = os.path.join(os.getcwd(),proxy_path)\n')
    f.write('                proxy_path = proxy_path.replace("\\\\", "/")\n')
    f.write('            if os.path.exists(proxy_path) == False:\n')
    f.write('                MessageBox("'+Language.G_Language[9865]+'")\n')
    f.write('        if server_path != "":\n')
    f.write('            if server_path.find(":") < 0:\n')
    f.write('                server_path = os.path.join(os.getcwd(),server_path)\n')
    f.write('                server_path = server_path.replace("\\\\", "/")\n')
    f.write('            if os.path.exists(server_path) == False:\n')
    f.write('                MessageBox("'+Language.G_Language[9866]+'")\n')
    f.write('        if drivertype == \'Chrome\':\n')
    f.write('            chrome_options = Options()\n')
    f.write('            if headless == True:\n')
    f.write('                # 使用headless无界面浏览器模式\n')
    # f.write('                chrome_options = webdriver.ChromeOptions()\n')
    f.write('                chrome_options.add_argument(\'--headless\')\n')
    f.write('                # 如果不加这个选项，有时定位会出现问题\n')
    f.write('                chrome_options.add_argument(\'--disable-gpu\')\n')
    f.write('            if profile_dir != "":\n')
    f.write('                chrome_options.add_argument(\'--user-data-dir=\'+profile_dir)\n')
    f.write('            if proxy_path:\n')
    f.write('                self.proxy_server = Server(proxy_path)\n')
    f.write('                self.proxy_server.start()\n')
    f.write('                self.proxy = self.proxy_server.create_proxy()\n')
    f.write('                proxy_caps = webdriver.DesiredCapabilities.CHROME\n')
    f.write("                proxy_caps['proxy'] = {\n")
    f.write("                    'httpProxy': self.proxy.proxy,\n")
    f.write("                    'ftpProxy': self.proxy.proxy,\n")
    f.write("                    'sslProxy': self.proxy.proxy,\n")
    f.write("                    'noProxy': '',\n")
    f.write("                    'proxyType': 'MANUAL',\n")
    f.write("                    'autodetect': False\n")
    f.write("                }\n")
    f.write("                chrome_options.add_argument('--proxy-server={host}:{port}'.format(host='localhost', port=self.proxy.port))\n")
    f.write('                proxy_option = f"--proxy-server={self.proxy.proxy}"\n')
    f.write("                chrome_options.add_argument('--proxy-server={0}'.format(self.proxy.proxy))\n")
    f.write("                chrome_options.add_argument('ignore-certificate-errors')\n")
    f.write("                chrome_options.add_argument(proxy_option)\n")
    f.write("                service = Service(server_path)\n")
    f.write("                self.browser  = webdriver.Chrome(service=service, options=chrome_options)\n")
    f.write('            else:\n')
    f.write('                self.browser  = webdriver.Chrome(options=chrome_options)\n')
    f.write('        elif drivertype == \'Firefox\':\n')
    f.write('            if profile_dir != "":\n')
    f.write('                firefox_profile = webdriver.FirefoxProfile(profile_dir)\n')
    f.write('                self.browser  = webdriver.Firefox(firefox_profile)\n')
    f.write('            else:\n')
    f.write('                self.browser  = webdriver.Firefox()\n')
    f.write('        elif drivertype == \'IE\':\n')
    f.write('            self.browser  = webdriver.Ie()\n')
    f.write('        elif drivertype == \'Edge\':\n')
    f.write('            self.browser  = webdriver.Edge()\n')
    f.write('        elif drivertype == \'Safari\':\n')
    f.write('            self.browser  = webdriver.Safari()\n')
    f.write('        elif drivertype == \'Opera\':\n')
    f.write('            self.browser  = webdriver.Safari()\n')
    f.write('        if self.browser:\n')
    f.write('            self.wait = WebDriverWait(self.browser,10,0.5)\n')
    f.write('            if url != \'\':\n')
    f.write('                if url.find("http://") < 0 and url.find("https://") < 0:\n')
    f.write('                    url = "http://"+url\n')
    f.write('                self.browser.get(url)\n')
    f.write("    def __exit__(self):\n")
    f.write('        self.Exit()\n')
    f.write('    def start_har(self, har_name="default"):\n')
    f.write('        """'+Language.G_Language[8241]+'"""\n')
    f.write('        if self.proxy:\n')
    f.write("            self.proxy.new_har(har_name, options={'captureHeaders': True, 'captureContent': True})\n")
    f.write('    def stop_har(self, save_path=None,shaixuan="",shaixuan1="sdasddadsf"):\n')
    f.write('        """'+Language.G_Language[8242]+'"""\n')
    f.write("        urls = []\n")
    f.write("        if self.proxy and hasattr(self.proxy, 'new_har'):\n")
    f.write("            har_data = self.proxy.har\n")
    f.write("            for entry in har_data['log']['entries']:\n")
    f.write("                _url = entry['request']['url']\n")
    f.write("                if shaixuan in _url or shaixuan1 in _url:\n")
    f.write("                    _response = entry['response']\n")
    f.write("                    _content = _response['content']\n")
    f.write("                    urls.append(_url)\n")
    f.write("                    if save_path:\n")
    f.write("                        with open(save_path, 'w', encoding='utf-8') as f:\n")
    f.write("                            f.write(str(_content))\n")
    f.write("                    self.proxy.new_har()\n")
    f.write("        return urls\n")
    f.write('    def Exit(self):\n')
    f.write('        """'+Language.G_Language[8243]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            self.browser.quit()\n')
    f.write('        if self.proxy_server:\n')
    f.write('            self.proxy_server.stop()\n')
    f.write('        self.browser = None\n')
    f.write('        self.proxy = None\n')
    f.write('        self.proxy_server = None\n')
    f.write('    def Open(self,url):\n')
    f.write('        """'+Language.G_Language[8237]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            self.browser.get(url)\n')
    f.write('    def GoToURL(self,url):\n')
    f.write('        """'+Language.G_Language[8237]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            self.browser.get(url)\n')
    f.write('    def Quit(self):\n')
    f.write('        """'+Language.G_Language[8201]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            self.browser.quit()\n')
    f.write('            self.browser = None\n')
    f.write('    def GetBrowser(self):\n')
    f.write('        """'+Language.G_Language[8202]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            return self.browser\n')
    f.write('        return None\n')
    f.write('    def GetBrowserName(self):\n')
    f.write('        """'+Language.G_Language[8203]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            return self.browser.name\n')
    f.write('        return None\n')
    f.write('    def GetURL(self):\n')
    f.write('        """'+Language.G_Language[8204]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            return self.browser.current_url\n')
    f.write('        return None\n')
    f.write('    def GetWebCode(self):\n')
    f.write('        """'+Language.G_Language[8205]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            return self.browser.page_source\n')
    f.write('        return None\n')
    f.write('    def GetTitle(self):\n')
    f.write('        """'+Language.G_Language[8206]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            return self.browser.title\n')
    f.write('        return None\n')
    f.write('    def Maximize(self):\n')
    f.write('        """'+Language.G_Language[8207]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            self.browser.maximize_window()\n')
    f.write('    def Minimize(self):\n')
    f.write('        """'+Language.G_Language[8208]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            self.browser.minimize_window()\n')
    f.write('    def SetBrowserSize(self,width,height):\n')
    f.write('        """'+Language.G_Language[8209]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            self.browser.set_window_size(width, height)\n')
    f.write('    def GoFront(self):\n')
    f.write('        """'+Language.G_Language[8210]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            self.browser.forword()\n')
    f.write('    def GoBack(self):\n')
    f.write('        """'+Language.G_Language[8211]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            self.browser.back()\n')
    f.write('    def Refresh(self):\n')
    f.write('        """'+Language.G_Language[8212]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            self.browser.refresh()\n')
    f.write('    def Close(self):\n')
    f.write('        """'+Language.G_Language[8213]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            self.browser.close()\n')
    f.write('    def ExecuteJS(self,JScode):\n')
    f.write('        """'+Language.G_Language[8214]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            self.browser.execute_script(JScode)\n')
    f.write('    def GetCookies(self,key=\'\'):\n')
    f.write('        """'+Language.G_Language[8215]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            if key != \'\':\n')
    f.write('                return self.browser.get_cookie(key)\n')
    f.write('            else:\n')
    f.write('                return self.browser.get_cookies()\n')
    f.write('        return None\n')
    f.write('    def AddCookie(self,key,value):\n')
    f.write('        """'+Language.G_Language[8238]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            if key != \'\':\n')
    f.write('                cookie = {}\n')
    f.write('                cookie[key] = value\n')
    f.write('                self.browser.add_cookie(cookie)\n')
    f.write('    def SetCookies(self,cookies={}):\n')
    f.write('        """'+Language.G_Language[8239]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            if cookies:\n')
    f.write('                self.browser.add_cookie(cookies)\n')
    f.write('    def DeleteCookies(self,key=\'\'):\n')
    f.write('        """'+Language.G_Language[8216]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            if key != \'\':\n')
    f.write('                self.browser.delete_cookie(key)\n')
    f.write('            else:\n')
    f.write('                self.browser.delete_all_cookies()\n')
    f.write('    def ImplicitlyWait(self,waitTime=5):\n')
    f.write('        """'+Language.G_Language[8240]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            self.browser.implicitly_wait(waitTime)\n')
    f.write("    def FindElement_By_ID(self,id,waitflag='presence'):\n")
    f.write('        """'+Language.G_Language[8217]+'"""\n')
    f.write('        try:\n')
    f.write("            if waitflag =='invisibility':\n")
    f.write('                element = self.wait.until(EC.invisibility_of_element_located((By.ID,id)))\n')
    f.write("            elif waitflag =='clickable':\n")
    f.write('                element = self.wait.until(EC.element_to_be_clickable((By.ID,id)))\n')
    f.write("            elif waitflag =='presence':\n")
    f.write('                element = self.wait.until(EC.presence_of_element_located((By.ID,id)))\n')
    f.write('            return element\n')
    f.write('        except:\n')
    f.write('            print("Can\'t find Element by id \""+id+"\"")\n')
    f.write('        return None\n')
    f.write('    def FindAllElement_By_ID(self,id):\n')
    f.write('        """'+Language.G_Language[8218]+'"""\n')
    f.write('        try:\n')
    f.write('            elementList = self.wait.until(EC.presence_of_all_elements_located((By.ID,id)))\n')
    f.write('            return elementList\n')
    f.write('        except:\n')
    f.write('            print("Can\'t find Element by id \""+id+"\"")\n')
    f.write('        return None\n')
    f.write("    def FindElement_By_Name(self,name,waitflag='presence'):\n")
    f.write('        """'+Language.G_Language[8219]+'"""\n')
    f.write('        try:\n')
    f.write("            if waitflag =='invisibility':\n")
    f.write('                element = self.wait.until(EC.invisibility_of_element_located((By.NAME,name)))\n')
    f.write("            elif waitflag =='clickable':\n")
    f.write('                element = self.wait.until(EC.element_to_be_clickable((By.NAME,name)))\n')
    f.write("            elif waitflag =='presence':\n")
    f.write('                element = self.wait.until(EC.presence_of_element_located((By.NAME,name)))\n')
    f.write('            return element\n')
    f.write('        except:\n')
    f.write('            print("Can\'t find Element by name \""+name+"\"")\n')
    f.write('        return None\n')
    f.write('    def FindAllElement_By_Name(self,name):\n')
    f.write('        """'+Language.G_Language[8220]+'"""\n')
    f.write('        try:\n')
    f.write('            elementList = self.wait.until(EC.presence_of_all_elements_located((By.NAME,name)))\n')
    f.write('            return elementList\n')
    f.write('        except:\n')
    f.write('            print("Can\'t find Element by name \""+name+"\"")\n')
    f.write('        return None\n')
    f.write("    def FindElement_By_TagName(self,tagName,waitflag='presence'):\n")
    f.write('        """'+Language.G_Language[8221]+'"""\n')
    f.write('        try:\n')
    f.write("            if waitflag =='invisibility':\n")
    f.write('                element = self.wait.until(EC.invisibility_of_element_located((By.TAG_NAME,tagName)))\n')
    f.write("            elif waitflag =='clickable':\n")
    f.write('                element = self.wait.until(EC.element_to_be_clickable((By.TAG_NAME,tagName)))\n')
    f.write("            elif waitflag =='presence':\n")
    f.write('                element = self.wait.until(EC.presence_of_element_located((By.TAG_NAME,tagName)))\n')
    f.write('            return element\n')
    f.write('        except:\n')
    f.write('            print("Can\'t find Element by tagName \""+tagName+"\"")\n')
    f.write('        return None\n')
    f.write('    def FindAllElement_By_TagName(self,tagName):\n')
    f.write('        """'+Language.G_Language[8222]+'"""\n')
    f.write('        try:\n')
    f.write('            elementList = self.wait.until(EC.presence_of_all_elements_located((By.TAG_NAME,tagName)))\n')
    f.write('            return elementList\n')
    f.write('        except:\n')
    f.write('            print("Can\'t find Element by tagName \""+tagName+"\"")\n')
    f.write('        return None\n')
    f.write("    def FindElement_By_ClassName(self,className,waitflag='presence'):\n")
    f.write('        """'+Language.G_Language[8223]+'"""\n')
    f.write('        try:\n')
    f.write("            if waitflag =='invisibility':\n")
    f.write('                element = self.wait.until(EC.invisibility_of_element_located((By.CLASS_NAME,className)))\n')
    f.write("            elif waitflag =='clickable':\n")
    f.write('                element = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME,className)))\n')
    f.write("            elif waitflag =='presence':\n")
    f.write('                element = self.wait.until(EC.presence_of_element_located((By.CLASS_NAME,className)))\n')
    f.write('            return element\n')
    f.write('        except:\n')
    f.write('            print("Can\'t find Element by className \""+className+"\"")\n')
    f.write('        return None\n')
    f.write('    def FindAllElement_By_ClassName(self,className):\n')
    f.write('        """'+Language.G_Language[8224]+'"""\n')
    f.write('        try:\n')
    f.write('            elementList = self.wait.until(EC.presence_of_all_elements_located((By.CLASS_NAME,className)))\n')
    f.write('            return elementList\n')
    f.write('        except:\n')
    f.write('            print("Can\'t find Element by className \""+className+"\"")\n')
    f.write('        return None\n')
    f.write("    def FindElement_By_CSS(self,selector,waitflag='presence'):\n")
    f.write('        """'+Language.G_Language[8225]+'"""\n')
    f.write('        try:\n')
    f.write("            if waitflag =='invisibility':\n")
    f.write('                element = self.wait.until(EC.invisibility_of_element_located((By.CSS_SELECTOR,className)))\n')
    f.write("            elif waitflag =='clickable':\n")
    f.write('                element = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,className)))\n')
    f.write("            elif waitflag =='presence':\n")
    f.write('                element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,className)))\n')
    f.write('            return element\n')
    f.write('        except:\n')
    f.write('            print("Can\'t find Element by className \""+className+"\"")\n')
    f.write('        return None\n')
    f.write('    def FindAllElement_By_CSS(self,selector):\n')
    f.write('        """'+Language.G_Language[8226]+'"""\n')
    f.write('        try:\n')
    f.write('            elementList = self.wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR,className)))\n')
    f.write('            return elementList\n')
    f.write('        except:\n')
    f.write('            print("Can\'t find Element by className \""+className+"\"")\n')
    f.write('        return None\n')
    f.write("    def FindElement_By_XPath(self,xpath,waitflag='presence'):\n")
    f.write('        """'+Language.G_Language[8227]+'"""\n')
    f.write('        try:\n')
    f.write("            if waitflag =='invisibility':\n")
    f.write('                element = self.wait.until(EC.invisibility_of_element_located((By.XPATH,xpath)))\n')
    f.write("            elif waitflag =='clickable':\n")
    f.write('                element = self.wait.until(EC.element_to_be_clickable((By.XPATH,xpath)))\n')
    f.write("            elif waitflag =='presence':\n")
    f.write('                element = self.wait.until(EC.presence_of_element_located((By.XPATH,xpath)))\n')
    f.write('            return element\n')
    f.write('        except:\n')
    f.write('            print("Can\'t find Element by xpath \""+xpath+"\"")\n')
    f.write('        return None\n')
    f.write('    def FindAllElement_By_XPath(self,xpath):\n')
    f.write('        """'+Language.G_Language[8228]+'"""\n')
    f.write('        try:\n')
    f.write('            elementList = self.wait.until(EC.presence_of_all_elements_located((By.XPATH,xpath)))\n')
    f.write('            return elementList\n')
    f.write('        except:\n')
    f.write('            print("Can\'t find Element by xpath \""+xpath+"\"")\n')
    f.write('        return None\n')
    f.write("    def FindElement_By_LinkText(self,linktext,waitflag='presence'):\n")
    f.write('        """'+Language.G_Language[8229]+'"""\n')
    f.write('        try:\n')
    f.write("            if waitflag =='invisibility':\n")
    f.write('                element = self.wait.until(EC.invisibility_of_element_located((By.LINK_TEXT,linktext)))\n')
    f.write("            elif waitflag =='clickable':\n")
    f.write('                element = self.wait.until(EC.element_to_be_clickable((By.LINK_TEXT,linktext)))\n')
    f.write("            elif waitflag =='presence':\n")
    f.write('                element = self.wait.until(EC.presence_of_element_located((By.LINK_TEXT,linktext)))\n')
    f.write('            return element\n')
    f.write('        except:\n')
    f.write('            print("Can\'t find Element by link text \""+linktext+"\"")\n')
    f.write('        return None\n')
    f.write('    def FindAllElement_By_LinkText(self,linktext):\n')
    f.write('        """'+Language.G_Language[8230]+'"""\n')
    f.write('        try:\n')
    f.write('            elementList = self.wait.until(EC.presence_of_all_elements_located((By.LINK_TEXT,linktext)))\n')
    f.write('            return elementList\n')
    f.write('        except:\n')
    f.write('            print("Can\'t find Element by link text \""+linktext+"\"")\n')
    f.write('        return None\n')
    f.write("    def FindElement_By_ParitalLinkText(self,linktext,waitflag='presence'):\n")
    f.write('        """'+Language.G_Language[8231]+'"""\n')
    f.write('        try:\n')
    f.write("            if waitflag =='invisibility':\n")
    f.write('                element = self.wait.until(EC.invisibility_of_element_located((By.PARTIAL_LINK_TEXT,linktext)))\n')
    f.write("            elif waitflag =='clickable':\n")
    f.write('                element = self.wait.until(EC.element_to_be_clickable((By.PARTIAL_LINK_TEXT,linktext)))\n')
    f.write("            elif waitflag =='presence':\n")
    f.write('                element = self.wait.until(EC.presence_of_element_located((By.PARTIAL_LINK_TEXT,linktext)))\n')
    f.write('            return element\n')
    f.write('        except:\n')
    f.write('            print("Can\'t find Element by parital link text \""+linktext+"\"")\n')
    f.write('        return None\n')
    f.write('    def FindAllElement_By_ParitalLinkText(self,linktext):\n')
    f.write('        """'+Language.G_Language[8232]+'"""\n')
    f.write('        try:\n')
    f.write('            elementList = self.wait.until(EC.presence_of_all_elements_located((By.PARTIAL_LINK_TEXT,linktext)))\n')
    f.write('            return elementList\n')
    f.write('        except:\n')
    f.write('            print("Can\'t find Element by parital link text \""+linktext+"\"")\n')
    f.write('        return None\n')
    f.write('    def GetActionChains(self):\n')
    f.write('        """'+Language.G_Language[8233]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            return ActionChains(self.browser)\n')
    f.write('        return None\n')
    f.write('    def RunAction(self,element,actionName,valueList=None):\n')
    f.write('        """'+Language.G_Language[8234]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            if actionName == "click":\n')
    f.write('                ActionChains(self.browser).click(element).perform()\n')
    f.write('            elif actionName == "click_and_hold":\n')
    f.write('                ActionChains(self.browser).click_and_hold(element).perform()\n')
    f.write('            elif actionName == "context_click":\n')
    f.write('                ActionChains(self.browser).context_click(element).perform()\n')
    f.write('            elif actionName == "double_click":\n')
    f.write('                ActionChains(self.browser).double_click(element).perform()\n')
    f.write('            elif actionName == "drag_and_drop":\n')
    f.write('                ActionChains(self.browser).drag_and_drop(element,valueList[0]).perform()\n')
    f.write('            elif actionName == "drag_and_drop_by_offset":\n')
    f.write('                ActionChains(self.browser).drag_and_drop_by_offset(element,valueList[0],valueList[1]).perform()\n')
    f.write('            elif actionName == "key_down":\n')
    f.write('                ActionChains(self.browser).key_down(valueList[0],element).perform()\n')
    f.write('            elif actionName == "key_up":\n')
    f.write('                ActionChains(self.browser).key_up(valueList[0],element).perform()\n')
    f.write('            elif actionName == "move_by_offset":\n')
    f.write('                ActionChains(self.browser).move_by_offset(valueList[0],valueList[1]).perform()\n')
    f.write('            elif actionName == "move_to_element":\n')
    f.write('                ActionChains(self.browser).move_to_element(valueList[0]).perform()\n')
    f.write('            elif actionName == "move_to_element_with_offset":\n')
    f.write('                ActionChains(self.browser).move_to_element_with_offset(valueList[0],valueList[1],valueList[2]).perform()\n')
    f.write('            elif actionName == "perform":\n')
    f.write('                ActionChains(self.browser).perform()\n')
    f.write('            elif actionName == "release":\n')
    f.write('                ActionChains(self.browser).release(element).perform()\n')
    f.write('            elif actionName == "send_keys":\n')
    f.write('                ActionChains(self.browser).send_keys(valueList).perform()\n')
    f.write('            elif actionName == "send_keys_to_element":\n')
    f.write('                ActionChains(self.browser).send_keys_to_element(element,valueList).perform()\n')
    f.write('    def AddActionToChains(self,element,actionName,valueList=None):\n')
    f.write('        """'+Language.G_Language[8235]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            if actionName == "click":\n')
    f.write('                ActionChains(self.browser).click(element)\n')
    f.write('            elif actionName == "click_and_hold":\n')
    f.write('                ActionChains(self.browser).click_and_hold(element)\n')
    f.write('            elif actionName == "context_click":\n')
    f.write('                ActionChains(self.browser).context_click(element)\n')
    f.write('            elif actionName == "double_click":\n')
    f.write('                ActionChains(self.browser).double_click(element)\n')
    f.write('            elif actionName == "drag_and_drop":\n')
    f.write('                ActionChains(self.browser).drag_and_drop(element,valueList[0])\n')
    f.write('            elif actionName == "drag_and_drop_by_offset":\n')
    f.write('                ActionChains(self.browser).drag_and_drop_by_offset(element,valueList[0],valueList[1])\n')
    f.write('            elif actionName == "key_down":\n')
    f.write('                ActionChains(self.browser).key_down(valueList[0],element)\n')
    f.write('            elif actionName == "key_up":\n')
    f.write('                ActionChains(self.browser).key_up(valueList[0],element)\n')
    f.write('            elif actionName == "move_by_offset":\n')
    f.write('                ActionChains(self.browser).move_by_offset(valueList[0],valueList[1])\n')
    f.write('            elif actionName == "move_to_element":\n')
    f.write('                ActionChains(self.browser).move_to_element(valueList[0])\n')
    f.write('            elif actionName == "move_to_element_with_offset":\n')
    f.write('                ActionChains(self.browser).move_to_element_with_offset(valueList[0],valueList[1],valueList[2])\n')
    f.write('            elif actionName == "release":\n')
    f.write('                ActionChains(self.browser).release(element)\n')
    f.write('            elif actionName == "send_keys":\n')
    f.write('                ActionChains(self.browser).send_keys(valueList)\n')
    f.write('            elif actionName == "send_keys_to_element":\n')
    f.write('                ActionChains(self.browser).send_keys_to_element(element,valueList)\n')
    f.write('    def PerformActionChains(self):\n')
    f.write('        """'+Language.G_Language[8236]+'"""\n')
    f.write('        if self.browser:\n')
    f.write('            ActionChains(self.browser).perform()\n')
#打印机
def WritePrinter(f):
    f.write('class Printer():\n')
    f.write('    """'+Language.G_Language[1788]+'"""\n')
    f.write('    def __init__(self):\n')
    f.write('        self.PrinterName = win32print.GetDefaultPrinter()\n')
    f.write('        self.hPrinter = win32print.OpenPrinter(self.PrinterName)\n')
    f.write('    def EnumPrinters(self):\n')
    f.write('        """'+Language.G_Language[1267]+'"""\n')
    f.write('        return win32print.EnumPrinters(2)\n')
    f.write('    def PrintDocument(self,fileName):\n')
    f.write('        """'+Language.G_Language[1268]+'"""\n')
    f.write('        if os.path.exists(fileName) == True:\n')
    f.write('            ThePath, TheFile = os.path.split(fileName)\n')
    f.write('            if fileName.find(".py") > 0:\n')
    f.write("                f = open(fileName,'rb')\n")
    f.write('                content = f.read()\n')
    f.write('                f.close()\n')
    f.write('                import tempfile\n')
    f.write("                TempFileName = tempfile.mktemp (TheFile.replace('.py','.txt'))\n")
    f.write('                open (TempFileName, "wb").write (content)\n')
    f.write('                fileName = TempFileName\n')
    f.write('            try:\n')
    f.write("                hJob = win32print.StartDocPrinter(self.hPrinter, 1, ('PrintJobName', None, 'RAW'))\n")
    f.write('            except:\n')
    f.write('                pass\n')
    f.write('            try:\n')
    f.write('                win32api.ShellExecute(0, "print", fileName, TheFile, ".", 0)\n')
    f.write('                win32print.StartPagePrinter(self.hPrinter)\n')
    f.write('                win32print.EndPagePrinter(self.hPrinter)\n')
    f.write('                return True\n')
    f.write('            finally:\n')
    f.write('                win32print.EndDocPrinter(self.hPrinter)\n')
    f.write('        return False\n')
    f.write('    def PrintImage(self,fileName,HORZRES = 8,VERTRES = 10,LOGPIXELSX = 88,LOGPIXELSY = 90,PHYSICALWIDTH = 110,PHYSICALHEIGHT = 111,PHYSICALOFFSETX = 112,PHYSICALOFFSETY = 113):\n')
    f.write('        """'+Language.G_Language[1269]+'"""\n')
    f.write('        if os.path.exists(fileName) == True:\n')
    f.write('            try:\n')
    f.write('                hDC = win32ui.CreateDC ()\n')
    f.write('                hDC.CreatePrinterDC (self.PrinterName)\n')
    f.write('                printable_area = hDC.GetDeviceCaps (HORZRES), hDC.GetDeviceCaps (VERTRES)\n')
    f.write('                printer_size = hDC.GetDeviceCaps (PHYSICALWIDTH), hDC.GetDeviceCaps (PHYSICALHEIGHT)\n')
    f.write('                printer_margins = hDC.GetDeviceCaps (PHYSICALOFFSETX), hDC.GetDeviceCaps (PHYSICALOFFSETY)\n')
    f.write('                bmp = Image.open (fileName)\n')
    f.write('                ratios = [1.0 * printable_area[0] / bmp.size[0], 1.0 * printable_area[1] / bmp.size[1]]\n')
    f.write('                scale = min (ratios)\n')
    f.write('                hDC.StartDoc(fileName)\n')
    f.write('                hDC.StartPage()\n')
    f.write('                dib = ImageWin.Dib (bmp)\n')
    f.write('                scaled_width, scaled_height = [int (scale * i) for i in bmp.size]\n')
    f.write('                dib.draw (hDC.GetHandleOutput(), (0, 0, scaled_width, scaled_height))\n')
    f.write('                hDC.EndPage()\n')
    f.write('                hDC.EndDoc()\n')
    f.write('                hDC.DeleteDC()\n')
    f.write('                return True\n')
    f.write('            finally:\n')
    f.write('                return False\n')
    f.write('        return False\n')
#定时器
def WriteTimer(f):
    f.write('class Timer():\n')
    f.write('    """'+Language.G_Language[1789]+'"""\n')
    f.write('    def __init__(self,Interval,callbackFunction):\n')
    f.write('        self.Interval = Interval\n')
    f.write('        self.Widget = None\n')
    f.write('        self.TimerIndex = 0\n')
    f.write('        self.TimeID = None\n')
    f.write('        self.Running = False\n')
    f.write('        self.CallBackFunction = callbackFunction\n')
    f.write('    def SetInterval(self,Interval):\n')
    f.write('        """'+Language.G_Language[1270]+'"""\n')
    f.write('        self.Interval = Interval\n')
    f.write('    def SetWidget(self,Widget):\n')
    f.write('        """'+Language.G_Language[1271]+'"""\n')
    f.write('        self.Widget = Widget\n')
    f.write('    def GetWidget(self):\n')
    f.write('        """'+Language.G_Language[1867]+'"""\n')
    f.write('        return self.Widget\n')
    f.write('    def Start(self):\n')
    f.write('        """'+Language.G_Language[1272]+'"""\n')
    f.write('        if self.Widget:\n')
    f.write('            self.TimerIndex = 0\n')
    f.write('            self.TimeID = self.Widget.after(self.Interval, lambda : self.Timer_CallBack(self.TimerIndex))\n')
    f.write('            self.Running = True\n')
    f.write('    def Stop(self):\n')
    f.write('        """'+Language.G_Language[1252]+'"""\n')
    f.write('        if self.Widget and self.Running == True:\n')
    f.write('            self.Running = False\n')
    f.write('            if self.TimeID:\n')
    f.write('                self.Widget.after_cancel(self.TimeID)\n')
    f.write('        self.TimeID = None\n')

    f.write('    def IsRunning(self):\n')
    f.write('        """'+Language.G_Language[1866]+'"""\n')
    f.write('        return self.Running\n')
    f.write('    def Timer_CallBack(self,TimerIndex):\n')
    f.write('        """Timer callback function"""\n')
    f.write('        if self.Widget and self.Running == True:\n')
    f.write('            self.CallBackFunction()\n')
    f.write('            self.TimerIndex = self.TimerIndex + 1\n')
    f.write('            self.TimeID = self.Widget.after(self.Interval, lambda : self.Timer_CallBack(self.TimerIndex))\n')
#定时器
def WriteWMI(f):
    f.write('class WMI():\n')
    f.write('    """'+Language.G_Language[1796]+'"""\n')
    f.write('    def __init__(self):\n')
    f.write('        self.Wmi = wmi.WMI()\n')
    f.write('        self.CS = None\n')
    f.write('        self.OS = None\n')
    f.write('        self.CPU = None\n')
    f.write('        self.NetworkAdapter = None\n')
    f.write('        self.DiskList = None\n')
    f.write('        self.DisplayMonitorList = None\n')
    f.write('    def buildWMIInfo(self,infoType):\n')
    f.write('        if infoType == "CS" and self.CS is None:\n')
    f.write('           self.CS = self.Wmi.Win32_ComputerSystem()[0]\n')
    f.write('        elif infoType == "OS" and self.OS is None:\n')
    f.write('           self.OS = self.Wmi.Win32_OperatingSystem()[0]\n')
    f.write('        elif infoType == "CPU"  and self.CPU is None:\n')
    f.write('           self.CPU = self.Wmi.Win32_Processor()[0]\n')
    f.write('        elif infoType == "Network" and self.NetworkAdapter is None:\n')
    f.write('           self.NetworkAdapter = [_ for _ in self.Wmi.Win32_NetworkAdapterConfiguration() if _.MACAddress]\n')
    f.write('        elif infoType == "Disk" and self.DiskList is None:\n')
    f.write("           self.DiskList = [_ for _ in self.Wmi.Win32_DiskDrive() if _.InterfaceType != 'USB']\n")
    f.write('        elif infoType == "DisplayMonitor" and self.DisplayMonitorList is None:\n')
    f.write("           self.DisplayMonitorList = self.Wmi.Win32_DesktopMonitor()\n")
    f.write('    def GetComputerName(self):\n')
    f.write('        """'+Language.G_Language[6800]+'"""\n')
    f.write('        self.buildWMIInfo("CS")\n')
    f.write('        return self.CS.Caption\n')
    f.write('    def GetModelName(self):\n')
    f.write('        """'+Language.G_Language[6801]+'"""\n')
    f.write('        self.buildWMIInfo("CS")\n')
    f.write('        return self.CS.Model\n')
    f.write('    def GetNumberOfLogicalProcessors(self):\n')
    f.write('        """'+Language.G_Language[6802]+'"""\n')
    f.write('        self.buildWMIInfo("CS")\n')
    f.write('        return self.CS.NumberOfLogicalProcessors\n')
    f.write('    def GetNumberOfProcessors(self):\n')
    f.write('        """'+Language.G_Language[6803]+'"""\n')
    f.write('        self.buildWMIInfo("CS")\n')
    f.write('        return self.CS.NumberOfProcessors\n')
    f.write('    def GetUserName(self):\n')
    f.write('        """'+Language.G_Language[6804]+'"""\n')
    f.write('        self.buildWMIInfo("CS")\n')
    f.write('        return self.CS.UserName\n')
    f.write('    def GetWorkgroup(self):\n')
    f.write('        """'+Language.G_Language[6805]+'"""\n')
    f.write('        self.buildWMIInfo("CS")\n')
    f.write('        return self.CS.Workgroup\n')
    f.write('    def GetOSName(self):\n')
    f.write('        """'+Language.G_Language[6806]+'"""\n')
    f.write('        self.buildWMIInfo("OS")\n')
    f.write('        return self.OS.CSName\n')
    f.write('    def GetOSBuildNumber(self):\n')
    f.write('        """'+Language.G_Language[6807]+'"""\n')
    f.write('        self.buildWMIInfo("OS")\n')
    f.write('        return self.OS.BuildNumber\n')
    f.write('    def GetOSCaption(self):\n')
    f.write('        """'+Language.G_Language[6808]+'"""\n')
    f.write('        self.buildWMIInfo("OS")\n')
    f.write('        return self.OS.Caption\n')
    f.write('    def GetFreePhysicalMemory(self):\n')
    f.write('        """'+Language.G_Language[6809]+'"""\n')
    f.write('        self.buildWMIInfo("OS")\n')
    f.write('        return int(self.OS.FreePhysicalMemory)\n')
    f.write('    def GetFreeVirtualMemory(self):\n')
    f.write('        """'+Language.G_Language[6810]+'"""\n')
    f.write('        self.buildWMIInfo("OS")\n')
    f.write('        return int(self.OS.FreeVirtualMemory)\n')
    f.write('    def GetCPUCaption(self):\n')
    f.write('        """'+Language.G_Language[6811]+'"""\n')
    f.write('        self.buildWMIInfo("CPU")\n')
    f.write('        return self.CPU.Cpation\n')
    f.write('    def GetCPUDescription(self):\n')
    f.write('        """'+Language.G_Language[6812]+'"""\n')
    f.write('        self.buildWMIInfo("CPU")\n')
    f.write('        return self.CPU.Description\n')
    f.write('    def GetCPUName(self):\n')
    f.write('        """'+Language.G_Language[6813]+'"""\n')
    f.write('        self.buildWMIInfo("CPU")\n')
    f.write('        return self.CPU.Name\n')

    f.write('    def GetNetworkAdapterCount(self):\n')
    f.write('        """'+Language.G_Language[6814]+'"""\n')
    f.write('        self.buildWMIInfo("Network")\n')
    f.write('        return len(self.NetworkAdapter)\n')
    f.write('    def GetNetworkAdapter_Caption(self,ApaterIndex=0):\n')
    f.write('        """'+Language.G_Language[6815]+'"""\n')
    f.write('        self.buildWMIInfo("Network")\n')
    f.write('        return self.NetworkAdapter[ApaterIndex].Caption\n')
    f.write('    def GetNetworkAdapter_DefaultIPGateway(self,ApaterIndex=0):\n')
    f.write('        """'+Language.G_Language[6816]+'"""\n')
    f.write('        self.buildWMIInfo("Network")\n')
    f.write('        return self.NetworkAdapter[ApaterIndex].DefaultIPGetway\n')
    f.write('    def GetNetworkAdapter_DHCPEnable(self,ApaterIndex=0):\n')
    f.write('        """'+Language.G_Language[6817]+'"""\n')
    f.write('        self.buildWMIInfo("Network")\n')
    f.write('        return self.NetworkAdapter[ApaterIndex].DHCPEnable\n')
    f.write('    def GetNetworkAdapter_IPAddress(self,ApaterIndex=0):\n')
    f.write('        """'+Language.G_Language[6818]+'"""\n')
    f.write('        self.buildWMIInfo("Network")\n')
    f.write('        return self.NetworkAdapter[ApaterIndex].IPAddress\n')
    f.write('    def GetNetworkAdapter_IPEnabled(self,ApaterIndex=0):\n')
    f.write('        """'+Language.G_Language[6819]+'"""\n')
    f.write('        self.buildWMIInfo("Network")\n')
    f.write('        return self.NetworkAdapter[ApaterIndex].IPEnabled\n')
    f.write('    def GetNetworkAdapter_IPSubnet(self,ApaterIndex=0):\n')
    f.write('        """'+Language.G_Language[6820]+'"""\n')
    f.write('        self.buildWMIInfo("Network")\n')
    f.write('        return self.NetworkAdapter[ApaterIndex].IPSubnet\n')
    f.write('    def GetNetworkAdapter_MACAddress(self,ApaterIndex=0):\n')
    f.write('        """'+Language.G_Language[6821]+'"""\n')
    f.write('        self.buildWMIInfo("Network")\n')
    f.write('        return self.NetworkAdapter[ApaterIndex].MACAddres\n')

    f.write('    def GetDiskCount(self):\n')
    f.write('        """'+Language.G_Language[6822]+'"""\n')
    f.write('        self.buildWMIInfo("Disk")\n')
    f.write('        return len(self.DiskList)\n')
    f.write('    def GetDiskCapabilityDescript(self,DaskIndex):\n')
    f.write('        """'+Language.G_Language[6823]+'"""\n')
    f.write('        self.buildWMIInfo("Disk")\n')
    f.write('        return self.DiskList[DaskIndex].CapabilityDescriptions\n')
    f.write('    def GetDiskCaption(self,DaskIndex):\n')
    f.write('        """'+Language.G_Language[6824]+'"""\n')
    f.write('        self.buildWMIInfo("Disk")\n')
    f.write('        return self.DiskList[DaskIndex].Caption\n')
    f.write('    def GetDiskDescription(self,DaskIndex):\n')
    f.write('        """'+Language.G_Language[6825]+'"""\n')
    f.write('        self.buildWMIInfo("Disk")\n')
    f.write('        return self.DiskList[DaskIndex].Description\n')
    f.write('    def GetDiskInterfaceType(self,DaskIndex):\n')
    f.write('        """'+Language.G_Language[6826]+'"""\n')
    f.write('        self.buildWMIInfo("Disk")\n')
    f.write('        return self.DiskList[DaskIndex].InterfaceType\n')
    f.write('    def GetDiskMediaType(self,DaskIndex):\n')
    f.write('        """'+Language.G_Language[6827]+'"""\n')
    f.write('        self.buildWMIInfo("Disk")\n')
    f.write('        return self.DiskList[DaskIndex].MediaType\n')
    f.write('    def GetDiskModel(self,DaskIndex):\n')
    f.write('        """'+Language.G_Language[6828]+'"""\n')
    f.write('        self.buildWMIInfo("Disk")\n')
    f.write('        return self.DiskList[DaskIndex].Model\n')
    f.write('    def GetDiskPartitions(self,DaskIndex):\n')
    f.write('        """'+Language.G_Language[6829]+'"""\n')
    f.write('        self.buildWMIInfo("Disk")\n')
    f.write('        return self.DiskList[DaskIndex].Partitions\n')
    f.write('    def GetDiskSerialNumber(self,DaskIndex):\n')
    f.write('        """'+Language.G_Language[6830]+'"""\n')
    f.write('        self.buildWMIInfo("Disk")\n')
    f.write('        return self.DiskList[DaskIndex].SerialNumber\n')
    f.write('    def GetDiskSize(self,DaskIndex):\n')
    f.write('        """'+Language.G_Language[6831]+'"""\n')
    f.write('        self.buildWMIInfo("Disk")\n')
    f.write('        return self.DiskList[DaskIndex].Size\n')

    f.write('    def GetDisplayMonitorCount(self):\n')
    f.write('        """'+Language.G_Language[6832]+'"""\n')
    f.write('        self.buildWMIInfo("DisplayMonitor")\n')
    f.write('        return len(self.DisplayMonitorList)\n')
    f.write('    def GetDisplayMonitorDescription(self,MonitorIndex):\n')
    f.write('        """'+Language.G_Language[6833]+'"""\n')
    f.write('        self.buildWMIInfo("DisplayMonitor")\n')
    f.write('        return self.DisplayMonitorList[MonitorIndex].Description\n')
    f.write('    def GetDisplayMonitorType(self,MonitorIndex):\n')
    f.write('        """'+Language.G_Language[6834]+'"""\n')
    f.write('        self.buildWMIInfo("DisplayMonitor")\n')
    f.write('        return self.DisplayMonitorList[MonitorIndex].MonitorType\n')
    f.write('    def GetDisplayMonitorName(self,MonitorIndex):\n')
    f.write('        """'+Language.G_Language[6835]+'"""\n')
    f.write('        self.buildWMIInfo("DisplayMonitor")\n')
    f.write('        return self.DisplayMonitorList[MonitorIndex].Name\n')
    f.write('    def GetDisplayMonitorPixelsPerXLogicalInch(self,MonitorIndex):\n')
    f.write('        """'+Language.G_Language[6836]+'"""\n')
    f.write('        self.buildWMIInfo("DisplayMonitor")\n')
    f.write('        return self.DisplayMonitorList[MonitorIndex].PixelsPerXLogicalInch\n')
    f.write('    def GetDisplayMonitorPixelsPerYLogicalInch(self,MonitorIndex):\n')
    f.write('        """'+Language.G_Language[6837]+'"""\n')
    f.write('        self.buildWMIInfo("DisplayMonitor")\n')
    f.write('        return self.DisplayMonitorList[MonitorIndex].PixelsPerYLogicalInch\n')
    f.write('    def GetDisplayMonitorScreenWidth(self,MonitorIndex):\n')
    f.write('        """'+Language.G_Language[6838]+'"""\n')
    f.write('        self.buildWMIInfo("DisplayMonitor")\n')
    f.write('        return self.DisplayMonitorList[MonitorIndex].ScreenWidth\n')
    f.write('    def GetDisplayMonitorScreenHeight(self,MonitorIndex):\n')
    f.write('        """'+Language.G_Language[6839]+'"""\n')
    f.write('        self.buildWMIInfo("DisplayMonitor")\n')
    f.write('        return self.DisplayMonitorList[MonitorIndex].ScreenHeight\n')

#多线程下载文件支持
def WriteDownLoadFileProgressDialog(f):
    f.write('#下载进度对话框\n')
    f.write('class   DownLoadFileProgressDialog:\n')
    f.write("    def __init__(self,uiName,showDialog = True,title='"+Language.G_Language[3240]+"',bgColor='#EFEFEF',fgColor='#000000'):\n")
    f.write('        self.FinishFlag = False\n')
    f.write('        self.LocalSaveFile = ""\n')
    f.write('        self.showDialog = showDialog\n')
    f.write('        if self.showDialog == True:\n')
    f.write('            self.root = GetElement(uiName,"root")\n')
    f.write('            self.Dialog = tkinter.Toplevel()\n')
    f.write('            self.Dialog.attributes("-toolwindow", 1)\n')
    f.write('            self.Dialog.resizable(0,0) \n')
    f.write('            self.Dialog.wm_attributes("-topmost", 1)\n')
    f.write('            self.Title = title\n')
    f.write('            self.bgColor = bgColor\n')
    f.write('            self.fgColor = fgColor\n')
    f.write('            self.Dialog.title(self.Title)\n')
    f.write('            self.Form = tkinter.Canvas(self.Dialog,width = 280,height=140,bg = bgColor)\n')
    f.write('            self.Form.place(x=0, y=0,width=280,height=140)\n')
    f.write('            self.ShowDownLoadProgressDialog()\n')
    f.write('    #取得当前窗口句柄\n')
    f.write('    def GetWindHandle(self):\n')
    f.write('        _handle = None\n')
    f.write('        if self.showDialog == True:\n')
    f.write('            import win32gui\n')
    f.write('            _handle = win32gui.FindWindow(None,self.Title)\n')
    f.write('        return _handle\n')
    f.write('    def downloadFileFromURL(self,url,saveToDir=None,ReDownLoadIfExist = True,autoExtractZip = False,progressCallBack = None,finishCallBack = None,errorCallBack = None):\n')
    f.write('        """'+Language.G_Language[3241]+'"""\n')
    f.write('        global G_ResDir\n')
    f.write('        self.URLFile = url\n')
    f.write('        self.LocalDir = saveToDir\n')
    f.write('        self.autoExtractZip = autoExtractZip\n')
    f.write('        self.progressCallBack = progressCallBack\n')
    f.write('        self.errorCallBack = errorCallBack\n')
    f.write('        self.finishCallBack = finishCallBack\n')
    f.write('        projpath, resdirname = os.path.split(G_ResDir)\n')
    f.write('        _handle = self.GetWindHandle()\n')
    f.write('        WebSite, FileName = os.path.split(self.URLFile)\n')
    f.write('        if self.LocalDir:\n')
    f.write('            self.LocalSaveFile = os.path.join(self.LocalDir,FileName)\n')
    f.write('        else:\n')
    f.write('            self.LocalSaveFile = os.path.join(projpath,FileName)\n')
    f.write('        IsZipFile = False\n')
    f.write('        if FileName.find(".zip") > 0 :\n')
    f.write('            IsZipFile = True\n')
    f.write('        if os.path.exists(self.LocalSaveFile) == True:\n')
    f.write('            if ReDownLoadIfExist == True:\n')
    f.write('                os.remove(self.LocalSaveFile)\n')
    f.write('            else:\n')
    f.write('                if IsZipFile == True and self.autoExtractZip == True:\n')
    f.write('                    if self.LocalDir:\n')
    f.write('                        LocalDir, LocalFile = os.path.split(self.LocalDir)\n')
    f.write('                        self.extractZipFile(self.LocalSaveFile,LocalDir)\n')
    f.write('                    else:\n')
    f.write('                        self.extractZipFile(self.LocalSaveFile,projpath)\n')
    f.write('                return \n')
    f.write('        try:\n')
    f.write('            resp = requests.get(self.URLFile,stream=True)\n')
    f.write("            total_length = int(resp.headers.get('content-length',0))\n")
    f.write('            def handle_ThreadDownload(theResp,theTotallength):\n')
    f.write('                if resp.status_code == 404:\n')
    f.write('                    if self.showDialog == True:\n')
    f.write('                        MessageBox("'+Language.G_Language[978]+'",_handle)\n')
    f.write('                    if self.errorCallBack:\n')
    f.write('                        self.errorCallBack(self.URLFile,1)\n')
    f.write('                    self.cancle()\n')
    f.write('                else:\n')
    f.write('                    step = int(theTotallength / 100)\n')
    f.write('                    if step < 320:\n')
    f.write('                        step = 320\n')
    f.write('                    maximum = int (theTotallength/step)\n')
    f.write('                    if maximum == 0:\n')
    f.write('                        maximum = 1\n')
    f.write('                    if self.showDialog == True:\n')
    f.write("                        self.ProgressBar['maximum'] = maximum\n")
    f.write('                    self.FinishFlag = False\n')
    f.write('                    if os.path.exists(self.LocalSaveFile) == False:\n')
    f.write("                        with open(self.LocalSaveFile, 'wb') as f:\n")
    f.write('                            progress = 0\n')
    f.write('                            for i in theResp.iter_content(chunk_size=step):  \n')
    f.write('                                f.write(i)\n')
    f.write('                                progress = progress + 1\n')
    f.write('                                if progress <= maximum:\n')
    f.write('                                    if self.showDialog == True:\n')
    f.write("                                        self.ProgressBar['value'] = progress\n")
    f.write('                                        self.TitleLabel.configure(text="'+Language.G_Language[3276]+'" + str("(%d%%)"%progress))\n')
    f.write('                                    if self.progressCallBack:\n')
    f.write('                                        self.progressCallBack(self.LocalSaveFile,progress)\n')
    f.write('                        #下载完毕后解压，并删除ZIP文件\n')
    f.write('                        if IsZipFile == True and self.autoExtractZip == True:\n')
    f.write('                            if self.showDialog == True:\n')
    f.write('                                self.TitleLabel.configure(text="'+Language.G_Language[3277]+'")\n')
    f.write('                            if self.LocalDir:\n')
    f.write('                                self.extractZipFile(self.LocalSaveFile,self.LocalDir)\n')
    f.write('                            else:\n')
    f.write('                                self.extractZipFile(self.LocalSaveFile,projpath)\n')
    f.write('                        else:\n')
    f.write('                            self.FinishFlag = True \n')
    f.write('                            if self.showDialog == True:\n')
    f.write('                                self.TitleLabel.configure(text="'+Language.G_Language[3238]+'")\n')
    f.write('                                self.OKButton.configure(text="'+Language.G_Language[69]+'")\n')
    f.write('                            if self.finishCallBack:\n')
    f.write('                                self.finishCallBack(self.LocalSaveFile)\n')
    f.write('            self.run_thread_download = threading.Thread(target=handle_ThreadDownload, args=[resp,total_length])\n')
    f.write('            self.run_thread_download.Daemon = True\n')
    f.write('            self.run_thread_download.start() \n')
    f.write('        except Exception as Ex:\n')
    f.write('            if self.errorCallBack:\n')
    f.write('                self.errorCallBack(self.URLFile,1)\n')
    f.write('            if self.showDialog == True:\n')
    f.write('                MessageBox(str(Ex),_handle)\n')
    f.write('    def downloadFilesFromURLList(self,urllist,saveToDir,ReDownLoadIfExist = True,progressCallBack = None,finishCallBack = None,errorCallBack = None):\n')
    f.write('        """'+Language.G_Language[3242]+'"""\n')
    f.write('        global G_ResDir\n')
    f.write('        self.URLFileList = urllist\n')
    f.write('        self.URLFile = ""\n')
    f.write('        self.LocalDir = saveToDir\n')
    f.write('        self.progressCallBack = progressCallBack\n')
    f.write('        self.errorCallBack = errorCallBack\n')
    f.write('        self.finishCallBack = finishCallBack\n')
    f.write('        self.FinishFlag = False\n')
    f.write('        projpath, resdirname = os.path.split(G_ResDir)\n')
    f.write('        _handle = self.GetWindHandle()\n')
    f.write('        if self.showDialog == True:\n')
    f.write('            self.ProgressBar[\'maximum\'] = len(urllist)\n')
    f.write('        try:\n')
    f.write('            def handle_ThreadDownloadFiles():\n')
    f.write('                progress = 0\n')
    f.write('                for url in self.URLFileList:\n')
    f.write('                    self.URLFile = url\n')
    f.write('                    resp = requests.get(self.URLFile,stream=True)\n')
    f.write('                    total_length = int(resp.headers.get(\'content-length\',0))\n')
    f.write('                    if resp.status_code == 404:\n')
    f.write('                        if self.showDialog == True:\n')
    f.write('                            MessageBox(self.URLFile+"'+Language.G_Language[978]+'",_handle)\n')
    f.write('                        if self.errorCallBack:\n')
    f.write('                            self.errorCallBack(self.URLFile,1)\n')
    f.write('                    else:\n')
    f.write('                        WebSite, FileName = os.path.split(self.URLFile)\n')
    f.write('                        if self.LocalDir:\n')
    f.write('                            self.LocalSaveFile = os.path.join(self.LocalDir,FileName)\n')
    f.write('                        else:\n')
    f.write('                            self.LocalSaveFile = os.path.join(projpath,FileName)\n')
    f.write('                        if os.path.exists(self.LocalSaveFile) == True:\n')
    f.write('                            if ReDownLoadIfExist == True:\n')
    f.write('                                 os.remove(self.LocalSaveFile)\n')
    f.write('                        if os.path.exists(self.LocalSaveFile) == False:\n')
    f.write('                            step = 1024\n')   
    f.write('                            with open(self.LocalSaveFile, \'wb\') as f:\n')
    f.write('                                for i in resp.iter_content(chunk_size=step):\n')
    f.write('                                    f.write(i)\n')
    f.write('                        progress = progress + 1\n')
    f.write('                        if self.showDialog == True:\n')
    f.write('                            self.ProgressBar[\'value\'] = progress\n')
    f.write('                            self.TitleLabel.configure(text="'+Language.G_Language[3240]+'" + str("(%d%%)"%progress))\n')
    f.write('                        if self.progressCallBack:\n')
    f.write('                            self.progressCallBack(self.LocalSaveFile,progress)\n')
    
    f.write('                self.FinishFlag = True \n')
    f.write('                if self.showDialog == True:\n')
    f.write('                    self.TitleLabel.configure(text="'+Language.G_Language[3238]+'")\n')
    f.write('                    self.OKButton.configure(text="'+Language.G_Language[69]+'")\n')
    f.write('                if self.finishCallBack:\n')
    f.write('                    self.finishCallBack(self.LocalSaveFile)\n')
    f.write('            self.run_thread_download = threading.Thread(target=handle_ThreadDownloadFiles, args=[])\n')
    f.write('            self.run_thread_download.Daemon = True\n')
    f.write('            self.run_thread_download.start() \n')
    f.write('        except Exception as Ex:\n')
    f.write('            if self.errorCallBack:\n')
    f.write('                self.errorCallBack(self.URLFile,1)\n')
    f.write('            if self.showDialog == True:\n')
    f.write('                MessageBox(str(Ex),_handle)\n')
    f.write('    #解压\n')
    f.write('    def extractZipFile(self,ZipFile,ExtractDir):\n')
    f.write('        _handle = self.GetWindHandle()\n')
    f.write('        try:\n')
    f.write('            block_size = 8192\n')
    f.write('            z = zipfile.ZipFile(ZipFile)\n')
    f.write('            namecount = len(z.namelist())\n')
    f.write('            if self.showDialog == True:\n')
    f.write("                self.ProgressBar['maximum'] = namecount\n")
    f.write('            nameindex = 0\n')
    f.write('            for zip_file in z.namelist():\n')
    f.write('                old_dir,old_fileName = os.path.split(zip_file)\n')
    f.write('                file_name = zip_file\n')
    f.write('                file_name_utf8 = file_name.encode(\'cp437\').decode(\'gbk\') \n')
    # f.write('                try:\n')
    # f.write('                    file_name_utf8 = file_name.encode(\'cp437\').decode(\'gbk\') \n')
    # f.write('                except:\n')
    # f.write('                    file_name_utf8 = filename.encode(\'utf-8\').decode(\'utf-8\')\n')
    #f.write('                new_dir,new_fileName = os.path.split(file_name_utf8)\n')
    f.write('                progress = int(nameindex / namecount * 100)\n')
    f.write('                if self.showDialog == True:\n')
    f.write('                    self.TitleLabel.configure(text="'+Language.G_Language[3279]+'" + str("(%d%%)"%progress))\n')
    f.write('                entry_info = z.getinfo(file_name)\n')
    f.write('                i = z.open(file_name)\n')
    f.write('                print(file_name)\n')
    f.write("                if file_name[-1] != '/':\n")
    f.write('                    o = open(f"{ExtractDir}/{file_name_utf8}", "wb")\n')
    f.write('                    offset = 0\n')
    f.write('                    while True:\n')
    f.write('                        b = i.read(block_size)\n')
    f.write('                        offset += len(b)\n')
    f.write("                        if b == b'':\n")
    f.write('                            break\n')
    f.write('                        o.write(b)\n')
    f.write('                    o.close()\n')
    f.write('                else:\n')
    f.write('                    dir_name = os.path.dirname(file_name_utf8)\n')
    f.write('                    p = Path(f"{ExtractDir}/{file_name_utf8}")\n')
    f.write('                    p.mkdir(parents=True, exist_ok=True)\n')
    f.write('                i.close()\n')
    f.write('                nameindex = nameindex + 1\n')
    f.write('                if self.showDialog == True:\n')
    f.write("                    self.ProgressBar['value'] = nameindex\n")
    f.write('            z.close()\n')
    f.write('            if self.autoExtractZip == True:\n')
    f.write('                os.remove(ZipFile)\n')
    f.write('            self.FinishFlag = True  \n')
    f.write('            if self.showDialog == True:\n')
    f.write('                self.TitleLabel.configure(text="'+Language.G_Language[3239]+'")\n')
    f.write('                self.OKButton.configure(text="'+Language.G_Language[69]+'")\n')
    f.write('            if self.finishCallBack:\n')
    f.write('                self.finishCallBack(ExtractDir)\n')
    f.write('            return True\n')
    f.write('        except Exception as Ex:\n')
    f.write('            try:\n')
    f.write("                zip_1 = zipfile.ZipFile(ZipFile,'r')\n")
    f.write('                zip_1.extractall(path=ExtractDir)\n')
    f.write('                zip_1.close()\n')
    f.write('                os.remove(ZipFile)\n')
    f.write('                self.FinishFlag = True  \n')
    f.write('                if self.showDialog == True:\n')
    f.write('                    self.TitleLabel.configure(text="'+Language.G_Language[3239]+'")\n')
    f.write('                    self.OKButton.configure(text="'+Language.G_Language[69]+'")\n')
    f.write('                if self.finishCallBack:\n')
    f.write('                    self.finishCallBack(ExtractDir)\n')
    f.write('                return True\n')
    f.write('            except Exception as Ex:\n')
    f.write('                if self.showDialog == True:\n')
    f.write('                    MessageBox(str(Ex),_handle)\n')
    f.write('                if self.errorCallBack:\n')
    f.write('                    self.errorCallBack(self.LocalSaveFile,2)\n')
    f.write('                return False\n')
    f.write('    #确定TitleLabel\n')
    f.write('    def submit(self):\n')
    f.write('        if self.showDialog == True:\n')
    f.write('            _handle = self.GetWindHandle()\n')
    f.write('            if self.FinishFlag == False:\n')
    f.write('                if  AskBox("'+Language.G_Language[3275]+'",_handle) == False:\n')
    f.write('                    return \n')
    f.write('                if self.LocalSaveFile:\n')
    f.write('                    if os.path.exists(self.LocalSaveFile) == True:\n')
    f.write('                        os.remove(self.LocalSaveFile)\n')
    f.write('            self.Dialog.destroy()\n')
    f.write('    #取消\n')
    f.write('    def cancle(self):\n')
    f.write('        if self.showDialog == True:\n')
    f.write('            self.Dialog.destroy()\n')
    f.write('    #显示设置列表\n')
    f.write('    def ShowDownLoadProgressDialog(self):\n')
    f.write('        if self.showDialog == True:\n')
    f.write("            self.TitleFont =tkinter.font.Font(family=\"Arial\", size=10,weight='normal',slant='roman',underline=0,overstrike=0)\n")
    f.write('            self.TitleLabel = tkinter.Label(self.Form,anchor = tkinter.W,bg=self.bgColor,fg=self.fgColor,font = self.TitleFont,text=self.Title,width = 100,height = 1)\n')
    f.write('            self.TitleLabel.place(x = 10,y = 10,width = 260,height = 24)\n')
    f.write("            self.ProgressBar = tkinter.ttk.Progressbar(self.Form, length=200, mode='determinate',style=\"TProgressbar\", orient=tkinter.HORIZONTAL)\n")
    f.write('            self.ProgressBar.place(x=10,y=40,width=260,height=15)\n')
    f.write("            self.ProgressBar['maximum'] = 100\n")
    f.write("            self.ProgressBar['value'] = 0\n")
    f.write('            self.OKButton = tkinter.Button(self.Form,anchor = tkinter.CENTER,text="'+Language.G_Language[70]+'",width = 100,height = 1,bg=self.bgColor,fg=self.fgColor,command=self.submit)\n')
    f.write('            self.OKButton.place(x = 180,y = 70,width = 80,height = 24) \n')
    f.write('            #居中显示\n')
    f.write('            sx = self.root.winfo_x()\n')
    f.write('            sy = self.root.winfo_y()\n')
    f.write('            sw = self.root.winfo_width()\n')
    f.write('            sh = self.root.winfo_height()\n')
    f.write('            nx = sx + (sw - 280)/2\n')
    f.write('            ny = sy + (sh - 110)/2\n')
    f.write("            geoinfo = str('%dx%d+%d+%d'%(280,110,nx,ny))\n")
    f.write('            self.Dialog.geometry(geoinfo)   \n')
